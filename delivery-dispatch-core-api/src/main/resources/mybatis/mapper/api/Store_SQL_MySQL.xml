<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.StoreMapper">



    <!-- selectStoresResult -->
    <resultMap id="selectStoreResult" type="kr.co.cntt.core.model.store.Store">
        <result property="id" column="id" />
        <result property="loginId" column="login_id" />
        <result property="code" column="code" />
        <result property="phone" column="phone" />
        <result property="storeName" column="store_name" />
        <result property="assignmentStatus" column="assignment_status" />
        <result property="name" column="name" />

        <result property="chStoreName" column="ch_store_name" />
        <result property="storePhone" column="store_phone" />

        <result property="address" column="address" />
        <result property="detailAddress" column="detail_address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />

        <result property="chAddress" column="ch_address" />
        <result property="chDetailAddress" column="ch_detail_address" />

        <association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
            <result property="id" column="groupId" />
            <result property="name" column="groupName" />
            <result property="adminId" column="groupAdminId" />
        </association>

        <association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
            <result property="id" column="subgroupId" />
            <result property="groupId" column="subgroupGroupId" />
            <result property="name" column="subgroupName" />
            <result property="adminId" column="subgroupAdminId" />
        </association>
    </resultMap>


	<!--로그인 ID 확인 -->
	<select id="selectLoginStore" parameterType="kr.co.cntt.core.model.store.Store" resultType="String">
		SELECT login_id FROM TB_STORE
		WHERE 1=1
			AND login_id = #{loginId}
		<!--AND login_pw = #{loginPw}-->
		limit 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectStoreTokenCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_STORE A JOIN TB_STORE_SESSION B
		ON A.id = B.store_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>


	<!-- insertStoreSession 토큰값을 넣어준다.-->
	<insert id="insertStoreSession" parameterType="kr.co.cntt.core.model.store.Store">
		<![CDATA[
		INSERT INTO TB_STORE_SESSION(store_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_STORE
		WHERE login_id = #{loginId}
		]]>
	</insert>


	<!--store 정보 조회-->
    <select id="selectStoreInfo" parameterType="kr.co.cntt.core.model.store.Store" resultMap="selectStoreResult">
        SELECT
            TS.created_datetime
            , TS.modified_datetime
            , TS.last_access
            , TS.admin_id
            , TS.chat_user_id
            , TS.id
            , TS.login_id
            , TS.login_pw
            , TS.code
            , TS.name
            , TS.phone
            , TS.store_name
            , TS.ch_store_name
            , TS.store_phone
            , TS.address
            , TS.detail_address
            , TS.latitude
            , TS.longitude
            , TS.store_status
            , TS.store_distance_sort
            , TS.radius
            , TS.assignment_status
            , TS.assignment_limit
            , TS.third_party
            , TS.deleted
            , TSG.id AS subgroupId
            , TSG.group_id AS subgroupGroupId
            , TG.name AS groupName
            , TSG.name AS subgroupName
            , TSG.admin_id AS subgroupAdminId
            , TG.id AS groupId
            , TG.admin_id AS groupAdminId
        FROM TB_STORE TS

        left join
        TB_SUBGROUP_STORE_REL AS SSR
        on TS.id = SSR.store_id
        AND SSR.deleted is NULL

        left join
        TB_SUBGROUP AS TSG
        on SSR.group_id=TSG.id
        AND TSG.deleted is NULL

        left join
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL

        WHERE 1=1
        <choose>
            <when test="id != null and id != ''">
                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
                    AND TS.admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                </if>
                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
                    AND TS.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                AND TS.id = #{id}
            </when>
            <otherwise>
                AND TS.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                AND TS.id = (
                SELECT store_id
                FROM TB_STORE_SESSION
                WHERE access_token=#{accessToken}
                )
            </otherwise>
        </choose>
    </select>


	<!-- store 정보 수정 -->
	<update id="updateStoreInfo" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET
			A.modified_datetime = now()
			<if test="expirationDate != null and expirationDate != ''">
				, A.expiration_date = #{expirationDate}
			</if>

			<if test="lastAccess != null and lastAccess != ''">
				, A.last_access = #{lastAccess}
			</if>

			<if test="code != null and code != ''">
				, A.code = #{code}
			</if>

			<if test="name != null and name != ''">
				, A.name = #{name}
			</if>

			<if test="phone != null and phone != ''">
				, A.phone = #{phone}
			</if>

			<if test="storeName != null and storeName != ''">
				, A.store_name = #{storeName}
			</if>

			<if test="chStoreName != null and chStoreName != ''">
				, A.ch_store_name = #{chStoreName}
			</if>

			<if test="storePhone != null and storePhone != ''">
				, A.store_phone = #{storePhone}
			</if>

			<if test="loginPw != null and loginPw != ''">
				, A.login_pw = #{loginPw}
			</if>

			<if test="address != null and address != ''">
				, A.address = #{address}
			</if>

			<if test="detailAddress != null and detailAddress != ''">
				, A.detail_address = #{detailAddress}
			</if>

			<if test="chAddress != null and chAddress != ''">
				, A.ch_address = #{chAddress}
			</if>

			<if test="chDetailAddress != null and chDetailAddress != ''">
				, A.ch_detail_address = #{chDetailAddress}
			</if>

			<if test="latitude != null and latitude != ''">
				, A.latitude = #{latitude}
			</if>

			<if test="longitude != null  and longitude != ''">
				, A.longitude = #{longitude}
			</if>

			<if test="storeStatus != null  and storeStatus != ''">
				, A.store_status = #{storeStatus}
			</if>

			<if test="radius != null  and radius != ''">
				, A.radius = #{radius}
			</if>

			<if test="storeDistanceSort != null  and storeDistanceSort != '' and storeDistanceSort != '-1'">
				, A.store_distance_sort = #{storeDistanceSort}
			</if>
			<if test="storeDistanceSort == '-1'">
				, A.store_distance_sort = NULL
			</if>

			<if test="assignmentStatus != null  and assignmentStatus != ''">
				, A.assignment_status = #{assignmentStatus}
			</if>

			<if test="assignmentLimit != null  and assignmentLimit != ''">
				, A.assignment_limit = #{assignmentLimit}
			</if>
			<if test="subGroupStoreRel != null">
				, B.modified_datetime = now()
				, B.store_id = #{subGroupStoreRel.storeId}
				, B.subgroup_id = #{subGroupStoreRel.subGroupId}
				, B.group_id = #{subGroupStoreRel.groupId}
				, C.modified_datetime = now()
				, C.store_id = #{subGroupStoreRel.storeId}
				, C.subgroup_id = #{subGroupStoreRel.subGroupId}
				, C.group_id = #{subGroupStoreRel.groupId}
			</if>

		WHERE 1=1
            AND A.deleted IS NULL
            AND B.deleted IS NULL
            AND C.deleted IS NULL
            <choose>
                <when test="id != null and id != ''">
                    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                    AND A.id = #{id}
                </when>
                <otherwise>
                    AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                    AND A.id = (
                        SELECT store_id
                        FROM TB_STORE_SESSION
                        WHERE access_token=#{accessToken}
                    )
                </otherwise>
            </choose>
	</update>


	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	id
        	, latitude
        	, longitude
        FROM TB_STORE
        WHERE admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{accessToken}))
	</select>


	<!-- selectSubGroupStores -->
	<select id="selectSubGroupStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	A.id
        	, A.latitude
        	, A.longitude
        FROM TB_STORE AS A
        LEFT JOIN TB_SUBGROUP_STORE_REL AS B
        ON A.id = B.store_id
        WHERE B.deleted IS NULL
        <choose>
            <when test="id != null and id != ''">
                AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id})
            </when>
            <otherwise>
                AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
            </otherwise>
        </choose>
	</select>

    <!-- updateStoreAssignmentStatus -->
    <update id="updateStoreAssignmentStatus" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET assignment_status = #{assignmentStatus}
            , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>

    <!-- updateStoreThirdParty -->
    <update id="updateStoreThirdParty" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET third_party = #{thirdParty}
            , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectThirdParty -->
    <select id="selectThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty" resultType="kr.co.cntt.core.model.thirdParty.ThirdParty">
        SELECT
        A.created_datetime
        , A.modified_datetime
        , A.id
        , A.name
        , A.admin_id
        FROM TB_THIRD_PARTY as A
        WHERE
        A.deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq '1'.toString()">
                  AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq '2'.toString()">
                    AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY A.name asc
    </select>


    <!-- selectStoreLocation -->
    <select id="selectStoreLocation" parameterType="String" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
            id
            , latitude
            , longitude
        FROM TB_STORE
        WHERE id = #{id};
    </select>


    <!-- updateStoreAlarm -->
    <update id="updateStoreAlarm" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
          SET alarm = #{alarm}
              , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectAlarm -->
    <select id="selectAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm" resultType="kr.co.cntt.core.model.alarm.Alarm">
        SELECT
        created_datetime
        , modified_datetime
        , id
        , admin_id
        , alarm_type
        , ori_file_name
        , file_name
        , file_size
        FROM TB_ALARM
        WHERE
        deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq '1'.toString()">
                    AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq '2'.toString()">
                    AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY alarm_type asc
    </select>
</mapper>
 