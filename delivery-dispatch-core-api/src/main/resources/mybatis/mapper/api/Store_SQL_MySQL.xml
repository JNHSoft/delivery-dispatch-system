<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.StoreMapper">



    <!-- selectStoresResult -->
    <resultMap id="selectStoreResult" type="kr.co.cntt.core.model.store.Store">
        <result property="id" column="id" />
        <result property="adminId" column="admin_id" />
        <result property="loginId" column="login_id" />
        <result property="loginPw" column="login_pw" />
        <result property="chatUserId" column="chat_user_id" />
        <result property="code" column="code" />
        <result property="phone" column="phone" />
        <result property="storeName" column="store_name" />
        <result property="assignmentStatus" column="assignment_status" />
        <result property="assignmentLimit" column="assignment_limit" />
        <result property="name" column="name" />
        <result property="adminAssignmentStatus" column="admin_assignment_status" />
        <result property="adminAssignmentLimit" column="admin_assignment_limit" />
        <result property="chStoreName" column="ch_store_name" />
        <result property="storePhone" column="store_phone" />

        <result property="address" column="address" />
        <result property="detailAddress" column="detail_address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />

        <result property="chAddress" column="ch_address" />
        <result property="chDetailAddress" column="ch_detail_address" />
        <result property="thirdParty" column="third_party"/>
        <result property="alarm" column="alarm"/>
        <result property="accessToken" column="access_token"/>

        <result property="brandCode" column="brand_code" />
        <result property="brandName" column="brand_name" />
        <result property="brandImg" column="brand_img" />

        <association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
            <result property="id" column="group_id" />
            <result property="name" column="group_name" />
            <result property="adminId" column="group_admin_id" />
        </association>

        <association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
            <result property="id" column="subgroup_id" />
            <result property="groupId" column="subgroup_group_id" />
            <result property="name" column="subgroup_name" />
            <result property="adminId" column="subgroup_admin_id" />
        </association>
    </resultMap>

    <!-- selectOrderResult -->
    <resultMap id="selectOrderResult" type="kr.co.cntt.core.model.order.Order">
        <result property="id" column="id" />
        <result property="adminId" column="admin_id" />
        <result property="storeId" column="store_id" />
        <result property="riderId" column="rider_id" />
        <result property="status" column="status" />
        <result property="createdDatetime" column="created_datetime" />
        <result property="menuName" column="menu_name" />
        <result property="assignedDatetime" column="assigned_datetime" />
        <result property="pickedUpDatetime" column="picked_up_datetime" />
        <result property="reservationDatetime" column="reservation_datetime" />
        <result property="reservationStatus" column="reservation_status" />
        <result property="completedDatetime" column="completed_datetime" />
        <result property="returnDatetime" column="return_datetime"/>
        <result property="paid" column="paid" />

        <result property="cookingTime" column="cooking_time" />
        <result property="menuPrice" column="menu_price" />
        <result property="deliveryPrice" column="delivery_price" />
        <result property="totalPrice" column="total_price" />
        <result property="combinedOrderId" column="combined_order_id" />
        <result property="message" column="message" />
        <result property="phone" column="phone" />
        <result property="address" column="address" />
        <result property="areaAddress" column="area_address" />
        <result property="districtAddress" column="district_address" />
        <result property="streetAddress" column="street_address" />
        <result property="estateAddress" column="estate_address" />
        <result property="buildingAddress" column="building_address" />
        <result property="detailAddress" column="detail_address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="regOrderId" column="reg_order_id" />
        <result property="distance" column="distance" />

        <association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
            <result property="storeName" column="store_name" />
        </association>

        <association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
            <result property="id" column="id" />
            <result property="name" column="rider_name" />
            <result property="phone" column="rider_phone" />
        </association>

        <association property="payment" column="payment" javaType="kr.co.cntt.core.model.payment.Payment">
            <result property="type" column="type" />
            <result property="orderId" column="order_id" />
        </association>


        <association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
            <result property="id" column="group_id" />
            <result property="name" column="group_name" />
            <result property="adminId" column="group_admin_id" />
        </association>

        <association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
            <result property="id" column="subgroup_id" />
            <result property="groupId" column="subgroup_group_id" />
            <result property="name" column="subgroup_name" />
            <result property="adminId" column="subgroup_admin_id" />
        </association>
    </resultMap>

    <!-- loginStoreInfo -->
    <select id="loginStoreInfo" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
<!--        SELECT-->
<!--        A.id, A.chat_user_id, A.login_id, A.login_pw,-->
<!--        A.store_status, A.assignment_status, A.assignment_limit,-->
<!--        B.access_token-->
<!--        FROM TB_STORE A JOIN TB_STORE_SESSION B-->
<!--        ON A.id = B.store_id-->
<!--        WHERE A.login_id = #{loginId}-->
<!--        AND login_pw = #{loginPw}-->
<!--        AND deleted IS NULL-->
<!--        ORDER BY B.Created_datetime DESC-->
<!--        limit 1-->

        select	 A.id
                ,A.chat_user_id
                ,A.login_id
                ,A.login_pw
                ,A.store_status
                ,A.assignment_status
                ,A.assignment_limit
                ,ifnull(A.brand_code, '') as brand_code
                ,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = A.brand_code )	as brand_name
                ,concat('/resources/images/common/logo', A.brand_code, '.png')		as brand_img
                ,B.access_token
        from	 TB_STORE	as A
                ,TB_STORE_SESSION	as B
        where	 A.id = B.store_id
        and		 A.deleted is null
        and		 A.login_id = #{loginId}
        and		 A.login_pw = #{loginPw}
    </select>

    <!--로그인 ID 확인 -->
	<select id="selectLoginStore" parameterType="kr.co.cntt.core.model.store.Store" resultType="Map">
		SELECT A.login_id AS loginId
		    , B.access_token AS accessToken
		FROM TB_STORE AS A
		LEFT JOIN TB_STORE_SESSION AS B
		ON A.id = B.store_id
		WHERE 1=1
		AND login_id = #{loginId}
			AND login_pw = #{loginPw}
		limit 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectStoreTokenCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_STORE A JOIN TB_STORE_SESSION B
		ON A.id = B.store_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>

    <!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
    <select id="selectStoreTokenLoginCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.login.User">
        <![CDATA[
		SELECT
			A.login_id, A.login_pw
		FROM TB_STORE A JOIN TB_STORE_SESSION B
		ON A.id = B.store_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		LIMIT 1
		]]>
    </select>


	<!-- insertStoreSession 토큰값을 넣어준다.-->
	<insert id="insertStoreSession" parameterType="kr.co.cntt.core.model.store.Store">
		<![CDATA[
		INSERT INTO TB_STORE_SESSION(store_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_STORE
		WHERE login_id = #{loginId} AND deleted IS NULL
		]]>
	</insert>

	<!-- insertAdminStoreSession 토큰값을 넣어준다.-->
	<insert id="insertAdminStoreSession" parameterType="kr.co.cntt.core.model.store.Store">
		<![CDATA[
		INSERT INTO TB_STORE_SESSION(store_id, access_token, created_datetime)
		SELECT
			#{id}
			, #{accessToken}
			, now()
		FROM TB_STORE
		WHERE login_id = #{loginId}
		AND   deleted is null
		]]>
	</insert>


	<!--store 정보 조회-->
    <select id="selectStoreInfo" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectStoreResult">
<!--        SELECT-->
<!--            TS.created_datetime-->
<!--            , TS.modified_datetime-->
<!--            , TS.last_access-->
<!--            , TS.admin_id-->
<!--            , TS.chat_user_id-->
<!--            , TS.id-->
<!--            , TS.login_id-->
<!--            , TS.login_pw-->
<!--            , TS.code-->
<!--            , TS.name-->
<!--            , TS.phone-->
<!--            , TS.store_name-->
<!--            , TS.ch_store_name-->
<!--            , TS.store_phone-->
<!--            , TS.address-->
<!--            , TS.detail_address-->
<!--            , TS.latitude-->
<!--            , TS.longitude-->
<!--            , TS.store_status-->
<!--            , TS.store_distance_sort-->
<!--            , TS.radius-->
<!--            , TS.assignment_status-->
<!--            , TS.assignment_limit-->
<!--            , TS.third_party-->
<!--            , TS.deleted-->
<!--            , TS.alarm-->
<!--            , TSG.id AS subgroup_id-->
<!--            , TSG.group_id AS subgroup_group_id-->
<!--            , TSG.name AS subgroup_name-->
<!--            , TSG.admin_id AS subgroup_admin_id-->
<!--            , TG.name AS group_name-->
<!--            , TG.id AS group_id-->
<!--            , TG.admin_id AS group_admin_id-->
<!--            , TA.assignment_status AS admin_assignment_status-->
<!--            , TA.assignment_limit AS admin_assignment_limit-->
<!--            , TSS.access_token-->
<!--        FROM TB_STORE TS-->

<!--        LEFT JOIN-->
<!--        TB_SUBGROUP_STORE_REL AS SSR-->
<!--        on TS.id = SSR.store_id-->
<!--        AND SSR.deleted is NULL-->

<!--        LEFT JOIN-->
<!--        TB_SUBGROUP AS TSG-->
<!--        on TSG.group_id=SSR.group_id-->
<!--        AND TSG.id = SSR.subgroup_id-->
<!--        AND TSG.deleted is NULL-->

<!--        LEFT JOIN-->
<!--        TB_GROUP AS TG-->
<!--        on TG.id = TSG.group_id-->
<!--        AND TG.deleted is NULL-->

<!--        LEFT JOIN-->
<!--        TB_ADMIN AS TA-->
<!--        on TS.admin_id = TA.id-->

<!--        LEFT JOIN-->
<!--        TB_STORE_SESSION AS TSS-->
<!--        on TS.id = TSS.store_id-->

<!--        WHERE 1=1-->
<!--        <choose>-->
<!--            <when test="role != null and role == 'ROLE_SYSTEM'">-->
<!--                AND TS.id = #{id}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                <choose>-->
<!--                    <when test="id != null and id != ''">-->
<!--                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">-->
<!--                            AND TS.admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))-->
<!--                        </if>-->
<!--                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">-->
<!--                            AND TS.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})-->
<!--                        </if>-->
<!--                        AND TS.id = #{id}-->
<!--                    </when>-->
<!--                    <otherwise>-->
<!--                        AND TS.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))-->
<!--                        AND TS.id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token}-->
<!--                        )-->
<!--                    </otherwise>-->
<!--                </choose>-->
<!--            </otherwise>-->
<!--        </choose>-->

        select	 A.created_datetime
                ,A.modified_datetime
                ,A.last_access
                ,A.admin_id
                ,A.chat_user_id
                ,A.id
                ,A.login_id
                ,A.login_pw
                ,A.code
                ,A.name
                ,A.phone
                ,A.store_name
                ,A.ch_store_name
                ,A.store_phone
                ,A.address
                ,A.detail_address
                ,A.latitude
                ,A.longitude
                ,A.store_status
                ,A.store_distance_sort
                ,A.radius
                ,A.assignment_status
                ,A.assignment_limit
                ,A.third_party
                ,A.deleted
                ,A.alarm
                ,B.subgroup_id				as subgroup_id
                ,B.group_id					as subgroup_group_id
                ,( select name from TB_GROUP where admin_id = B.admin_id and id = B.group_id )		as subgroup_name
                ,B.admin_id					as subgroup_admin_id
                ,( select name from TB_SUBGROUP where admin_id = B.admin_id and group_id = B.group_id and id = B.subgroup_id )	as group_name
                ,B.group_id                 as group_id
                ,B.admin_id					as group_admin_id
                ,D.assignment_status		as admin_assignment_status
                ,D.assignment_limit			as admin_assignment_limit
                ,( select access_token from TB_STORE_SESSION where store_id = A.id )		as access_token
                ,ifnull(A.brand_code, '') as brand_code
                ,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = A.brand_code )   as brand_name
                ,concat('/resources/images/common/logo', A.brand_code, '.png')		as brand_img
        from	 TB_STORE	as A
        left join TB_SUBGROUP_STORE_REL	as B
            on	 A.admin_id = B.admin_id
            and	 A.id = B.store_id
            and	 A.deleted is null
            and	 B.deleted is null
                ,TB_ADMIN	as D
        where	 A.admin_id = D.id
        <choose>
            <when test="role != null and role == 'ROLE_SYSTEM'">
                AND A.id = #{id}
            </when>
            <otherwise>
                <choose>
                    <when test="id != null and id != ''">
                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
                            AND ( A.admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                                or A.admin_id in ( select admin_id from TB_SHARED_ADMIN where allow_sort = 0 and allow_flag = 1 and allow_admin_id = ( select admin_id from TB_RIDER where id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token}) ) )
                                )
                        </if>
                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
                            AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </if>
                        AND A.id = #{id}
                    </when>
                    <otherwise>
                        AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                        AND A.id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token}
                        )
                    </otherwise>
                </choose>
            </otherwise>
        </choose>

    </select>


	<!-- store 정보 수정 -->
	<update id="updateStoreInfo" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET
			A.modified_datetime = now()
			<if test="expirationDate != null and expirationDate != ''">
				, A.expiration_date = #{expirationDate}
			</if>

			<if test="lastAccess != null and lastAccess != ''">
				, A.last_access = #{lastAccess}
			</if>

			<if test="code != null and code != ''">
				, A.code = #{code}
			</if>

			<if test="storeName != null and storeName != ''">
				, A.store_name = #{storeName}
			</if>

			<if test="chStoreName != null and chStoreName != ''">
				, A.ch_store_name = #{chStoreName}
			</if>

			<if test="storePhone != null and storePhone != ''">
				, A.store_phone = #{storePhone}
			</if>

			<if test="loginPw != null and loginPw != ''">
				, A.login_pw = #{loginPw}
			</if>

			<if test="address != null and address != ''">
				, A.address = #{address}
			</if>

			<if test="detailAddress != null and detailAddress != ''">
				, A.detail_address = #{detailAddress}
			</if>

			<if test="chAddress != null and chAddress != ''">
				, A.ch_address = #{chAddress}
			</if>

			<if test="chDetailAddress != null and chDetailAddress != ''">
				, A.ch_detail_address = #{chDetailAddress}
			</if>

			<if test="latitude != null and latitude != ''">
				, A.latitude = #{latitude}
			</if>

			<if test="longitude != null  and longitude != ''">
				, A.longitude = #{longitude}
			</if>

			<if test="storeStatus != null  and storeStatus != ''">
				, A.store_status = #{storeStatus}
			</if>

			<if test="radius != null  and radius != ''">
				, A.radius = #{radius}
			</if>

			<if test="storeDistanceSort != null  and storeDistanceSort != '' and storeDistanceSort != '-1'">
				, A.store_distance_sort = #{storeDistanceSort}
			</if>
			<if test="storeDistanceSort == '-1'">
				, A.store_distance_sort = NULL
			</if>

			<if test="assignmentStatus != null  and assignmentStatus != ''">
				, A.assignment_status = #{assignmentStatus}
			</if>

			<if test="assignmentLimit != null  and assignmentLimit != ''">
				, A.assignment_limit = #{assignmentLimit}
			</if>

            <choose>
                <when test="isAdmin == 1">
                    <if test="subGroupStoreRel.groupId =='' or subGroupStoreRel.groupId == null and subGroupStoreRel.subGroupId =='' or subGroupStoreRel.subGroupId == null" >
                        , B.deleted = now()
                    </if>

                    <if test="subGroupStoreRel != null and (subGroupStoreRel.groupId !='' and subGroupStoreRel.groupId != null and subGroupStoreRel.subGroupId =='' or subGroupStoreRel.subGroupId == null)">
                        , B.modified_datetime = now()
                        , B.store_id = #{id}
                        , B.subgroup_id = #{subGroupStoreRel.subGroupId}
                        , B.group_id = #{subGroupStoreRel.groupId}
                        , C.modified_datetime = now()
                        , C.store_id = #{id}
                        , C.subgroup_id = #{subGroupStoreRel.subGroupId}
                        , C.group_id = #{subGroupStoreRel.groupId}
                    </if>
                </when>
            </choose>

		WHERE 1=1
            AND A.deleted IS NULL
        <!--그룹이 있던 없던 설정 적용은 되야하므로 조건 주석 처리 Nick-->
        <!--AND-->
        <!--CASE WHEN-->
          <!--(SELECT * FROM-->
            <!--(SELECT deleted FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)-->
          <!--AS D) IS NULL-->
        <!--THEN B.deleted IS NULL OR B.deleted IS NOT NULL-->
        <!--ELSE B.deleted =-->
              <!--(SELECT * FROM-->
                <!--(SELECT deleted FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)-->
              <!--AS D) END-->
        <!--AND-->
        <!--CASE WHEN-->
          <!--(SELECT * FROM-->
            <!--(SELECT deleted FROM TB_SUBGROUP_RIDER_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)-->
          <!--AS E) IS NULL-->
        <!--then C.deleted is null-->
        <!--ELSE C.deleted =-->
          <!--(SELECT * FROM-->
            <!--(SELECT deleted FROM TB_SUBGROUP_RIDER_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)-->
          <!--AS E) END-->
            <choose>
                <when test="id != null and id != ''">
                    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                    AND A.id = #{id}
                </when>
                <otherwise>
                    AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                    AND A.id = (
                        SELECT store_id
                        FROM TB_STORE_SESSION
                        WHERE access_token=#{accessToken}
                    )
                </otherwise>
            </choose>
	</update>


	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	id
        	, latitude
        	, longitude
        FROM TB_STORE
        WHERE admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{accessToken}))
	</select>


	<!-- selectSubGroupStores -->
	<select id="selectSubGroupStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	A.id
        	, A.latitude
        	, A.longitude
        FROM TB_STORE AS A
        LEFT JOIN TB_SUBGROUP_STORE_REL AS B
        ON A.id = B.store_id
        WHERE B.deleted IS NULL
        <choose>
            <when test="id != null and id != ''">
                AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY created_datetime DESC LIMIT 1)
            </when>
            <otherwise>
                AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})  ORDER BY created_datetime DESC LIMIT 1)
            </otherwise>
        </choose>
	</select>

    <!-- updateStoreAssignmentStatus -->
    <update id="updateStoreAssignmentStatus" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET
          assignment_status = #{assignmentStatus}
          , modified_datetime = now()
        WHERE
        <choose>
            <when test="id != null and id != ''">
                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
                    id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                </if>

                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
                    id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
    </update>

    <!-- updateStoreThirdParty -->
    <update id="updateStoreThirdParty" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET third_party = #{thirdParty}
            , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectThirdParty -->
    <select id="selectThirdParty" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.thirdParty.ThirdParty">
        SELECT
        A.created_datetime
        , A.modified_datetime
        , A.id
        , A.name
        , A.admin_id
        FROM TB_THIRD_PARTY as A
        WHERE
        A.deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq 1">
                    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq 2">
                    AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
        </choose>
--         ORDER BY A.name asc
    </select>


    <!-- selectStoreLocation -->
    <select id="selectStoreLocation" parameterType="String" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
            id
            , latitude
            , longitude
        FROM TB_STORE
        WHERE id = #{id};
    </select>


    <!-- updateStoreAlarm -->
    <update id="updateStoreAlarm" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
          SET alarm = #{alarm}
              , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectAlarm -->
    <select id="selectAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm" resultType="kr.co.cntt.core.model.alarm.Alarm">
        SELECT
        created_datetime
        , modified_datetime
        , id
        , admin_id
        , alarm_type
        , ori_file_name
        , file_name
        , file_size
        FROM TB_ALARM
        WHERE
        deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq 1">
                    AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq 2">
                    AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY alarm_type asc
    </select>


    <!-- 통계 조회 List -->
    <select id="selectStoreStatistics" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
        TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.address
        , TBO.paid
        , TBO.menu_name
        , TBO.cooking_time
        , TBP.type
        , TBO.assigned_datetime
        , TBO.picked_up_datetime
        , TBO.reservation_datetime
        , TBO.reservation_status
        , TBO.reg_order_id
        , TBR.name AS rider_name

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.subgroup_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL

        WHERE

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
        AND TBO.created_datetime > #{currentDatetime}
    </select>

    <!-- 통계 조회 List1 -->
    <select id="selectStoreStatisticsByOrder" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
        admin_id
        , store_id
        , rider_id
        , status
        , id
        , created_datetime
        , cooking_time
        , assigned_datetime
        , picked_up_datetime
        , completed_datetime
        , return_datetime
        , reservation_datetime
        , reservation_status
        , reg_order_id
        , distance

        FROM TB_ORDER
        WHERE
        store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND status in (3)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > created_datetime
        AND created_datetime > #{currentDatetime}
        AND third_party_id IS NULL
    </select>

    <!-- 통계 30분 미만 통계에서 35분 미만통계로 계산만 변경적용 Nick -->
    <!-- 통계 조회 List2 -->
    <select id="selectStoreStatisticsByDate" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.statistic.ByDate">
        SELECT
        (SELECT store_name FROM TB_STORE WHERE id =(SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS store_name

        , DATE_FORMAT(A.created_datetime,'%Y-%m-%d') AS day_to_day

        , avg(time_to_sec(timediff(A.picked_up_datetime, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE))))) AS order_pickup

        , avg(time_to_sec(timediff(A.completed_datetime, A.picked_up_datetime))) AS pickup_complete

        , avg(time_to_sec(timediff(A.completed_datetime, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE))))) AS order_complete

        , avg(time_to_sec(timediff(A.return_datetime, A.completed_datetime))) AS complete_return

        , avg(time_to_sec(timediff(A.return_datetime, A.picked_up_datetime))) AS pickup_return

        , avg(timediff(A.return_datetime,IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)))) AS order_return
        <![CDATA[
        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) <= 35 THEN 1 END)
        / count(A.id) *100 AS min_30below

        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) <= 40
        AND timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) > 30 THEN 1 END)
        / count(A.id) *100 AS min_30to40

        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) <= 50
        AND timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) > 40 THEN 1 END)
        / count(A.id) *100 AS min_40to50

        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) <= 60
        AND timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) > 50 THEN 1 END)
        / count(A.id) *100 AS min_50to60

        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) <= 90
        AND timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) > 60 THEN 1 END)
        / count(A.id) *100 AS min_60to90

        , count(CASE WHEN timestampdiff(MINUTE, IF(A.reservation_status = 0, A.created_datetime, DATE_SUB(A.reservation_datetime, INTERVAL 30 MINUTE)), completed_datetime) < 90 THEN 1 END)
        / count(A.id) *100 AS min_90under
		]]>
        , count(A.id) AS tc
        , sum(A.total_price) AS total_sales
        , count(A.id) / (TRUNCATE((sum(timestampdiff(MINUTE,A.picked_up_datetime, A.return_datetime)) / 30 ),0) /2) AS tplh
        , sum(A.total_price) / (TRUNCATE((sum(timestampdiff(MINUTE,A.picked_up_datetime, A.return_datetime)) / 30 ),0) /2) AS spmh
        , sum(time_to_sec(timediff(A.return_datetime, A.picked_up_datetime))) AS total_pickup_return
        , avg(A.distance) AS avg_distance

        FROM
        TB_ORDER AS A

        WHERE
        A.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND A.status in (3)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > A.created_datetime
        AND A.created_datetime > #{currentDatetime}
        AND third_party_id IS NULL
        group by day_to_day;
    </select>

    <!-- 20.06.04 대만 KFC 요청으로 인하여 분리 작업 -->
    <select id="selectStoreStatisticsByDateAtTWKFC" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.statistic.ByDate">
        <![CDATA[
        SELECT	 (SELECT store_name FROM TB_STORE WHERE id = A.store_id) AS store_name
                ,DATE_FORMAT(created_datetime,'%Y-%m-%d') AS day_to_day

                ,sum( case when timestampdiff(MINUTE, assigned_datetime, picked_up_datetime) < 7 then
                        case
                            when	 assigned_datetime is not null
                                and	 picked_up_datetime is not null
                                and	 completed_datetime is not null
                                and	 return_datetime is not null
                                and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                            then 1
                        else 0
                        end
                      else 0
                      end
                )	as d7_success

                ,avg(
                        case
                            when	 assigned_datetime is not null
                                and	 picked_up_datetime is not null
                                and	 completed_datetime is not null
                                and	 return_datetime is not null
                                and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                            then time_to_sec(timediff(picked_up_datetime, assigned_datetime))
                        else NULL
                        end
                    ) AS order_pickup
                ,avg(
                        case
                            when	 assigned_datetime is not null
                                and	 picked_up_datetime is not null
                                and	 completed_datetime is not null
                                and	 return_datetime is not null
                                and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                            then time_to_sec(timediff(completed_datetime, picked_up_datetime))
                            else NULL
                        end
                    ) AS pickup_complete
                ,avg(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then time_to_sec(timediff(completed_datetime, assigned_datetime))
                        else NULL
                    end
                ) AS order_complete
                ,avg(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then time_to_sec(timediff(return_datetime, completed_datetime))
                        else NULL
                    end
                ) AS complete_return
                ,avg(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then time_to_sec(timediff(return_datetime, picked_up_datetime))
                        else NULL
                    end
                ) AS pickup_return
                ,avg(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then time_to_sec(timediff(return_datetime, assigned_datetime))
                        else NULL
                    end
                ) AS order_return

                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, picked_up_datetime) < 7 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else NULL
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_D7below
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) <= 30 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else NULL
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_30below
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) between 31 and 41 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else null
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else null
                    end
                ) * 100 AS min_30to40
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) between 41 and 51 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else null
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_40to50
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) between 51 and 61 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else null
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_50to60
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) between 61 and 91 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else null
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_60to90
                ,count(
                    CASE
                        WHEN timestampdiff(MINUTE, assigned_datetime, completed_datetime) > 90 THEN
                            case
                                when	 assigned_datetime is not null
                                    and	 picked_up_datetime is not null
                                    and	 completed_datetime is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                                    and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                                then 1
                                else NULL
                            end
                        else null
                    END
                ) /
                count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) * 100 AS min_90under

                ,count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then NULL
                        else 1
                    end
                ) AS errtc
                ,count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) AS tc
                ,sum(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then total_price
                        else 0
                    end
                ) AS total_sales
                ,count(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then 1
                        else NULL
                    end
                ) /
                (TRUNCATE((sum(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then timestampdiff(MINUTE, picked_up_datetime, return_datetime)
                        else 0
                    end) / 30 ),0) /2) AS tplh
                ,sum(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then total_price
                        else 0
                    end
                ) / (TRUNCATE((sum(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then timestampdiff(MINUTE, picked_up_datetime, return_datetime)
                        else 0
                    end) / 30 ),0) /2) AS spmh
                ,sum(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then time_to_sec(timediff(return_datetime, picked_up_datetime))
                        else 0
                    end
                ) AS total_pickup_return
                ,avg(
                    case
                        when	 assigned_datetime is not null
                            and	 picked_up_datetime is not null
                            and	 completed_datetime is not null
                            and	 return_datetime is not null
                            and	 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                            and	 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                            and	 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                        then distance
                        else NULL
                    end
                ) AS avg_distance
        FROM	 TB_ORDER AS A
        WHERE	 A.status in (3)
        AND		 A.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND		 A.created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
        AND		 third_party_id IS NULL
        group by day_to_day, A.store_id
        ]]>
    </select>


    <!-- 통계 조회 List3 -->
    <select id="selectStoreStatisticsByInterval" parameterType="kr.co.cntt.core.model.order.Order" resultType="Integer">
        SELECT TIMESTAMPDIFF(MINUTE, (CASE WHEN reservation_status THEN DATE_ADD(reservation_datetime, INTERVAL -30 MINUTE) ELSE created_datetime END), completed_datetime) AS interval_minute
        FROM TB_ORDER
        WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND status in (3)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > created_datetime
        AND created_datetime > #{currentDatetime}
        AND third_party_id IS NULL
    </select>

    <!-- 20.06.04 대만 요청 KFC용 -->
    <!-- 통계 조회 List3 -->
    <select id="selectStoreStatisticsByIntervalAtTWKFC" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
        SELECT   TIMESTAMPDIFF(MINUTE, assigned_datetime, completed_datetime) AS interval_minute
                ,TIMESTAMPDIFF(MINUTE, assigned_datetime, picked_up_datetime) AS d7_minute
        FROM     TB_ORDER
        WHERE    store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND      status in (3)
        AND      created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
        -- 시간대별 통계에 대한 조건 추가
        AND		 assigned_datetime is not null
        AND		 picked_up_datetime is not null
        AND		 completed_datetime is not null
        AND		 return_datetime is not null
        AND		 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
        AND		 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
        AND		 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
        AND		 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
        AND      third_party_id IS NULL
    </select>

    <!-- 통계 조회 List3 - 배달완료율 30분 미만 목록-->
    <select id="selectStoreStatisticsMin30BelowByDate" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
        SELECT
            A.DATE as day_to_day,
            B.min_30below
        FROM (
            SELECT CURDATE() - INTERVAL (a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) ) DAY AS DATE
            FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS c
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS d
        ) A LEFT JOIN (
            SELECT
                DATE_FORMAT(O.CREATED_DATETIME,'%y-%m-%d') AS day_to_day,
            <![CDATA[
                COUNT(
                    CASE WHEN TIMESTAMPDIFF(MINUTE, IF(O.RESERVATION_STATUS = 0, O.CREATED_DATETIME, DATE_SUB(O.RESERVATION_DATETIME, INTERVAL 30 MINUTE)), COMPLETED_DATETIME) <= 35 THEN 1 END
                ) / COUNT(O.ID) *100 AS min_30below
            ]]>
            FROM
                TB_ORDER AS O
            WHERE
                O.STORE_ID = (SELECT STORE_ID FROM TB_STORE_SESSION WHERE ACCESS_TOKEN = #{token}) AND
                O.STATUS IN (3) AND
                DATE_ADD(#{currentDatetime}, INTERVAL (#{days} + 1) - 1 DAY)  > O.CREATED_DATETIME AND
                O.CREATED_DATETIME > #{currentDatetime} AND
                THIRD_PARTY_ID IS NULL
            GROUP BY
                day_to_day
        ) B
        ON A.DATE = B.day_to_day
        WHERE A.DATE BETWEEN #{currentDatetime} AND #{endDate} ORDER BY A.DATE
    </select>

    <!-- 20.06.04 대만 요청-->
    <select id="selectStoreStatisticsMin30BelowByDateAtTWKFC" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
        SELECT	 A.DATE as day_to_day
                ,B.min_30below
                ,B.min_07below
        FROM(	 SELECT	 CURDATE() - INTERVAL (a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) ) DAY AS DATE
            FROM(	SELECT	 0 AS a
                    UNION ALL
                    SELECT	 1
                    UNION ALL
                    SELECT	 2
                    UNION ALL
                    SELECT	 3
                    UNION ALL
                    SELECT	 4
                    UNION ALL
                    SELECT	 5
                    UNION ALL
                    SELECT	 6
                    UNION ALL
                    SELECT	 7
                    UNION ALL
                    SELECT	 8
                    UNION ALL
                    SELECT	 9
                )	 AS a
            CROSS JOIN
                (	SELECT	 0 AS a
                    UNION ALL
                    SELECT	 1
                    UNION ALL
                    SELECT	 2
                    UNION ALL
                    SELECT	 3
                    UNION ALL
                    SELECT	 4
                    UNION ALL
                    SELECT	 5
                    UNION ALL
                    SELECT	 6
                    UNION ALL
                    SELECT	 7
                    UNION ALL
                    SELECT	 8
                    UNION ALL
                    SELECT	 9
                )	 AS b
            CROSS JOIN
                (	SELECT	 0 AS a
                    UNION ALL
                    SELECT	 1
                    UNION ALL
                    SELECT	 2
                    UNION ALL
                    SELECT	 3
                    UNION ALL
                    SELECT	 4
                    UNION ALL
                    SELECT	 5
                    UNION ALL
                    SELECT	 6
                    UNION ALL
                    SELECT	 7
                    UNION ALL
                    SELECT	 8
                    UNION ALL
                    SELECT	 9
                )	AS c
            CROSS JOIN
                (	SELECT	 0 AS a
                    UNION ALL
                    SELECT	 1
                    UNION ALL
                    SELECT	 2
                    UNION ALL
                    SELECT	 3
                    UNION ALL
                    SELECT	 4
                    UNION ALL
                    SELECT	 5
                    UNION ALL
                    SELECT	 6
                    UNION ALL
                    SELECT	 7
                    UNION ALL
                    SELECT	 8
                    UNION ALL
                    SELECT	 9
                )	AS d
            )	 A
        LEFT JOIN
            (	SELECT	 DATE_FORMAT(O.CREATED_DATETIME,'%y-%m-%d') AS day_to_day
                <![CDATA[
                        ,COUNT(CASE WHEN TIMESTAMPDIFF(MINUTE, assigned_datetime, COMPLETED_DATETIME) <= 30 THEN 1 END) / COUNT(O.ID) * 100 AS min_30below
                        ,SUM(CASE WHEN TIMESTAMPDIFF(MINUTE, assigned_datetime, picked_up_datetime) < 7 THEN 1 ELSE 0 END) / COUNT(O.ID) * 100 as min_07below
                ]]>
                FROM	 TB_ORDER AS O
                WHERE	 O.STORE_ID = (SELECT STORE_ID FROM TB_STORE_SESSION WHERE ACCESS_TOKEN = #{token})
                AND		 O.STATUS IN (3)
                AND		 O.CREATED_DATETIME between #{currentDatetime} and DATE_ADD(#{currentDatetime}, INTERVAL (#{days} + 1) - 1 DAY)
                AND		 THIRD_PARTY_ID IS NULL
                -- 시간대별 통계에 대한 조건 추가
                AND		 assigned_datetime is not null
                AND		 picked_up_datetime is not null
                AND		 completed_datetime is not null
                AND		 return_datetime is not null
                AND		 timestampdiff(SECOND, completed_datetime, return_datetime) >= 60
                AND		 timestampdiff(SECOND, assigned_datetime, completed_datetime) >= 0
                AND		 timestampdiff(SECOND, assigned_datetime, picked_up_datetime) >= 0
                AND		 timestampdiff(SECOND, assigned_datetime, return_datetime) >= 0
                GROUP BY day_to_day
            )	B
            ON	 A.DATE = B.day_to_day
        WHERE	 A.DATE BETWEEN #{currentDatetime} AND #{endDate}
        ORDER BY A.DATE
    </select>

    <!-- 통계 조회 info -->
    <select id="selectStoreStatisticsInfo" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
         TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.assigned_datetime
        , TBO.picked_up_datetime
        , TBO.reservation_datetime
        , TBO.reservation_status
        , TBO.completed_datetime
        , TBO.menu_name
        , TBO.cooking_time
        , TBO.menu_price
        , TBO.delivery_price
        , TBO.total_price
        , TBP.type
        , TBO.combined_order_id
        , TBR.name AS rider_name
        , TBR.phone AS rider_phone
        , TBO.message
        , TBO.phone
        , TBO.address
        , TBO.area_address
        , TBO.district_address
        , TBO.street_address
        , TBO.estate_address
        , TBO.building_address
        , TBO.detail_address
        , TBO.latitude
        , TBO.longitude
        , TBO.reg_order_id
        , TBO.paid
        , TBO.distance

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.subgroup_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL
        where

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
       <!-- <if test="startDate != null and startDate != ''">
            AND start_date = #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date = #{endDate}
        </if>-->
        AND TBO.reg_order_id = #{id}
    </select>

    <!-- 옛날 통계 조회 List Excel -->
    <select id="selectStoreStatisticsExcel" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
        TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.reservation_datetime
        , TBO.reservation_status
        , TBO.assigned_datetime
		, TBO.picked_up_datetime
        , TBO.completed_datetime
        , TBO.return_datetime
        , TBO.menu_name
        , TBO.cooking_time
        , TBO.paid
        , TBO.menu_price
        , TBO.delivery_price
        , TBO.total_price
		, TBP.type
		, TBO.combined_order_id
        , TBR.name AS rider_name
        , TBR.phone AS rider_phone
        , TBO.reg_order_id
        , TBO.message
        , TBO.phone
		, TBO.address
        , TBO.detail_address
        , TBO.latitude
		, TBO.longitude
		, TBO.distance

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.group_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL

        WHERE

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
        AND TBO.created_datetime > #{currentDatetime}
    </select>

    <!-- updateStoreSession -->
    <update id="updateStoreSession" parameterType="String">
        UPDATE TB_STORE AS A
        LEFT JOIN TB_STORE_SESSION AS B
        ON A.id = B.store_id
        SET A.last_access = now()
        --			, B.expiry_datetime = now()
        WHERE B.access_token = #{token}
    </update>

    <!-- resetStorePassword -->
    <update id="resetStorePassword" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
          SET login_pw = #{loginPw}
              , modified_datetime = now()
        WHERE id = #{id} AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
    </update>

    <!-- selectAdminInfo -->
    <select id="selectAdminInfo" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.admin.Admin">
        SELECT
        created_datetime
        , modified_datetime
        , chat_user_id
        , id
        , name
        , login_id
        , state
        , assignment_status
        , assignment_limit
        , default_sound_status
        FROM TB_ADMIN
        WHERE id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
    </select>

    <!-- selectOrderListForStore -->
    <select id="selectOrderListForStore" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        select	 A.id
                ,A.reg_order_id
                ,A.created_datetime
                ,ifnull(A.modified_datetime, A.created_datetime)	as modified_datetime
                ,A.store_id
                ,A.address
                ,A.detail_address
                ,A.status
                ,A.reservation_datetime
                ,A.reservation_status
                ,A.assigned_datetime
                ,A.arrived_datetime
                ,A.picked_up_datetime
                ,A.arrived_datetime
                ,A.completed_datetime
                ,A.return_datetime
                ,A.combined_order_id
                ,A.phone
                ,A.message
        from	 TB_ORDER	A
        where	 date_format(date_add(now(), interval 2 hour), '%Y-%m-%d %H:%i') > date_format(ifnull(reservation_datetime, now()), '%Y-%m-%d %H:%i')
        and		 A.status in (3, 4)
        and		 A.created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
        and		 A.store_id = ( select store_id from TB_STORE_SESSION where access_token = #{token} )
        ORDER BY A.id
    </select>

</mapper>
 