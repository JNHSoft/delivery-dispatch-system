<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.StoreMapper">



    <!-- selectStoresResult -->
    <resultMap id="selectStoreResult" type="kr.co.cntt.core.model.store.Store">
        <result property="id" column="id" />
        <result property="adminId" column="admin_id" />
        <result property="loginId" column="login_id" />
        <result property="loginPw" column="login_pw" />
        <result property="chatUserId" column="chat_user_id" />
        <result property="code" column="code" />
        <result property="phone" column="phone" />
        <result property="storeName" column="store_name" />
        <result property="assignmentStatus" column="assignment_status" />
        <result property="assignmentLimit" column="assignment_limit" />
        <result property="name" column="name" />
        <result property="adminAssignmentStatus" column="admin_assignment_status" />
        <result property="adminAssignmentLimit" column="admin_assignment_limit" />
        <result property="chStoreName" column="ch_store_name" />
        <result property="storePhone" column="store_phone" />

        <result property="address" column="address" />
        <result property="detailAddress" column="detail_address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />

        <result property="chAddress" column="ch_address" />
        <result property="chDetailAddress" column="ch_detail_address" />
        <result property="thirdParty" column="third_party"/>
        <result property="alarm" column="alarm"/>
        <result property="accessToken" column="access_token"/>

        <association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
            <result property="id" column="group_id" />
            <result property="name" column="group_name" />
            <result property="adminId" column="group_admin_id" />
        </association>

        <association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
            <result property="id" column="subgroup_id" />
            <result property="groupId" column="subgroup_group_id" />
            <result property="name" column="subgroup_name" />
            <result property="adminId" column="subgroup_admin_id" />
        </association>
    </resultMap>

    <!-- selectOrderResult -->
    <resultMap id="selectOrderResult" type="kr.co.cntt.core.model.order.Order">
        <result property="id" column="id" />
        <result property="adminId" column="admin_id" />
        <result property="storeId" column="store_id" />
        <result property="riderId" column="rider_id" />
        <result property="status" column="status" />
        <result property="createdDatetime" column="created_datetime" />
        <result property="menuName" column="menu_name" />
        <result property="assignedDatetime" column="assigned_datetime" />
        <result property="pickedUpDatetime" column="picked_up_datetime" />
        <result property="reservationDatetime" column="reservation_datetime" />
        <result property="completedDatetime" column="completed_datetime" />
        <result property="paid" column="paid" />

        <result property="cookingTime" column="cooking_time" />
        <result property="menuPrice" column="menu_price" />
        <result property="deliveryPrice" column="delivery_price" />
        <result property="totalPrice" column="total_price" />
        <result property="combinedOrderId" column="combined_order_id" />
        <result property="message" column="message" />
        <result property="phone" column="phone" />
        <result property="address" column="address" />
        <result property="areaAddress" column="area_address" />
        <result property="districtAddress" column="district_address" />
        <result property="streetAddress" column="street_address" />
        <result property="estateAddress" column="estate_address" />
        <result property="buildingAddress" column="building_address" />
        <result property="detailAddress" column="detail_address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="regOrderId" column="reg_order_id" />
        <result property="distance" column="distance" />

        <association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
            <result property="storeName" column="store_name" />
        </association>

        <association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
            <result property="id" column="id" />
            <result property="name" column="rider_name" />
            <result property="phone" column="rider_phone" />
        </association>

        <association property="payment" column="payment" javaType="kr.co.cntt.core.model.payment.Payment">
            <result property="type" column="type" />
            <result property="orderId" column="order_id" />
        </association>


        <association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
            <result property="id" column="group_id" />
            <result property="name" column="group_name" />
            <result property="adminId" column="group_admin_id" />
        </association>

        <association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
            <result property="id" column="subgroup_id" />
            <result property="groupId" column="subgroup_group_id" />
            <result property="name" column="subgroup_name" />
            <result property="adminId" column="subgroup_admin_id" />
        </association>
    </resultMap>

    <!-- loginStoreInfo -->
    <select id="loginStoreInfo" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        A.id, A.chat_user_id, A.login_id, A.login_pw,
        A.store_status, A.assignment_status, A.assignment_limit,
        B.access_token
        FROM TB_STORE A JOIN TB_STORE_SESSION B
        ON A.id = B.store_id
        WHERE A.login_id = #{loginId}
        AND login_pw = #{loginPw}
        AND deleted IS NULL
        ORDER BY B.Created_datetime DESC
        limit 1
    </select>

    <!--로그인 ID 확인 -->
	<select id="selectLoginStore" parameterType="kr.co.cntt.core.model.store.Store" resultType="Map">
		SELECT A.login_id AS loginId
		    , B.access_token AS accessToken
		FROM TB_STORE AS A
		LEFT JOIN TB_STORE_SESSION AS B
		ON A.id = B.store_id
		WHERE 1=1
		AND login_id = #{loginId}
			AND login_pw = #{loginPw}
		limit 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectStoreTokenCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_STORE A JOIN TB_STORE_SESSION B
		ON A.id = B.store_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>

    <!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
    <select id="selectStoreTokenLoginCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.login.User">
        <![CDATA[
		SELECT
			A.login_id, A.login_pw
		FROM TB_STORE A JOIN TB_STORE_SESSION B
		ON A.id = B.store_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		LIMIT 1
		]]>
    </select>


	<!-- insertStoreSession 토큰값을 넣어준다.-->
	<insert id="insertStoreSession" parameterType="kr.co.cntt.core.model.store.Store">
		<![CDATA[
		INSERT INTO TB_STORE_SESSION(store_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_STORE
		WHERE login_id = #{loginId} AND deleted IS NULL
		]]>
	</insert>

	<!-- insertAdminStoreSession 토큰값을 넣어준다.-->
	<insert id="insertAdminStoreSession" parameterType="kr.co.cntt.core.model.store.Store">
		<![CDATA[
		INSERT INTO TB_STORE_SESSION(store_id, access_token, created_datetime)
		SELECT
			#{id}
			, #{accessToken}
			, now()
		FROM TB_STORE
		WHERE login_id = #{loginId}
		]]>
	</insert>


	<!--store 정보 조회-->
    <select id="selectStoreInfo" parameterType="kr.co.cntt.core.model.store.Store" resultMap="selectStoreResult">
        SELECT
            TS.created_datetime
            , TS.modified_datetime
            , TS.last_access
            , TS.admin_id
            , TS.chat_user_id
            , TS.id
            , TS.login_id
            , TS.login_pw
            , TS.code
            , TS.name
            , TS.phone
            , TS.store_name
            , TS.ch_store_name
            , TS.store_phone
            , TS.address
            , TS.detail_address
            , TS.latitude
            , TS.longitude
            , TS.store_status
            , TS.store_distance_sort
            , TS.radius
            , TS.assignment_status
            , TS.assignment_limit
            , TS.third_party
            , TS.deleted
            , TS.alarm
            , TSG.id AS subgroup_id
            , TSG.group_id AS subgroup_group_id
            , TSG.name AS subgroup_name
            , TSG.admin_id AS subgroup_admin_id
            , TG.name AS group_name
            , TG.id AS group_id
            , TG.admin_id AS group_admin_id
            , TA.assignment_status AS admin_assignment_status
            , TA.assignment_limit AS admin_assignment_limit
            , TSS.access_token
        FROM TB_STORE TS

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TS.id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on TSG.group_id=SSR.group_id
        AND TSG.id = SSR.subgroup_id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on TG.id = TSG.group_id
        AND TG.deleted is NULL

        LEFT JOIN
        TB_ADMIN AS TA
        on TS.admin_id = TA.id

        LEFT JOIN
        TB_STORE_SESSION AS TSS
        on TS.id = TSS.store_id

        WHERE 1=1
        <choose>
            <when test="role != null and role == 'ROLE_SYSTEM'">
                AND TS.id = #{id}
            </when>
            <otherwise>
                <choose>
                    <when test="id != null and id != ''">
                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
                            AND TS.admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                        </if>
                        <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
                            AND TS.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </if>
                        AND TS.id = #{id}
                    </when>
                    <otherwise>
                        AND TS.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                        AND TS.id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{accessToken}
                        )
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </select>


	<!-- store 정보 수정 -->
	<update id="updateStoreInfo" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET
			A.modified_datetime = now()
			<if test="expirationDate != null and expirationDate != ''">
				, A.expiration_date = #{expirationDate}
			</if>

			<if test="lastAccess != null and lastAccess != ''">
				, A.last_access = #{lastAccess}
			</if>

			<if test="code != null and code != ''">
				, A.code = #{code}
			</if>

			<if test="storeName != null and storeName != ''">
				, A.store_name = #{storeName}
			</if>

			<if test="chStoreName != null and chStoreName != ''">
				, A.ch_store_name = #{chStoreName}
			</if>

			<if test="storePhone != null and storePhone != ''">
				, A.store_phone = #{storePhone}
			</if>

			<if test="loginPw != null and loginPw != ''">
				, A.login_pw = #{loginPw}
			</if>

			<if test="address != null and address != ''">
				, A.address = #{address}
			</if>

			<if test="detailAddress != null and detailAddress != ''">
				, A.detail_address = #{detailAddress}
			</if>

			<if test="chAddress != null and chAddress != ''">
				, A.ch_address = #{chAddress}
			</if>

			<if test="chDetailAddress != null and chDetailAddress != ''">
				, A.ch_detail_address = #{chDetailAddress}
			</if>

			<if test="latitude != null and latitude != ''">
				, A.latitude = #{latitude}
			</if>

			<if test="longitude != null  and longitude != ''">
				, A.longitude = #{longitude}
			</if>

			<if test="storeStatus != null  and storeStatus != ''">
				, A.store_status = #{storeStatus}
			</if>

			<if test="radius != null  and radius != ''">
				, A.radius = #{radius}
			</if>

			<if test="storeDistanceSort != null  and storeDistanceSort != '' and storeDistanceSort != '-1'">
				, A.store_distance_sort = #{storeDistanceSort}
			</if>
			<if test="storeDistanceSort == '-1'">
				, A.store_distance_sort = NULL
			</if>

			<if test="assignmentStatus != null  and assignmentStatus != ''">
				, A.assignment_status = #{assignmentStatus}
			</if>

			<if test="assignmentLimit != null  and assignmentLimit != ''">
				, A.assignment_limit = #{assignmentLimit}
			</if>

            <choose>
                <when test="isAdmin == 1">
                    <if test="subGroupStoreRel.groupId =='' or subGroupStoreRel.groupId == null and subGroupStoreRel.subGroupId =='' or subGroupStoreRel.subGroupId == null" >
                        , B.deleted = now()
                    </if>

                    <if test="subGroupStoreRel != null and (subGroupStoreRel.groupId !='' and subGroupStoreRel.groupId != null and subGroupStoreRel.subGroupId =='' or subGroupStoreRel.subGroupId == null)">
                        , B.modified_datetime = now()
                        , B.store_id = #{id}
                        , B.subgroup_id = #{subGroupStoreRel.subGroupId}
                        , B.group_id = #{subGroupStoreRel.groupId}
                        , C.modified_datetime = now()
                        , C.store_id = #{id}
                        , C.subgroup_id = #{subGroupStoreRel.subGroupId}
                        , C.group_id = #{subGroupStoreRel.groupId}
                    </if>
                </when>
            </choose>

		WHERE 1=1
            AND A.deleted IS NULL
        AND
        CASE WHEN
          (SELECT * FROM
            (SELECT deleted FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)
          AS D) IS NULL
        THEN B.deleted IS NULL
        ELSE B.deleted =
              (SELECT * FROM
                (SELECT deleted FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)
              AS D) END
        AND
        CASE WHEN
          (SELECT * FROM
            (SELECT deleted FROM TB_SUBGROUP_RIDER_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)
          AS E) IS NULL
        then C.deleted is null
        ELSE C.deleted =
          (SELECT * FROM
            (SELECT deleted FROM TB_SUBGROUP_RIDER_REL WHERE store_id = #{id} ORDER BY deleted IS NOT NULL, deleted LIMIT 1)
          AS E) END
            <choose>
                <when test="id != null and id != ''">
                    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                    AND A.id = #{id}
                </when>
                <otherwise>
                    AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                    AND A.id = (
                        SELECT store_id
                        FROM TB_STORE_SESSION
                        WHERE access_token=#{accessToken}
                    )
                </otherwise>
            </choose>
	</update>


	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	id
        	, latitude
        	, longitude
        FROM TB_STORE
        WHERE admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{accessToken}))
	</select>


	<!-- selectSubGroupStores -->
	<select id="selectSubGroupStores" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
        	A.id
        	, A.latitude
        	, A.longitude
        FROM TB_STORE AS A
        LEFT JOIN TB_SUBGROUP_STORE_REL AS B
        ON A.id = B.store_id
        WHERE B.deleted IS NULL
        <choose>
            <when test="id != null and id != ''">
                AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = #{id} ORDER BY created_datetime DESC LIMIT 1)
            </when>
            <otherwise>
                AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})) AS D)
                AND B.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})  ORDER BY created_datetime DESC LIMIT 1)
            </otherwise>
        </choose>
	</select>

    <!-- updateStoreAssignmentStatus -->
    <update id="updateStoreAssignmentStatus" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET
          assignment_status = #{assignmentStatus}
          , modified_datetime = now()
        WHERE
        <choose>
            <when test="id != null and id != ''">
                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
                    id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                </if>

                <if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
                    id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
    </update>

    <!-- updateStoreThirdParty -->
    <update id="updateStoreThirdParty" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
        SET third_party = #{thirdParty}
            , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectThirdParty -->
    <select id="selectThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty" resultType="kr.co.cntt.core.model.thirdParty.ThirdParty">
        SELECT
        A.created_datetime
        , A.modified_datetime
        , A.id
        , A.name
        , A.admin_id
        FROM TB_THIRD_PARTY as A
        WHERE
        A.deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq '1'.toString()">
                  AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq '2'.toString()">
                    AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
        </choose>
--         ORDER BY A.name asc
    </select>


    <!-- selectStoreLocation -->
    <select id="selectStoreLocation" parameterType="String" resultType="kr.co.cntt.core.model.store.Store">
        SELECT
            id
            , latitude
            , longitude
        FROM TB_STORE
        WHERE id = #{id};
    </select>


    <!-- updateStoreAlarm -->
    <update id="updateStoreAlarm" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
          SET alarm = #{alarm}
              , modified_datetime = now()
        WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
    </update>


    <!-- selectAlarm -->
    <select id="selectAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm" resultType="kr.co.cntt.core.model.alarm.Alarm">
        SELECT
        created_datetime
        , modified_datetime
        , id
        , admin_id
        , alarm_type
        , ori_file_name
        , file_name
        , file_size
        FROM TB_ALARM
        WHERE
        deleted IS NULL
        <choose>
            <when test="level != null and level != ''">
                <if test="level eq '1'.toString()">
                    AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </if>
                <if test="level eq '2'.toString()">
                    AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY alarm_type asc
    </select>


    <!-- 통계 조회 List -->
    <select id="selectStoreStatistics" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
        TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.address
        , TBO.paid
        , TBO.menu_name
        , TBO.cooking_time
        , TBP.type
        , TBO.assigned_datetime
        , TBO.picked_up_datetime
        , TBO.reservation_datetime
        , TBO.reg_order_id
        , TBR.name AS rider_name

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.group_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL

        WHERE

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
        AND TBO.created_datetime > #{currentDatetime}
    </select>


    <!-- 통계 조회 info -->
    <select id="selectStoreStatisticsInfo" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
         TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.assigned_datetime
        , TBO.picked_up_datetime
        , TBO.reservation_datetime
        , TBO.completed_datetime
        , TBO.menu_name
        , TBO.cooking_time
        , TBO.menu_price
        , TBO.delivery_price
        , TBO.total_price
        , TBP.type
        , TBO.combined_order_id
        , TBR.name AS rider_name
        , TBR.phone AS rider_phone
        , TBO.message
        , TBO.phone
        , TBO.address
        , TBO.area_address
        , TBO.district_address
        , TBO.street_address
        , TBO.estate_address
        , TBO.building_address
        , TBO.detail_address
        , TBO.latitude
        , TBO.longitude
        , TBO.reg_order_id
        , TBO.paid
        , TBO.distance

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.group_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL
        where

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
       <!-- <if test="startDate != null and startDate != ''">
            AND start_date = #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date = #{endDate}
        </if>-->
        AND TBO.reg_order_id = #{id}
    </select>

    <!-- 통계 조회 List Excel -->
    <select id="selectStoreStatisticsExcel" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
        SELECT
        TBO.admin_id
        , TBO.store_id
        , TBO.rider_id
        , TBO.status
        , TBO.id
        , TBO.created_datetime
        , TBO.reservation_datetime
        , TBO.assigned_datetime
		, TBO.picked_up_datetime
        , TBO.completed_datetime
        , TBO.menu_name
        , TBO.cooking_time
        , TBO.paid
        , TBO.menu_price
        , TBO.delivery_price
        , TBO.total_price
		, TBP.type
		, TBO.combined_order_id
        , TBR.name AS rider_name
        , TBR.phone AS rider_phone
        , TBO.reg_order_id
        , TBO.message
        , TBO.phone
		, TBO.address
        , TBO.detail_address
        , TBO.latitude
		, TBO.longitude
		, TBO.distance

        FROM TB_ORDER AS TBO

        LEFT JOIN
        TB_RIDER AS TBR
        on TBR.id = TBO.rider_id
        AND TBR.deleted is NULL

        LEFT JOIN
        TB_STORE AS TBS
        on TBS.id = TBO.store_id
        AND TBS.deleted is NULL

        LEFT JOIN
        TB_PAYMENT AS TBP
        on TBP.order_id = TBO.id
        AND TBP.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP_STORE_REL AS SSR
        on TBO.store_id = SSR.store_id
        AND SSR.deleted is NULL

        LEFT JOIN
        TB_SUBGROUP AS TSG
        on SSR.group_id = TSG.id
        AND TSG.deleted is NULL

        LEFT JOIN
        TB_GROUP AS TG
        on SSR.group_id = TG.id
        AND TG.deleted is NULL

        WHERE

        TBO.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
        AND TBO.status in (3, 4)
        AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
        AND TBO.created_datetime > #{currentDatetime}
    </select>

    <!-- updateStoreSession -->
    <update id="updateStoreSession" parameterType="String">
        UPDATE TB_STORE AS A
        LEFT JOIN TB_STORE_SESSION AS B
        ON A.id = B.store_id
        SET A.last_access = now()
        --			, B.expiry_datetime = now()
        WHERE B.access_token = #{token}
    </update>

    <!-- resetStorePassword -->
    <update id="resetStorePassword" parameterType="kr.co.cntt.core.model.store.Store">
        UPDATE TB_STORE
          SET login_pw = #{loginPw}
              , modified_datetime = now()
        WHERE id = #{id} AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
    </update>
</mapper>
 