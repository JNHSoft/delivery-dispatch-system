<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.RiderMapper">

	<!-- selectRidersResult -->
	<resultMap id="selectSubgroupRiderRelsResult" type="kr.co.cntt.core.model.rider.Rider">

		<result property="id" column="id" />
		<result property="adminId" column="admin_id" />

		<result property="loginId" column="login_id" />
		<result property="loginPw" column="login_pw" />
		<result property="name" column="name" />
		<result property="code" column="code" />
		<result property="phone" column="phone" />
		<result property="gender" column="gender" />
		<result property="emergencyPhone" column="emergency_phone" />
		<result property="address" column="address" />
		<result property="workingHours" column="working_hours" />
		<result property="restHours" column="rest_hours" />
		<result property="teenager" column="teenager" />
		<result property="vehicleNumber" column="vehicle_number" />
		<result property="employmentType" column="employment_type" />
		<result property="status" column="status" />
		<result property="working" column="working" />
		<result property="chatUserId" column="chat_user_id" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="locationUpdated" column="location_updated" />
		<result property="returnTime" column="return_time" />
		<result property="assignCount" column="assign_count" />
		<result property="minAssignedDatetime" column="min_assigned_datetime" />
		<result property="minPickedUpDatetime" column="min_picked_up_datetime" />
		<result property="minOrderStatus" column="min_order_status" />
		<result property="orderStandbyDatetime" column="order_standby_datetime" />
		<result property="orderStandbyStatus" column="order_standby_status" />

		<result property="brandCode" column="brandCode" />
		<result property="brandName" column="brandName" />

		<!-- 20.11.11 라이더 OS 구분 추가 -->
		<result property="platform" column="os" />
		<result property="sharedStatus" column="rider_shared_status" />

		<!-- 타매장에 라이더를 빌려주는 기능 추가 -->
		<result property="sharedStore" column="shared_store" />
		<result property="sharedStoreId" column="shared_store_id" />
		<result property="sharedStoreCode" column="shared_store_code" />
		<result property="sharedStoreName" column="shared_store_name" />

		<!-- 2022-01.17 라이더 PUSH 관련 기능 추가 -->
		<result property="pushToken" column="push_token" />
		<result property="pushRadius" column="push_radius" />
		<result property="locationRefreshTime" column="location_refresh_time" />

		<!-- 2022-01-25 비콘 관련 변수 추가 -->
		<result property="rssi" column="rssi" />
		<result property="beaconCycle" column="beacon_cycle" />
		<result property="uuid" column="beaconId" />

		<association property="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_Id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

		<association property="subGroupRiderRel" javaType="kr.co.cntt.core.model.group.SubGroupRiderRel">
			<result property="id" column="subGroupRiderRel_id" />
			<result property="adminId" column="subGroupRiderRel_admin_id" />
			<result property="groupId" column="subGroupRiderRel_group_id" />
			<result property="subGroupId" column="subGroupRiderRel_subgroup_id" />
			<result property="storeId" column="subGroupRiderRel_store_id" />
			<result property="riderId" column="subGroupRiderRel_rider_id" />
		</association>

		<association property="orderCheckAssignment" javaType="kr.co.cntt.core.model.order.OrderCheckAssignment">
			<result property="orderId" column="deny_order_id" />
			<result property="deniedDatetime" column="denied_datetime" />
		</association>

		<association property="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="store_id" />
		</association>
	</resultMap>

	<!-- selectRiderNowResult -->
	<resultMap id="selectRiderNowResult" type="kr.co.cntt.core.model.rider.Rider">
		<result property="id" column="id" />
		<result property="adminId" column="admin_id" />
		<result property="loginId" column="login_id" />
		<result property="name" column="name" />
		<result property="code" column="code" />
		<result property="phone" column="phone" />
		<result property="gender" column="gender" />
		<result property="emergencyPhone" column="emergency_phone" />
		<result property="address" column="address" />
		<result property="workingHours" column="working_hours" />
		<result property="restHours" column="rest_hours" />
		<result property="teenager" column="teenager" />
		<result property="vehicleNumber" column="vehicle_number" />
		<result property="employmentType" column="employment_type" />
		<result property="status" column="status" />
		<result property="working" column="working" />
		<result property="chatUserId" column="chat_user_id" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="locationUpdated" column="location_updated" />
		<result property="returnTime" column="return_time" />
		<result property="assignCount" column="assign_count" />
		<result property="minAssignedDatetime" column="min_assigned_datetime" />
		<result property="workCount" column="work_count" />
		<result property="orderCount" column="order_count" />
		<result property="myWorkCount" column="my_work_count" />

		<!-- 타매장에 라이더를 빌려주는 기능 추가 -->
		<result property="sharedStore" column="shared_store" />
		<result property="sharedStoreId" column="shared_store_id" />
		<result property="sharedStoreCode" column="shared_store_code" />
		<result property="sharedStoreName" column="shared_store_name" />

		<association property="subGroupRiderRel" javaType="kr.co.cntt.core.model.group.SubGroupRiderRel">
			<result property="id" column="subGroupRiderRel_id" />
			<result property="adminId" column="subGroupRiderRel_admin_id" />
			<result property="groupId" column="subGroupRiderRel_group_id" />
			<result property="subGroupId" column="subGroupRiderRel_subgroup_id" />
			<result property="name" column="subgroup_name" />
			<result property="storeId" column="subGroupRiderRel_store_id" />
			<result property="riderId" column="subGroupRiderRel_rider_id" />
		</association>

		<association property="riderStore" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="rider_store_id" />
			<result property="storeName" column="rider_store_name" />
			<result property="latitude" column="rider_store_latitude" />
			<result property="longitude" column="rider_store_longitude" />
			<result property="address" column="rider_store_address" />
			<result property="detailAddress" column="rider_store_detail_address" />
			<result property="storeDistanceSort" column="rider_store_distance_sort" />
		</association>

		<association property="orderStore" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="order_store_id" />
			<result property="storeName" column="order_store_name" />
			<result property="latitude" column="order_store_latitude" />
			<result property="longitude" column="order_store_longitude" />
			<result property="address" column="order_store_address" />
			<result property="detailAddress" column="order_store_detail_address" />
			<result property="storeDistanceSort" column="order_store_distance_sort" />
		</association>

		<association property="order" javaType="kr.co.cntt.core.model.order.Order">
			<result property="id" column="order_id" />
			<result property="name" column="order_name" />
			<result property="status" column="order_status" />
		</association>
	</resultMap>

	<!-- Approval Result -->
	<resultMap id="selectRiderApprovalResult" type="kr.co.cntt.core.model.rider.RiderApprovalInfo">
		<result property="createdDatetime" column="created_datetime" />
		<result property="id" column="approval_id" />
		<result property="adminId" column="admin_id" />
		<result property="loginId" column="login_id" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="gender" column="gender" />
		<result property="vehicleNumber" column="vehicle_number" />
		<result property="approvalStatus" column="req_status" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="riderId" column="rider_id" />
		<result property="acceptDatetime" column="accept_datetime" />
		<result property="rejectDatetime" column="reject_datetime" />
		<result property="sharedStatus" column="shared_flag" />

		<association property="riderDetail" resultMap="selectRiderNowResult"/>

		<association property="session" javaType="kr.co.cntt.core.model.rider.RiderSession">
			<result property="expiryDatetime" column="expiry_datetime" />
			<result property="rider_id" column="rider_id" />
		</association>

	</resultMap>

	<!-- SMS Request Map -->
	<resultMap id="smsApplyResult" type="kr.co.cntt.core.model.sms.SmsApplyInfo">
		<result property="createdDatetime" column="login_id" />
		<result property="brandCode" column="brand_code" />
		<result property="loginId" column="login_id" />
		<result property="phone" column="phone" />
		<result property="applyNo" column="apply_no" />
		<result property="applyStatus" column="apply_status" />
		<result property="applyDatetime" column="apply_datetime" />
		<result property="deleted" column="deleted_datetime" />
	</resultMap>

	<!-- Order 정보 -->
	<resultMap id="selectOrderResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="regOrderId" column="reg_order_id" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />
		<result property="address" column="address" />
		<result property="status" column="status" />
		<result property="reservationDatetime" column="reservation_datetime" />
		<result property="assignedDatetime" column="assigned_datetime" />
		<result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="arrivedDatetime" column="arrived_datetime" />
		<result property="completedDatetime" column="completed_datetime" />
		<result property="returnDatetime" column="return_datetime" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="store_id" />
			<result property="brandCode" column="brand_code" />
			<result property="brandName" column="brand_name" />
		</association>
	</resultMap>

	<!-- 2020.09.17 라이더가 소속된 매장의 브랜드 정보를 가져온다. -->
	<select id="selectLoginRider" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="Map">
		select	 A.login_id			as loginId
				,B.access_token		as accessToken
				,( select brand_code from TB_STORE where id = C.store_id )		as brandCode
				,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and code = ( select brand_code from TB_STORE where id = C.store_id ) )	as brandName
				,( select ifnull(beaconId, ( select beaconId from TB_ADMIN where id = A.admin_id )) from TB_STORE where admin_id = A.admin_id and id = C.store_id )	as uuid
		from	 TB_RIDER			as A
		left join TB_RIDER_SESSION	as B
			on	 A.id = B.rider_id
		left join TB_SUBGROUP_RIDER_REL	as C
			on	 A.id = C.rider_id
		where	 A.deleted is null
		and		 C.deleted is null
		and		 date_format(ifnull(B.expiry_datetime, now()), '%Y-%m-%d') <![CDATA[>=]]> date_format(now(), '%Y-%m-%d')
		and		 A.login_id = #{loginId}
		and		 A.login_pw = #{loginPw}
		limit	 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectRiderTokenCheck" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_RIDER A JOIN TB_RIDER_SESSION B
		ON A.id = B.rider_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND date_format(ifnull(expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d')
		]]>
	</select>

	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
		- 20.11.19 라이더 로그인 체크 방식 변경
	-->
	<select id="selectRiderTokenLoginCheck" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.login.User">
		select	 A.login_id
				,A.login_pw
		from	 TB_RIDER				A
		left join TB_RIDER_SESSION		B
			on	 A.id = B.rider_id
		left join TB_REQ_REGIST_RIDER	C
			on	 A.id = C.rider_id
		where	 1=1
		and		 A.deleted is null
		and		 C.deleted_datetime is null
		AND		 date_format(ifnull(B.expiry_datetime, now()), '%Y-%m-%d') <![CDATA[>=]]> date_format(now(), '%Y-%m-%d')
		and		 ifnull(C.req_status, 1) = 1
		and	(	(A.app_type is null)
			or	(A.app_type = 1 and C.req_status = 1)
			)
		and		 A.login_id = #{loginId}
		and		 B.access_token = #{accessToken}
		limit	 1

	</select>


	<!-- insertRiderSession -->
	<insert id="insertRiderSession" parameterType="kr.co.cntt.core.model.rider.Rider">
		<![CDATA[
		INSERT INTO TB_RIDER_SESSION(rider_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_RIDER
		WHERE login_id = #{loginId}
		AND deleted IS NULL
		]]>
	</insert>


	<!-- insertAdminRiderSession -->
	<insert id="insertAdminRiderSession" parameterType="kr.co.cntt.core.model.rider.Rider">
		<![CDATA[
		INSERT INTO TB_RIDER_SESSION(rider_id, access_token, created_datetime)
		SELECT
			#{id}
			, #{accessToken}
			, now()
		FROM TB_RIDER
		WHERE login_id = #{loginId}
		AND deleted IS NULL
		]]>
	</insert>



	<!-- updateRiderSession -->
	<update id="updateRiderSession" parameterType="kr.co.cntt.core.model.rider.RiderSession">
		update	 TB_REQ_REGIST_RIDER	RRR
				,TB_RIDER				R
				,TB_RIDER_SESSION		RS
		set		 RS.expiry_datetime = #{expiryDatetime}
				,RRR.exp_datetime = #{expiryDatetime}
				,RS.modified_datetime = now()
		WHERE	 RRR.rider_id = R.id
		and		 R.id = RS.rider_id
		and		 date_format(ifnull(ifnull(RS.expiry_datetime, RRR.exp_datetime), now()), '%y-%m-%d') >= date_format(now(), '%y-%m-%d')
		and		 RRR.req_status in (0, 1, 5)
		and		 R.id = #{rider_id}
	</update>


	<!--rider 정보 조회 -->
	<select id="getRiderInfo" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectSubgroupRiderRelsResult">
		SELECT 	 TR.created_datetime
				,TR.modified_datetime
				,TR.last_access
				,TR.admin_id
				,TR.chat_user_id
				,TR.id
				,TR.name
				,TR.phone
				,TS.store_name
				,TS.id AS store_id
				,TR.login_id
				,TR.login_pw
				,TR.code
				,TR.employment_type
				,TR.working
				,TR.status
				,TR.latitude
				,TR.longitude
				,TR.location_updated
				,TR.vehicle_number
				,TR.working_hours
				,TR.rest_hours
				,TSG.id AS subgroup_id
				,TSG.group_id AS subgroup_group_id
				,TG.name AS group_name
				,TSG.name AS subgroup_name
				,TSG.admin_id AS subgroup_admin_id
				,TG.id AS group_id
				,TG.admin_id AS group_admin_id
				,SRR.id AS subGroupRiderRel_id
				,SRR.admin_id AS subGroupRiderRel_admin_id
				,SRR.group_id AS subGroupRiderRel_group_id
				,SRR.subgroup_id AS subGroupRiderRel_subgroup_id
				,SRR.store_id AS subGroupRiderRel_store_id
				,SRR.rider_id AS subGroupRiderRel_rider_id

				,ifnull(TS.brand_code, AD.brand_code)   as brandCode
				,(select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = ifnull(TS.brand_code, AD.brand_code))	as brandName

				,( select os from TB_RIDER_SESSION where rider_id = TR.id order by expiry_datetime desc limit 1 )		as os
				,ifnull(shared_flag, 0)					as rider_shared_status

				,case when IFNULL(TR.store_shared, 0) = 1 then 'Y' else 'N' end																														as shared_store
				,(select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = TR.admin_id and rider_id = TR.id and deleted is null order by created_datetime desc limit 1)													as shared_store_id
				,(select code from TB_STORE where id = (select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = TR.admin_id and rider_id = TR.id and deleted is null order by created_datetime desc limit 1))			as shared_store_code
				,(select store_name from TB_STORE where id = (select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = TR.admin_id and rider_id = TR.id and deleted is null order by created_datetime desc limit 1))		as shared_store_name

				,(select push_token from TB_RIDER_SESSION where rider_id = TR.id and access_token = #{token})			as push_token
				,ifnull(AD.push_radius, 20)                        as push_radius
				,ifnull(AD.location_refresh_time, 60)               as location_refresh_time

				,(select os from TB_RIDER_SESSION where rider_id = TR.id and access_token = #{token})			as os

				,ifnull(ifnull(TS.rssi, AD.rssi), -70)															as rssi
				,ifnull(AD.beacon_cycle, 0)																		as beacon_cycle
				,ifnull(TS.beaconId, AD.beaconId)																as beaconId
		FROM     TB_RIDER TR
		left join TB_SUBGROUP_RIDER_REL AS SRR
			on   TR.id = SRR.rider_id
			AND  SRR.deleted is NULL
		left join TB_STORE AS TS
			on   SRR.store_id = TS.id
			AND  TS.deleted is NULL
		left join TB_SUBGROUP AS TSG
			on   SRR.group_id=TSG.id
			AND  TSG.deleted is NULL
		left join TB_GROUP AS TG
			on   SRR.group_id = TG.id
			AND  TG.deleted is NULL
		left join TB_ADMIN as AD
			on   TR.admin_id = AD.id
		WHERE    1=1
		and      TR.deleted is null
		<choose>
			<when test="id != null and id != ''">
				<if test="(isAdmin != null and isAdmin != '') and isAdmin == 0">
					AND      TR.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
				</if>
				<if test="(isAdmin != null and isAdmin != '') and isAdmin == 1">
					AND      TR.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
				</if>
				AND      TR.id = #{id}
			</when>
			<otherwise>
				AND      TR.admin_id in (SELECT admin_id FROM TB_RIDER WHERE id in (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token} and date_format(ifnull(expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d') AND rider_id = TR.id))
				AND      TR.id in (
									SELECT 	 rider_id
									FROM     TB_RIDER_SESSION
									WHERE    access_token=#{token}
									AND      date_format(ifnull(expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d')
									AND      rider_id = TR.id
					      )
			</otherwise>
		</choose>
	</select>


	<!-- getStoreRiders -->
	<select id="getStoreRiders" parameterType="kr.co.cntt.core.model.store.Store" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT
			rid.created_datetime
			, rid.modified_datetime
			, rid.last_access
			, rid.chat_user_id
			, rid.admin_id
			, rid.id
			, rid.name
			, rid.phone
			, rid.login_id
			, rid.login_pw
			, rid.comment
			, rid.deleted
		FROM TB_RIDER AS rid
		INNER JOIN TB_STORE_RIDER_REL AS rel
		ON rid.id = rel.rider_id
		WHERE
			<choose>
			<when test="id != null and id != ''">
				rel.store_id = #{id}
			</when>
			<otherwise>
				rel.store_id = (
					SELECT store_id
					FROM TB_STORE_SESSION
					WHERE access_token = #{accessToken})
			</otherwise>
			</choose>
			AND
			rel.admin_id = (
				SELECT admin_id
				FROM TB_STORE AS st
				WHERE st.id = rel.store_id)
    </select>


	<!-- rider 정보 수정 -->
	<update id="updateRiderInfo" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		LEFT JOIN TB_RIDER_SESSION AS C
		ON A.id = C.rider_id
		SET
			A.modified_datetime = now()
			<if test="loginPw != null and loginPw != ''">
				, A.login_pw = #{loginPw}
			</if>

			<if test="lastAccess != null and lastAccess != ''">
				, A.last_access = #{lastAccess}
			</if>

			<if test="name != null and name != ''">
				, A.name = #{name}
			</if>

			<if test="phone != null and phone != ''">
				, A.phone = #{phone}
			</if>

			<if test="code != null and code != ''">
				, A.code = #{code}
			</if>

			<if test="employmentType != null and employmentType != ''">
				, A.employment_type = #{employmentType}
			</if>

			<if test="working != null and working != ''">
				, A.working = #{working}
			</if>

			<if test="status != null and status != ''">
				, A.status = #{status}
			</if>

			<if	test="sharedStatus != null and sharedStatus != ''">
				, A.shared_flag = #{sharedStatus}
			</if>

			<if	test="sharedStore != null and sharedStore != ''">
				, A.store_shared = #{sharedStore}
			</if>

			<if test="vehicleNumber != null and vehicleNumber != ''">
				, A.vehicle_number = #{vehicleNumber}
			</if>

			<if test="workingHours != null and workingHours != ''">
				, A.working_hours = #{workingHours}
			</if>

			<if test="restHours != null and restHours != ''">
				, A.rest_hours = #{restHours}
			</if>

			<if test="restHours == null or restHours == ''">
				, A.rest_hours = null
			</if>

			<if test="changePhone eq '1'.toString() ">
				, C.push_token = null
			</if>
			, A.id = LAST_INSERT_ID(A.id)
		WHERE 1=1 and B.deleted IS NULL
		<choose>
			<when test="id != null and id != ''">
				AND A.id = #{id}
			</when>
			<otherwise>
                AND A.admin_id = (SELECT admin_id FROM (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})) AS D)
				AND A.id = (
                    SELECT rider_id
                    FROM TB_RIDER_SESSION
                    WHERE access_token=#{accessToken}
				)
			</otherwise>
		</choose>
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</update>

	<!-- rider 정보 수정 스토어 -->
	<update id="updateRiderInfoStore" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		LEFT JOIN TB_RIDER_SESSION AS C
		ON A.id = C.rider_id
		SET
		A.modified_datetime = now()
		<if test="loginPw != null and loginPw != ''">
			, A.login_pw = #{loginPw}
		</if>
		<if test="lastAccess != null and lastAccess != ''">
			, A.last_access = #{lastAccess}
		</if>

		<if test="name != null and name != ''">
			, A.name = #{name}
		</if>

		<if test="phone != null and phone != ''">
			, A.phone = #{phone}
		</if>

		<if test="code != null and code != ''">
			, A.code = #{code}
		</if>

		<if test="employmentType != null and employmentType != ''">
			, A.employment_type = #{employmentType}
		</if>

		<if test="working != null and working != ''">
			, A.working = #{working}
		</if>

		<if test="status != null and status != ''">
			, A.status = #{status}
		</if>

		<if test="vehicleNumber != null and vehicleNumber != ''">
			, A.vehicle_number = #{vehicleNumber}
		</if>

		<if test="workingHours != null and workingHours != ''">
			, A.working_hours = #{workingHours}
		</if>

		<if test="restHours != null and restHours != ''">
			, A.rest_hours = #{restHours}
		</if>

		<if test="restHours == null or restHours == ''">
			, A.rest_hours = null
		</if>

		<if test="subGroupRiderRel != null and (subGroupRiderRel.storeId !='' and subGroupRiderRel.storeId != null)">
			, B.modified_datetime = now()
			, B.store_id = #{subGroupRiderRel.storeId}
			, B.subgroup_id = #{subGroupRiderRel.subGroupId}
			, B.group_id = #{subGroupRiderRel.groupId}
		</if>

		<if test="changePhone eq '1'.toString()">
			, C.push_token = null
		</if>

		, A.id = LAST_INSERT_ID(A.id)
		WHERE 1=1 and B.deleted is NULL
		<choose>
			<when test="id != null and id != ''">
				AND A.id = #{id}
			</when>
			<otherwise>
				AND A.admin_id = (SELECT * FROM (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})) AS D)
				AND A.id = (
				SELECT rider_id
				FROM TB_RIDER_SESSION
				WHERE access_token=#{accessToken}
				)
			</otherwise>
		</choose>
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</update>
	<!-- rider 출/퇴근  -->
	<update id="updateWorkingRider" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER A
		SET
			modified_datetime = now()
		<if test="working == 1">
			, last_access = now()
		</if>

		<if test="working != null and working != ''">
			, working=#{working}
		</if>

		WHERE deleted is null
		and
			id = (
		SELECT
			rider_id
		FROM
			TB_RIDER_SESSION
		WHERE
			access_token = #{accessToken}
		AND	 date_format(ifnull(expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d')
		and   rider_id = A.id
		)

	</update>

	<select id="selectRiderWorkingHistory" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="Map">
		select	 b.rider_id
				,b.working_status
				,b.working_on
				,b.working_off
		from	 TB_RIDER					as a
				,TB_RIDER_WORKING_HISTORY	as b
		where	 a.id = b.rider_id
		and		 a.id = (select rider_id from TB_RIDER_SESSION where access_token = #{token} and date_format(ifnull(expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d'))
		and		 b.working_status = 1
		order by b.working_on
	</select>

	<insert id="insertRiderWorkingHistory" parameterType="kr.co.cntt.core.model.rider.Rider">
		insert into TB_RIDER_WORKING_HISTORY(rider_id, working_status, working_on)
		select	 id
				,'1'
				,now()
		from	 TB_RIDER
		where	 working = 1
		and		 id = (select rider_id from TB_RIDER_SESSION where access_token = #{token})
	</insert>

	<update id="updateRiderWorkingHistory" parameterType="kr.co.cntt.core.model.rider.Rider">
		update	 TB_RIDER_WORKING_HISTORY
		set		 working_status = 0
				,working_off = now()
				,updated_datetime = now()
		where	 working_status = 1
		and		 working_off is null
		and		 rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token})
	</update>

	<!--rider 위치 정보 전송 -->
	<update id="updateRiderLocation" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER
		SET
		modified_datetime = now()

		<if test="latitude != null and latitude != ''">
			, latitude = #{latitude}
		</if>

		<if test="longitude != null  and longitude != ''">
			, longitude = #{longitude}
		</if>

		, location_updated = now()
		WHERE
			id = (
				SELECT
					rider_id
				FROM
					TB_RIDER_SESSION
				WHERE
					access_token = #{accessToken})

	</update>

	<!--rider 자기 위치 정보 조회 -->
	<select id="getRiderLocation" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT
		  id
		, name
		, latitude
		, longitude
		, location_updated
		FROM TB_RIDER
		WHERE 1=1
		<choose>
			<when test="id != null and id != ''">
			AND	id = #{id}
			</when>

			<otherwise>
			AND	id = (
					SELECT
						rider_id
					FROM
						TB_RIDER_SESSION
					WHERE
						access_token = #{accessToken})
			</otherwise>
		</choose>
	</select>

	<!--rider 들 위치 정보 조회 admin -->
	<select id="getAdminRidersLocation" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT
		admin_id
		, name
		, latitude
		, longitude
		, location_updated
		FROM TB_RIDER
		WHERE 1=1
		AND	admin_id = (SELECT
					admin_id
				  FROM
					TB_ADMIN_SESSION
				  WHERE
					access_token = #{accessToken})
	</select>

	<!--rider 들 위치 정보 조회 store -->
	<select id="getStoreRidersLocation" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT
			TSR.store_id
			, name
			, latitude
			, longitude
			, location_updated
		FROM
			TB_RIDER TR
		join
			TB_STORE_RIDER_REL TSR
		on TR.id = TSR.rider_id
		WHERE
			TSR.modified_datetime IS NULL
		AND	TSR.store_id = (
			SELECT
				store_id
			FROM
				TB_STORE_SESSION
			WHERE
				access_token = #{accessToken})
	</select>

	<update id="updatePushToken" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER_SESSION
		SET
			modified_datetime = now()

		<if test="pushToken != null and pushToken != ''">
			, push_token=#{pushToken}
		</if>
		<if test="platform == null">
			, os = null
		</if>
		<if test="platform != null and platform != ''">
			, os=#{platform}
		</if>

		WHERE
			access_token = #{accessToken}
	</update>
	<!-- selectRiderFooter 내상점기사 보기 추가 적용-->
	<select id="selectRiderFooter" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRiderNowResult">
		SELECT A.working
		, count(E.id) as order_count
		, count(*) as work_count
		, count(if(I.id=(SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}), I.id, null)) as my_work_count
		FROM TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		AND B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
		ON B.subgroup_id = C.id
		LEFT JOIN TB_GROUP AS D
		ON B.group_id = D.id
		AND C.deleted IS NULL
		AND D.deleted IS NULL
		LEFT JOIN (
		SELECT F.id, F.rider_id, F.assigned_datetime, F.store_id, G.name from TB_ORDER as F
		LEFT JOIN TB_STORE as G
		ON F.store_id = G.id
		where F.created_datetime > CURRENT_DATE()
		and F.status in(1,2)
		and F.id in(select SUBSTRING_INDEX(group_concat(id order by assigned_datetime asc),',',1) from TB_ORDER where assigned_datetime is not null and created_datetime > CURRENT_DATE() and status in(1,2) group by rider_id )) AS E
		ON E.rider_id = A.id
		LEFT JOIN TB_STORE AS I
		ON B.store_id = I.id
		WHERE A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
		AND (
			(B.subgroup_id = (select subgroup_id from TB_SUBGROUP_STORE_REL where store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}) and deleted is null ORDER BY created_datetime DESC LIMIT 1) AND B.subgroup_id is not null)
			OR B.store_id is null
			OR (B.subgroup_id is null AND B.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
		)
		AND A.deleted IS NULL AND A.status = 0 group by working;
	</select>

	<!-- selectRiderNow -->
	<select id="selectRiderNow" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRiderNowResult">
		SELECT	 A.id
				,A.name
				,A.phone
				,A.status
				,A.chat_user_id
				,A.latitude
				,A.longitude
				,A.location_updated
				,A.return_time
				,A.working
				,B.store_id				as rider_store_id
				,C.store_name			as rider_store_name
				,C.latitude				as store_latitude
				,C.longitude			as store_longitude
				,( select store_name from TB_STORE where id = E.store_id and admin_id = E.admin_id and deleted is null )	as order_store_name
				-- ,E.order_id
				,E.store_id				as order_store_id
				,E.order_count
				,E.order_status
		FROM	 TB_RIDER A
		left join(
					SELECT	 admin_id
					,rider_id
					,max(status) 			as order_status
					,any_value(store_id) 	as store_id
					,count(rider_id)			as order_count
					FROM	 TB_ORDER	as ord
					where	 created_datetime > CURRENT_DATE()
					and		 status in (1, 2, 6)
					group by admin_id, rider_id
				)	as E
			on	 A.id = E.rider_id
				,TB_SUBGROUP_RIDER_REL B
		left join TB_STORE	C
			on	 B.admin_id = C.admin_id
			and  B.store_id = C.id
			and	 C.deleted is null
		left join TB_REQ_REGIST_RIDER		as F
			on	 B.rider_id = F.rider_id
		left join TB_RIDER_SHARED_INFO		as G
			on	 B.rider_id = G.rider_id
			and	 G.deleted is null
			and	 G.created_datetime > current_date()
		WHERE	 A.admin_id = B.admin_id
		AND		 A.id = B.rider_id
		AND		 A.deleted IS NULL
		AND		 B.deleted IS NULL
		AND		 A.status = 0
		AND		 F.deleted_datetime is null
		and		 ifnull(F.req_status, 1) = 1
		AND	(	(A.app_type is null)
			or	(A.app_type = 1 and F.req_status = 1)
			)
		and		 A.admin_id = ( SELECT admin_id FROM TB_STORE WHERE id = ( SELECT store_id FROM TB_STORE_SESSION where access_token = #{token} ) )
		and	(	(B.store_id = ( SELECT store_id FROM TB_STORE_SESSION where access_token = #{token} ) and ifnull(A.store_shared, 0) = 0)
			or	(B.subgroup_id = (select subgroup_id from TB_SUBGROUP_STORE_REL where store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}) and deleted is null) and B.store_id <![CDATA[<>]]> (SELECT store_id FROM TB_STORE_SESSION where access_token = #{token}) and ifnull(A.shared_flag, 0) = 1)
			or	(G.store_id = ( SELECT store_id FROM TB_STORE_SESSION where access_token = #{token} ))
<!--		UAT 적용-->
		<if test="id != null and id == '13'">
			or	(B.store_id in (6, 14) and ifnull(A.shared_flag, 0) = 1)
		</if>
		<if test="id != null and (id == '6' or id == '14')">
			or	(B.store_id in (13) and ifnull(A.shared_flag, 0) = 1)
		</if>
<!--		REAL 적용-->
<!--		<if test="id != null and id == '386'">-->
<!--			or	(B.store_id in (39, 67) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
<!--		<if test="id != null and (id == '39' or id == '67')">-->
<!--			or	(B.store_id in (386) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
			)
		order by case when A.working = '1' then case when E.order_status = '1' then 1 when E.order_status = '2' then 2 else 3 end when A.working = '3' then 4 else 99 end, A.id;
<!--		order by A.id;-->
	</select>

	<!-- selectSubgroupRiderRels -->
	<select id="selectSubgroupRiderRels" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectSubgroupRiderRelsResult">
		select	 A.id
				,A.name
				,A.phone
				,A.status
				,A.working
				,A.chat_user_id
				,A.latitude
				,A.longitude
				,A.location_updated
				,A.return_time
				,B.store_id 			AS subGroupRiderRel_store_id
				,B.subgroup_id
				,B.group_id				as subgroup_group_id
				,( select name from TB_SUBGROUP where admin_id = B.admin_id and group_id = B.group_id and id = B.subgroup_id )		as subgroup_name
				,B.admin_id				as subgroup_admin
				,B.group_id				as group_id
				,( select name from TB_GROUP where admin_id = B.admin_id and id = B.group_id )		as group_name
				,B.admin_id					as group_admin_id
				,case when ifnull(A.store_shared, 0) = 1 then 'Y' else 'N' end	as shared_store
				,E.store_id					as shared_store_id
		from	 TB_RIDER				as A
		inner join TB_SUBGROUP_RIDER_REL	as B
			on	 A.id = B.rider_id
			and	 A.admin_id = B.admin_id
			and	 B.deleted is null
		left join TB_REQ_REGIST_RIDER	as D
			on	 A.id = D.rider_id
		left join TB_RIDER_SHARED_INFO	as E
			on	 A.id = E.rider_id
			and	 E.deleted is null
			and	 E.created_datetime > current_date()
		where	 1=1
		and		 A.deleted is null
		AND		 D.deleted_datetime is null
		and		 ifnull(D.req_status, 1) = 1
		AND	(	(A.app_type is null)
			or	(A.app_type = 1 and D.req_status = 1)
			)
		and		 A.admin_id = ( select admin_id from TB_STORE where id = ( select store_id from TB_STORE_SESSION where access_token = #{token} ) )
		and	(	(B.store_id = ( SELECT store_id FROM TB_STORE_SESSION where access_token = #{token} ) and ifnull(A.store_shared, 0) = 0)
			or	(B.subgroup_id = ( select subgroup_id from TB_SUBGROUP_STORE_REL where store_id = ( select store_id from TB_STORE_SESSION where access_token = #{token} ) and deleted is null ) and B.store_id <![CDATA[<>]]> (SELECT store_id FROM TB_STORE_SESSION where access_token = #{token}) and ifnull(A.shared_flag, 0) = 1)
			or	(E.store_id = ( SELECT store_id FROM TB_STORE_SESSION where access_token = #{token} ))
<!--		UAT 적용-->
		<if test="id != null and id == '13'">
			or	(B.store_id in (6, 14) and ifnull(A.shared_flag, 0) = 1)
		</if>
		<if test="id != null and (id == '6' or id == '14')">
			or	(B.store_id in (13) and ifnull(A.shared_flag, 0) = 1)
		</if>
<!--		REAL 적용-->
<!--		<if test="id != null and id == '386'">-->
<!--			or	(B.store_id in (39, 67) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
<!--		<if test="id != null and (id == '39' or id == '67')">-->
<!--			or	(B.store_id in (386) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
			)
	</select>

	<select id="selectMyStoreRiderRels" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectSubgroupRiderRelsResult">
		SELECT A.id
				, A.name
				, A.phone
				, A.status
				, A.working
				, A.chat_user_id
				, A.latitude
				, A.longitude
				, A.location_updated
				, A.code
				, A.phone
				, A.login_id
				, A.vehicle_number
				, B.store_id AS subGroupRiderRel_store_id
				, C.id AS subgroup_id
				, C.group_id AS subgroup_group_id
				, C.name AS subgroup_name
				, C.admin_id AS subgroup_admin_id
				, D.id AS group_id
				, D.name AS group_name
				, D.admin_id AS group_admin_id
		FROM TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
			ON A.id = B.rider_id
			AND B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
			ON B.subgroup_id = C.id
		LEFT JOIN TB_GROUP AS D
			ON B.group_id = D.id
			AND C.deleted IS NULL
			AND D.deleted IS NULL
		WHERE A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
		AND A.deleted IS NULL
		AND B.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token});
	</select>

	<!-- selectRiderAssignmentStatus -->
	<select id="selectRiderAssignmentStatus" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="java.lang.String">
		SELECT A.assignment_status
		FROM TB_STORE as A
		LEFT JOIN TB_SUBGROUP_RIDER_REL as B
		ON A.id = B.store_id
			AND B.rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
		WHERE B.store_id = (SELECT store_id FROM TB_SUBGROUP_RIDER_REL WHERE rider_id =
							(SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
	</select>

	<!-- resetRiderReturnTime -->
	<update id="resetRiderReturnTime">
		UPDATE TB_RIDER
			SET return_time = IF(now() > DATE_ADD(return_time, INTERVAL 1 HOUR), NULL, return_time)
		WHERE return_time is not NULL
	</update>

	<!-- updateRiderReturnTime -->
	<update id="updateRiderReturnTime" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER
			SET return_time = now()
		WHERE id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
	</update>

	<!-- selectForAssignRiders -->
	<select id="selectForAssignRiders" parameterType="Map" resultMap="selectSubgroupRiderRelsResult">
		select	 A.id
				,A.status
				,A.working
				,A.working_hours
				,A.rest_hours
				,A.latitude
				,A.longitude
				,A.return_time
				,A.order_standby_datetime
				,A.order_standby_status
				,B.subgroup_id				as subGroupRiderRel_subgroup_id
				,B.store_id					as subGroupRiderRel_store_id
				,(SELECT COUNT(id) FROM TB_ORDER WHERE rider_id = A.id AND status in (1,2,6) AND created_datetime > CURRENT_DATE()) AS assign_count
				,(SELECT MAX(assigned_datetime) FROM TB_ORDER WHERE rider_id = A.id AND created_datetime > CURRENT_DATE() AND third_party_id is null) AS min_assigned_datetime
				,(SELECT MIN(picked_up_datetime) FROM TB_ORDER WHERE rider_id = A.id AND status in(1,2,6) AND created_datetime > CURRENT_DATE()) AS min_picked_up_datetime
				,(SELECT max(status) FROM TB_ORDER WHERE rider_id = A.id AND status in(1,2,6) AND created_datetime > CURRENT_DATE()) AS min_order_status
				,(select denied_datetime from TB_ORDER_DENY_ASSIGNMENT where rider_id = A.id and admin_id = #{adminId} and order_id = #{orderId} and created_datetime > current_date() and timestampdiff(minute, denied_datetime, now()) <![CDATA[<=]]> 5 )	as denied_datetime
				,(select order_id from TB_ORDER_DENY_ASSIGNMENT where rider_id = A.id and admin_id = #{adminId} and order_id = #{orderId} and created_datetime > current_date() and timestampdiff(minute, denied_datetime, now()) <![CDATA[<=]]> 5 )	as deny_order_id
				,ifnull(A.shared_flag, 0)					as rider_shared_status
				,ifnull(A.store_shared, 0)					as shared_store
				,C.store_id									as shared_store_id
		from	(
					select	 R.id
							,R.status
							,R.working
							,R.working_hours
							,R.rest_hours
							,R.latitude
							,R.longitude
							,R.return_time
							,R.order_standby_datetime
							,R.order_standby_status
							,R.shared_flag
							,R.store_shared
					from	 TB_RIDER				as R
					left join TB_REQ_REGIST_RIDER	as RR
						on	 R.id = RR.rider_id
					where	 R.deleted is null
					and	 	 RR.deleted_datetime is null
					and		 ifnull(RR.req_status, 1) = 1
					AND	(	(R.app_type is null)
						or	(R.app_type = 1 and RR.req_status = 1)
						)
					and		 R.working = 1
					and		 R.admin_id = #{adminId}
				)	A
		left join
				(
					select	 id
							,admin_id
							,group_id
							,subgroup_id
							,store_id
							,rider_id
					from	 TB_SUBGROUP_RIDER_REL
					where	 deleted is null
					and		 admin_id = #{adminId}
				)	B
			on	 A.id = B.rider_id
		left join
				(
					select	 rider_id
							,admin_id
							,group_id
							,subgroup_id
							,store_id
					from	 TB_RIDER_SHARED_INFO
					where	 deleted is null
					and		 admin_id = #{adminId}
					and      store_id = #{storeId}
					and      created_datetime > current_date()
				)	C
		on	 A.id = C.rider_id
		where	 1=1
		and	(	 B.store_id = #{storeId}
			or	(B.subgroup_id = ( select subgroup_id from TB_SUBGROUP_STORE_REL where admin_id = #{adminId} and store_id = #{storeId} and deleted is null ) and B.store_id <![CDATA[<>]]> #{storeId} and ifnull(A.shared_flag, 0) = 1 and ifnull(A.store_shared, 0) = 0)
			or	(C.store_id = #{storeId})
<!--		UAT 적용-->
		<if test="storeId != null and storeId == '13'">
			or	(B.store_id in (6, 14) and ifnull(A.shared_flag, 0) = 1)
		</if>
		<if test="storeId != null and (storeId == '6' or storeId == '14')">
			or	(B.store_id in (13) and ifnull(A.shared_flag, 0) = 1)
		</if>
<!--		REAL 적용-->
<!--		<if test="storeId != null and storeId == '386'">-->
<!--			or	(B.store_id in (39, 67) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
<!--		<if test="storeId != null and (storeId == '39' or storeId == '67')">-->
<!--			or	(B.store_id in (386) and ifnull(A.shared_flag, 0) = 1)-->
<!--		</if>-->
			)
		ORDER BY min_assigned_datetime IS NULL DESC, assign_count ASC , min_assigned_datetime ASC;
	</select>

	<!-- selectRiderRestHours -->
	<select id="selectRiderRestHours" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT id, rest_hours, working from TB_RIDER where working = 1 or working = 3;
	</select>

	<!-- updateRiderWorkingAuto -->
	<select id="updateRiderWorkingAuto" statementType="CALLABLE" parameterType="HashMap" resultType="java.lang.Integer">
		{ CALL SP_AUTO_REST_TIME(
								#{idNum}
								,#{num})
		}
		<!-- DELIMITER $$
			create procedure SP_AUTO_REST_TIME(IN id_num INT,IN num INT)
			BEGIN
			UPDATE TB_RIDER as R
			SET working = if(timediff(date_format(now(), '%T'), subtime(concat(substring_index(substring_index(R.rest_hours, '|', num),'|',-1),':00:00'),'00:20:00')) > 0
				AND timediff(date_format(now(),'%T'), addtime(concat(substring_index(substring_index(R.rest_hours, '|', num),'|',-1),':00:00'),'01:00:00')) < 0, '3', '1')
			WHERE (working = 1 or working = 3) and id = id_num;
        	select working from TB_RIDER where id = id_num;
			END $$
			DELIMITER ; -->
	</select>

    <select id="selectRiderTokenByChatUserId" parameterType="kr.co.cntt.core.model.chat.Chat" resultType="Map">
        select	 TBRS.push_token
				,TBRS.os				as platform
				,B.app_type			as appType
		from	 TB_RIDER_SESSION AS TBRS
        LEFT JOIN TB_RIDER AS B
        	ON	 B.chat_user_id = #{chatUserId}
		where	 TBRS.rider_id = B.id
		and		 TBRS.push_token is not null
		and		 date_format(ifnull(TBRS.expiry_datetime, now()), '%Y-%m-%d') <![CDATA[>=]]> date_format(now(), '%Y-%m-%d')
    </select>

	<select id="selectRiderToken" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
		select	 TBRS.push_token
				,TBRS.os			as platform
				,R.app_type			as appType
		from	 TB_RIDER			as R
		left join TB_RIDER_SESSION	AS TBRS
			on	 R.id = TBRS.rider_id
		where	 TBRS.rider_id = #{riderId}
		and		 TBRS.push_token is not null
		and		 R.deleted is null
		and		 date_format(ifnull(TBRS.expiry_datetime, now()), '%Y-%m-%d') <![CDATA[>=]]> date_format(now(), '%Y-%m-%d')
	</select>

	<select id="selectRiderTokenByOrderId" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
		select	 TBRS.push_token
				,TBRS.os			as platform
				,R.app_type			as appType
		from	 TB_RIDER			as R
		left join TB_RIDER_SESSION	as TBRS
			on	 R.id = TBRS.rider_id
		left join TB_ORDER			as TBO
			on	 TBRS.rider_id = TBO.rider_id
		where	 TBO.reg_order_id = #{id}
		and		 TBRS.push_token is not null
		and		 date_format(ifnull(TBRS.expiry_datetime, now()), '%Y-%m-%d') <![CDATA[>=]]> date_format(now(), '%Y-%m-%d')
	</select>

	<select id="selectRejectReason" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.reason.Reason">
		SELECT id
		    , reason
		    , admin_id
		FROM TB_REJECT_REASON
		WHERE deleted IS NULL
            <choose>
                <when test="role != null and role == 'ROLE_STORE'">
                    AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                </when>
                <when test="role != null and role == 'ROLE_RIDER'">
                    AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                </when>
                <when test="role != null and role == 'ROLE_ADMIN'">
                    AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                </when>
                <otherwise>
                    AND id IS NULL
                </otherwise>
            </choose>
    </select>

	<!-- selectMySubgroupRiderRels -->
	<select id="selectMySubgroupRiderRels" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.group.SubGroupRiderRel">
		SELECT id
			, admin_id
			, group_id
			, subgroup_id
			, store_id
			, rider_id
		FROM TB_SUBGROUP_RIDER_REL
		WHERE deleted IS NULL
		<choose>
			<when test="role != null and role == 'ROLE_RIDER'">
				AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
				AND rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
			</when>
			<otherwise>
				AND id IS NULL
			</otherwise>
		</choose>
	</select>

	<!-- selectMobileVersion -->
	<select id="selectMobileVersion" parameterType="String" resultType="String">
		SELECT version
		FROM TB_MOBILE_VERSION
		WHERE device = #{device}
			AND deleted IS NULL
		ORDER BY created_datetime DESC LIMIT 1
	</select>

	<!-- resetRiderPassword -->
	<update id="resetRiderPassword" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_RIDER
		SET login_pw = #{loginPw}
		, modified_datetime = now()
		WHERE id = ( select rider_id from TB_REQ_REGIST_RIDER where id = #{id} )
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>

	<!-- resetRiderPassword for Store -->
	<update id="resetRiderPasswordforStore" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE	 TB_RIDER
		SET		 login_pw = #{loginPw}
				,modified_datetime = now()
		WHERE	 id = ( select rider_id from TB_REQ_REGIST_RIDER where id = #{id} )
		AND		 admin_id = (SELECT admin_id FROM TB_STORE WHERE id = ( SELECT store_id from TB_STORE_SESSION WHERE access_token = #{token} limit 1) )
	</update>

	<!-- updateRiderOrderStandbyDateTime -->
	<update id="updateRiderOrderStandbyDateTime" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_RIDER
		SET
		order_standby_datetime = now()
		where
		<choose>
			<when test="role != null and role == 'ROLE_RIDER'">
				id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
			</when>
			<otherwise>
				id = #{id}
			</otherwise>
		</choose>
	</update>

	<!-- updateRiderOrderStandbyStatus -->
	<update id="updateRiderOrderStandbyStatus" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_RIDER
		SET
		<if test="token != null and token !=''">
			order_standby_status = 0
		</if>
		<if test="token == null or token ==''">
			order_standby_status = 1
		</if>
		where
		<choose>
			<when test="role != null and role == 'ROLE_RIDER'">
				id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
			</when>
			<otherwise>
				id = #{id}
			</otherwise>
		</choose>
	</update>

	<!--Rider Approval-->
	<select id="selectApprovalRiderList" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRiderApprovalResult">
		select	 REQ.id											as approval_id
				,REQ.created_datetime
				,IFNULL(R.admin_id, REQ.admin_id)				as admin_id
				,REQ.store_id									as rider_store_id
				,( select store_name from TB_STORE where id = REQ.store_id and deleted is null ) as rider_store_name
				,IFNULL(R.login_id, REQ.login_id)				as login_id
				,IFNULL(R.name, REQ.rider_name)					as name
				,IFNULL(R.phone, REQ.phone)						as phone
				,IFNULL(R.gender, REQ.gender)					as gender
				,IFNULL(R.vehicle_number, REQ.vehicle_number)	as vehicle_number
				,REQ.req_status
				,REQ.latitude
				,REQ.longitude
				,case when REQ.req_status in ('1', '5') and date_format(date_add(REQ.accept_datetime, interval 1 year), '%Y-%m-%d') = date_format(IFNULL(RS.expiry_datetime, REQ.exp_datetime), '%Y-%m-%d')  then null else IFNULL(RS.expiry_datetime, REQ.exp_datetime) end	as expiry_datetime
				,IFNULL(R.id, REQ.rider_id)						as rider_id
				,REQ.accept_datetime
				,REQ.reject_datetime
				,RR.group_id									as subGroupRiderRel_group_id
				,RR.subgroup_id									as subGroupRiderRel_subgroup_id
				,( select name from TB_SUBGROUP where admin_id = RR.admin_id and group_id = RR.group_id and id = RR.subgroup_id and deleted is null )			as subgroup_name
				,RR.store_id									as subGroupRiderRel_store_id
		from	 TB_REQ_REGIST_RIDER	REQ
		left join TB_RIDER				R
			on	 REQ.rider_id = R.id
		left join TB_RIDER_SESSION		RS
			on	 REQ.rider_id = RS.rider_id
		left join TB_SUBGROUP_RIDER_REL	RR
			on	 R.id = RR.rider_id
			and	 RR.deleted is null
		where	 1=1
		AND      REQ.deleted_datetime is null
		<choose>
			<when test="role != null and role == 'ROLE_ADMIN'">
				AND REQ.admin_id = ( select admin_id from TB_ADMIN_SESSION where access_token = #{token})
			</when>
			<when test="role != null and role == 'ROLE_STORE'">
				AND REQ.store_id = ( select store_id from TB_STORE_SESSION where access_token = #{token})
			</when>
			<when test="role != null and role == 'ROLE_RIDER'">
				AND ifnull(R.login_id, REQ.login_id) = #{loginId}
			</when>
			<when test="role != null and role == 'ROLE_SEARCH'">
				AND ifnull(R.login_id, REQ.login_id) = #{loginId}
				AND R.deleted is null
			</when>
			<otherwise>
				AND REQ.id is null
			</otherwise>
		</choose>
		AND      date_format(IFNULL(IFNULL(IFNULL(RS.expiry_datetime, REQ.exp_datetime), REQ.accept_datetime), REQ.created_datetime), '%Y-%m-%d') >= date_format(date_sub(now(), interval 1 year), '%Y-%m-%d')
		order by case when REQ.req_status in ('2', '3', '4') then 999 when REQ.req_status = '0' then 1 when REQ.req_status = '1' then 2 when REQ.req_status = '5' then 3 else 998 end
	</select>

	<!-- 정렬은 요청이 등록된 순이며, 최상위 1개의 정보를 기준으로 가입 내용을 가져온다. -->
	<!-- 단, 최종 암호가 서로 다른 계정인 경우 정보가 다르게 표기 될 수 있음. -->
	<select id="selectApprovalRiderInfo" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRiderApprovalResult">
		select	 REQ.id											as approval_id
				,REQ.created_datetime
				,IFNULL(R.admin_id, REQ.admin_id)				as admin_id
				,REQ.store_id									as rider_store_id
				,(select store_name from TB_STORE where id = REQ.store_id ) as rider_store_name
				,IFNULL(R.login_id, REQ.login_id)				as login_id
				,IFNULL(R.name, REQ.rider_name)					as name
				,IFNULL(R.phone, REQ.phone)						as phone
				,IFNULL(R.gender, REQ.gender)					as gender
				,IFNULL(R.vehicle_number, REQ.vehicle_number)	as vehicle_number
				,REQ.req_status
				,REQ.latitude
				,REQ.longitude
				,IFNULL(RS.expiry_datetime, REQ.exp_datetime)	as expiry_datetime
				,IFNULL(R.id, REQ.rider_id)						as rider_id
				,IFNULL(R.code, REQ.code)						as code
				,IFNULL(R.shared_flag, 0)						as shared_flag
				,case when IFNULL(R.store_shared, 0) = 1 then 'Y' else 'N' end																														as shared_store
				,(select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = R.admin_id and rider_id = R.id and deleted is null order by created_datetime desc limit 1)													as shared_store_id
				,(select code from TB_STORE where id = (select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = R.admin_id and rider_id = R.id and deleted is null order by created_datetime desc limit 1))			as shared_store_code
				,(select store_name from TB_STORE where id = (select store_id from TB_RIDER_SHARED_INFO where created_datetime > current_date() and admin_id = R.admin_id and rider_id = R.id and deleted is null order by created_datetime desc limit 1))		as shared_store_name
		from	 TB_REQ_REGIST_RIDER	REQ
		left join TB_RIDER				R
			on	 REQ.rider_id = R.id
		left join TB_RIDER_SESSION		RS
			on	 REQ.rider_id = RS.rider_id
		where	 1=1
		and      REQ.deleted_datetime is null
		<choose>
			<when test="role != null and role == 'ROLE_ADMIN'">
				AND REQ.admin_id = ( select admin_id from TB_ADMIN_SESSION where access_token = #{token})
				AND REQ.id = #{id}
			</when>
			<when test="role != null and role == 'ROLE_STORE'">
				AND REQ.store_id = ( select store_id from TB_STORE_SESSION where access_token = #{token})
				AND REQ.id = #{id}
			</when>
			<when test="role != null and role == 'ROLE_RIDER'">
				AND REQ.login_id = #{loginId}
				AND ifnull(R.login_pw, REQ.login_pw) = #{loginPw}
				AND R.deleted is null
				AND REQ.deleted_datetime is null
			</when>
			<otherwise>
				AND REQ.id is null
			</otherwise>
		</choose>
		order by REQ.id desc
		limit 1
	</select>

	<update id="updateApprovalRiderInfo" parameterType="kr.co.cntt.core.model.rider.RiderApprovalInfo" >
		update	 TB_REQ_REGIST_RIDER	as A
		left join TB_RIDER				as B
			on	 A.rider_id = B.id
		set		 A.modified_datetime = now()
		<if test="code != null and code != ''">
				,A.code = #{code}
		</if>
		<if test="vehicleNumber != null and vehicleNumber != ''">
				,A.vehicle_number = #{vehicleNumber}
		</if>
		<if test="session != null and session.expiryDatetime != ''">
				,A.exp_datetime = #{session.expiryDatetime}
		</if>
		<if test="name != null and name != ''">
				,A.rider_name = #{name}
		</if>
		<if test="approvalStatus != null and approvalStatus != ''">
				,A.req_status = #{approvalStatus}
		</if>
		<if test="riderId != null and riderId != ''">
				,A.rider_id = #{riderId}
		</if>
		<if test="role != null and role == 'ROLE_ADMIN'">
			<if test="store != null and store.id != ''">
				,A.store_id = #{store.id}
			</if>
		</if>
		<if test="approvalStatus != null and approvalStatus eq '1'.toString()">
			,A.accept_datetime = ifnull(accept_datetime, now())
		</if>
		<if test="approvalStatus != null and (approvalStatus eq '2'.toString() or approvalStatus eq '3'.toString())">
			,A.reject_datetime = ifnull(reject_datetime, now())
		</if>
		<if test="working != null and working eq '0'.toString()">
			,B.modified_datetime = now()
			,B.working = #{working}
		</if>
		<if test="sharedStatus != null">
			,B.shared_flag = #{sharedStatus}
		</if>
		where	 A.id = #{id}
	</update>

<!--	라이더 등록 요청 페이지에서 필요로 하는 기본 데이터-->
	<select id="selectAllStore" resultType="kr.co.cntt.core.model.store.Store">
		select	 admin_id	as adminId
				,id			as id
				,ifnull(brand_code, ( select brand_code from TB_ADMIN where id = admin_id ))	as brandCode
				,(select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = ifnull(brand_code, ( select brand_code from TB_ADMIN where id = admin_id )))	as brandName
				,store_name	as storeName
		from	 TB_STORE
		where	 deleted is null
	</select>

	<insert id="insertApprovalInfo" parameterType="kr.co.cntt.core.model.rider.RiderApprovalInfo">
		insert into TB_REQ_REGIST_RIDER(admin_id, store_id, rider_name, login_id, login_pw, phone, gender, vehicle_number, latitude, longitude)
		values(#{adminId}, #{store.id}, #{name}, #{loginId}, #{loginPw}, #{phone}, #{gender}, #{vehicleNumber}, #{latitude}, #{longitude})
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<select id="selectApprovalRiderPw" parameterType="String" resultType="String">
		select	 login_pw
		from	 TB_REQ_REGIST_RIDER
		where	 id = #{id}
		and      deleted_datetime is null
	</select>

	<update id="deleteRiderInfo" parameterType="kr.co.cntt.core.model.rider.Rider">
		update	 TB_RIDER		as R
		left join TB_SUBGROUP_RIDER_REL	as RR
			on	 R.id = RR.rider_id
		set		 R.deleted = ifnull(R.deleted, now())
				,R.modified_datetime = ifnull(R.modified_datetime, now())
				,RR.deleted = ifnull(RR.deleted, now())
				,RR.modified_datetime = ifnull(RR.modified_datetime, now())
		where	 R.id = #{id}
	</update>

	<update id="updateOverExpDate">
		update TB_REQ_REGIST_RIDER		as	RR
		left join TB_RIDER				as	R
			on	 RR.rider_id = R.id
		left join TB_RIDER_SESSION		as RS
			on	 RR.rider_id = RS.rider_id
		left join TB_SUBGROUP_RIDER_REL	as SR
			on	 RR.rider_id = SR.rider_id
		set		 RR.req_status = 4
				,RR.modified_datetime = now()
				,R.deleted = now()
				,SR.deleted = now()
		where	 RR.req_status in (0, 1)
		and		 date_format(ifnull(ifnull(RS.expiry_datetime, RR.exp_datetime), now()), '%Y-%m-%d') <![CDATA[<]]> date_format(now(), '%Y-%m-%d');
	</update>

	<delete id="deleteOverExpDateToken">
		delete from TB_RIDER_SESSION where rider_id in ( select rider_id from TB_REQ_REGIST_RIDER where req_status = 4 and deleted_datetime is null );
	</delete>

	<update id="deleteApprovalRiderRowData" parameterType="kr.co.cntt.core.model.rider.RiderApprovalInfo">
		update	 TB_REQ_REGIST_RIDER
		set      deleted_datetime = now()
		where    req_status in (2, 3, 4)
		and      id = #{id};
	</update>

	<!-- 라이더 인증정보 저장 -->
	<insert id="insertRiderApplySMS" parameterType="kr.co.cntt.core.model.sms.SmsApplyInfo">
		insert into TB_APPLY_SMS(brand_code, login_id, phone, apply_no)
		values(#{brandCode}, #{loginId}, #{phone}, #{applyNo});
	</insert>

	<!-- 라이더 인증정보 업데이트 -->
	<insert id="updateRiderApplySMS" parameterType="kr.co.cntt.core.model.sms.SmsApplyInfo">
		update	 TB_APPLY_SMS
		set		 apply_status = #{applyStatus}
		<if test="applyStatus != null and applyStatus == 1">
				,apply_datetime = now()
		</if>
		where    brand_code = #{brandCode}
		and      phone = #{phone}
		and      apply_no = #{applyNo}
		and      apply_status = 0
		and      login_id = #{loginId}
		and      deleted_datetime is null
		-- and      date_add(created_datetime, interval 60 second) <![CDATA[>=]]> now();
	</insert>

	<!-- 라이더 인증정보 조회 -->
	<select id="selectRiderApplySMS" parameterType="kr.co.cntt.core.model.sms.SmsApplyInfo" resultMap="smsApplyResult">
		select	 created_datetime
				,brand_code
				,login_id
				,phone
				,apply_no
				,apply_status
				,apply_datetime
		from	 TB_APPLY_SMS
		where	 apply_status = 0
		and		 date_add(created_datetime, interval 60 second) <![CDATA[>=]]> now()
		and		 brand_code = #{brandCode}
		and		 phone = #{phone}
		and		 login_id = #{loginId}
		and		 deleted_datetime is null
	</select>

	<!-- 2021-03-05 라이더 Router 관련 Query -->
	<!-- 라이더가 가지고 있는 주문리스트 항목 추출 -->
	<select id="getOrderForRider" parameterType="kr.co.cntt.core.model.rider.Rider" resultMap="selectOrderResult">
		select	 id
				,reg_order_id
				,admin_id
				,store_id
				,rider_id
				,combined_order_id
				,status
				,address
				,latitude
				,longitude
				,reservation_datetime
				,assigned_datetime
				,picked_up_datetime
				,arrived_datetime
				,completed_datetime
				,return_datetime
				,( select brand_code from TB_STORE where id = o.store_id )			as brand_code
				,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and code = ( select brand_code from TB_STORE where id = o.store_id ) )		as brand_name
		from	 TB_ORDER				as o
		where	 reservation_datetime > current_date()
		and		 status not in (0, 4, 5)
		and      third_party_id is null
		and		 return_datetime is null
		and		 rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token} )
	</select>

	<!-- 주문에 대한 스토어 정보를 가져온다 -->
	<select id="getStoreInfoAtOrder" parameterType="java.util.ArrayList" resultType="kr.co.cntt.core.model.store.Store">
		select	 id
				,admin_id			as adminId
				,store_name			as storeRealName
				,address			as address
				,latitude			as latitude
				,longitude			as longitude
				,brand_code			as brandCode
				,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and code = s.brand_code )		as brandName
		from	 TB_STORE		as s
		where	 1=1
		and      id IN
		<foreach collection="array" item="storeIdItem" index="index" separator="," open="(" close=")">
			#{storeIdItem}
		</foreach>
	</select>

	<!-- 등록된 라이더 정보가 있는지 확인한다 -->
	<select id="selectRegistRiderInfoList" parameterType="kr.co.cntt.core.model.login.User" resultMap="selectSubgroupRiderRelsResult">
		select	 id
				,name
				,phone
				,login_id
				,admin_id
				,( select store_id from TB_SUBGROUP_RIDER_REL where rider_id = R.id )		as store_id
				,created_datetime	as location_updated
		from	 TB_RIDER			as R
		where	 login_id = #{loginId}
		and		 deleted is null;
	</select>

	<!-- 21.05.21 라이더의 타매장 정보 기입 -->
	<insert id="insertSharedStoreInfo" parameterType="kr.co.cntt.core.model.rider.Rider">
		insert into TB_RIDER_SHARED_INFO(created_datetime, apply_user_type, admin_id, rider_id, group_id, subgroup_id, store_id)
		values(now(), #{type}, #{adminId}, #{id}, #{subGroupStoreRel.groupId}, #{subGroupStoreRel.subGroupId}, #{sharedStoreId})
	</insert>

	<update id="deleteSharedStoreInfo" parameterType="kr.co.cntt.core.model.rider.Rider">
		update 	 TB_RIDER_SHARED_INFO
		set		 deleted = now()
				,modified_datetime = now()
		where 	 created_datetime > current_date()
		and		 deleted is null
		and		 rider_id = #{id}
	</update>

	<update id="updateResetSharedRiderForStore">
		update	 TB_RIDER					a
				,TB_RIDER_SHARED_INFO		b
		set		 a.store_shared = 0
				,a.modified_datetime = now()
		where	 a.id = b.rider_id
		and		 a.deleted is null
		and		 b.deleted is null
		and		 a.store_shared = 1
		and		 b.created_datetime <![CDATA[<]]> current_date()
		and		 a.id not in ( select rider_id from TB_RIDER_SHARED_INFO where deleted is null and created_datetime > current_date() );
	</update>

	<select id="selectRiderActiveInfo" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="kr.co.cntt.core.model.rider.RiderActiveInfo">
		select	 orderCount
				,time_format(sec_to_time(avgD7Times), if(avgD7Times >= 3600, '%h:%i:%s', '%i:%s'))						as avgD7Times
				,avgD7
				,time_format(sec_to_time(avgD30Times), if(avgD30Times>= 3600, '%h:%i:%s', '%i:%s'))						as avgD30Times
				,avgD30
				,tpoh
		from	(
					select	 count(*)																																				as orderCount
							,ifnull(round(avg(timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime)), 0), 0)																	as avgD7Times
							,ifnull(concat(round((sum(case WHEN timestampdiff(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) <![CDATA[<]]> case when brand_code = 1 then 14 else 7 end THEN 1 else 0 end )	/ count(*)) * 100, 1), '%'), 0)	as avgD7
							,ifnull(round(avg(timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime)), 0), 0)																		as avgD30Times
							,ifnull(concat(round((sum(case WHEN timestampdiff(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime) <![CDATA[<=]]> 30 THEN 1 else 0 end )	/ count(*)) * 100, 1), '%'), 0)	as avgD30
							,ifnull(round((count(*) / (timestampdiff(second, min(working_on), ifnull(max(working_off), now())) / 3600)), 1), 0)												as tpoh
					from	 TB_ORDER			as a
							,(
								select	 rider_id																	as rider_id
										,min(working_on)															as working_on
										,max(ifnull(working_off, now()))											as working_off
										,sum(timestampdiff(second, working_on, ifnull(working_off, now())) )		as working_time
								from	 TB_RIDER_WORKING_HISTORY
								where	 1=1
								and		 rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token} )
								and		 case when working_off is not null and date_format(working_off, '%Y-%m-%d') <![CDATA[<>]]> date_format(working_on, '%Y-%m-%d') then working_on else ifnull(working_off, now()) end > current_date()
								group by rider_id
							)								as b
					left join
							(
								select	 t1.admin_id
										,t1.group_id
										,t1.subgroup_id
										,t1.store_id
										,t1.rider_id
										,t2.brand_code
								from	 TB_SUBGROUP_RIDER_REL			as t1
										,TB_STORE						as t2
								where	 t1.deleted is null
								and		 t2.deleted is null
								and		 t1.admin_id = t2.admin_id
								and		 t1.store_id = t2.id
							)								as c
						on	 b.rider_id = c.rider_id
					where	 a.rider_id = b.rider_id
					and		 a.status = 3
					and 	 a.third_party_id is null
					and		 a.reservation_datetime > current_date()
				)	t
	</select>

	<insert id="insertRiderSharedHistory" parameterType="kr.co.cntt.core.model.rider.RiderSharedInfo">
		insert into TB_RIDER_SHARED_STATUS_HISTORY(rider_id, req_user, shared_type, before_status, after_status)
		values (#{riderId}, #{reqUser}, #{sharedType}, #{beforeStatus}, #{afterStatus})
	</insert>

	<!-- 22.01.17 라이더 PUSH 히스토리 Check -->
	<select id="selectSendRiderPushInfo" parameterType="hashmap" resultType="String">
		select   ifnull(push_target, 'unknown')		as push_target
		from     TB_CHECK_RIDER_PUSH_INFO
		where    1=1
		and      rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token} )
		and      order_id = #{orderId}
	</select>

	<!-- 22.01.17 라이더 PUSH 히스토리 저장 -->
	<insert id="insertSendRiderPushInfo" parameterType="hashmap">
		insert into TB_CHECK_RIDER_PUSH_INFO(rider_id, order_id, push_target, latitude, longitude)
		select   rider_id
				,#{orderId}
				,#{pushTarget}
				,#{riderLatitude}
				,#{riderLongitude}
		from     TB_RIDER_SESSION
		where    access_token = #{token}
	</insert>

	<!-- 22.01.25 비콘에 근접하여 PUSH를 전송했는지 확인 -->
	<select id="checkBeaonPush" parameterType="hashmap" resultType="Integer">
		select   count(*)
		from     TB_CHECK_BEACON_PUSH_HISTORY
		where    1=1
		and      sendDatetime > date_sub(current_date(), interval 1 day)
		and      rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token} )
		and      beaconId = #{uuid}
		and      major = #{major}
		and      minor = #{minor}
		and      check_next_push = 1
		and      sendDatetime >= date_sub(current_timestamp(), interval 1 minute)
	</select>

	<insert id="insertBeaconPushHistory" parameterType="hashmap">
		insert into TB_CHECK_BEACON_PUSH_HISTORY(
			 rider_id
			,beaconId
			,major
			,minor
			,rssi
			,push_target
			,sendDatetime
			,latitude
			,longitude
			,check_next_push
		) values (
			 ( select rider_id from TB_RIDER_SESSION where access_token = #{token} )
			,#{uuid}
			,#{major}
			,#{minor}
			,#{rssi}
			,#{pushTarget}
			,now()
			,#{latitude}
			,#{longitude}
			,1
		)
	</insert>

	<!-- 라이더가 배달 중이었는지 확인하기 -->
	<select id="checkRiderDelivery" parameterType="hashmap" resultType="Integer">
		select   count(*)
		from     TB_RIDER               as a
		left join TB_ORDER              as b
			on   a.admin_id = b.admin_id
			and  a.id = b.rider_id
		where    1=1
		and      a.id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token})
		and      b.created_datetime > current_date()
		and (   (b.status = 3 and b.return_datetime is null) )
<!--		&#45;&#45; 2022-02-18 라이더가 다른 매장으로도 복귀할 가능성이 있음 스토어 체크는 제외하기-->
<!--		&#45;&#45; and (   (b.status = 3 and ifnull(b.return_datetime, now()) >= date_sub(current_timestamp(), interval 1 minute)) )-->
<!--		&#45;&#45; and      b.store_id in ( select id from TB_STORE where deleted is null and admin_id = a.admin_id and beaconId = #{uuid} and major = #{major} and minor = #{minor} )-->
	</select>
</mapper>
