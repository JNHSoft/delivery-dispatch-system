<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.OrderMapper">

    <!-- selectRidersResult -->
    <resultMap id="selectOrdersResult" type="kr.co.cntt.core.model.order.Order">
        <result property="id" column="id" />
        <result property="createdDatetime" column="created_datetime" />
        <result property="storeId" column="store_id" />
        <result property="riderId" column="rider_id" />
        <result property="address" column="address" />
        <result property="detailAddress" column="detail_address" />
        <result property="status" column="status" />
        <result property="menuName" column="menu_name" />
        <result property="cookingTime" column="cooking_time" />
        <result property="paid" column="paid" />
        <result property="reservationDatetime" column="reservation_datetime" />
        <result property="assignedDatetime" column="assigned_datetime" />
        <result property="pickedUpDatetime" column="picked_up_datetime" />

        <association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
            <result property="id" column="riderId" />
            <result property="name" column="riderName" />
        </association>
    </resultMap>


	<!-- selectRiderResult -->
	<resultMap id="selectOrderInfoResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="createdDatetime" column="created_datetime" />
		<result property="status" column="status" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detail_address" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="menuName" column="menu_name" />
		<result property="menuPrice" column="menu_price" />
		<result property="deliveryPrice" column="delivery_price" />
		<result property="totalPrice" column="total_price" />
		<result property="cookingTime" column="cooking_time" />
		<result property="paid" column="paid" />
		<result property="message" column="message" />
		<result property="phone" column="phone" />
		<result property="reservationDatetime" column="reservation_datetime" />
		<result property="assignedDatetime" column="assigned_datetime" />
		<result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="completedDatetime" column="completed_datetime" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="device_os" column="device_os" />

		<association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
			<result property="id" column="riderId" />
			<result property="name" column="riderName" />
		</association>
	</resultMap>


	<!-- insertOrder -->
    <insert id="insertOrder" parameterType="kr.co.cntt.core.model.order.Order">
		INSERT INTO TB_ORDER (
			admin_id
			, store_id
			, address
			, area_address
			, district_address
			, street_address
			, estate_address
			, building_address
			, detail_address
			, latitude
			, longitude
			, cooking_time
			, menu_name
			, menu_price
			, delivery_price
			, total_price
			, paid
			, message
			, phone
			, reservation_datetime
			, device_os
			, status
			, created_datetime
		) VALUES(
			(SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
			, (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
			, #{address}
			, #{areaAddress}
			, #{districtAddress}
			, #{streetAddress}
			, #{estateAddress}
			, #{buildingAddress}
			, #{detailAddress}
			, #{latitude}
			, #{longitude}
			, #{cookingTime}
			, #{menuName}
			, #{menuPrice}
			, #{deliveryPrice}
			, #{totalPrice}
			, #{paid}
			, #{message}
			, #{phone}
			, #{reservationDatetime}
			, #{deviceOs}
			, #{status}
			, now()
	  	)
	</insert>


	<!-- selectOrders -->
	<select id="selectOrders" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrdersResult">
		SELECT
			A.id
			, A.created_datetime
            , A.store_id
            , A.rider_id
			, A.address
		    , A.detail_address
			, A.status
			, A.menu_name
			, A.cooking_time
			, A.paid
			, A.reservation_datetime
			, A.assigned_datetime
			, A.picked_up_datetime
			, A.rider_id AS riderId
            , B.name AS riderName
-- 			, @RNUM := @RNUM + 1 AS RNUM
		FROM TB_ORDER AS A
        LEFT JOIN TB_RIDER AS B
        ON A.rider_id = B.id
        LEFT JOIN TB_SUBGROUP_STORE_REL AS C
        ON A.store_id = C.store_id
-- 		, (SELECT @RNUM := 0) E
		WHERE
			<choose>
				<when test="currentDatetime != null and currentDatetime != ''">
					A.created_datetime > date_sub(#{currentDatetime}, interval #{days} - 1 day)
				</when>
				<otherwise>
					A.created_datetime > CURRENT_DATE()
					OR A.reservation_datetime > CURRENT_DATE()
				</otherwise>
			</choose>
			<if test="status != null and status != ''">
				AND A.status IN
				<foreach collection="statusArray" item="statusItem" index="index" separator="," open="(" close=")">
					#{statusItem}
				</foreach>
			</if>

			<choose>
				<when test="role != null and role == 'ROLE_STORE'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                    AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
                    AND C.deleted IS NULL
				</when>
				<when test="role != null and role == 'ROLE_RIDER'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                    AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_RIDER_REL WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                    AND C.deleted IS NULL
                </when>
				<otherwise>
					AND A.id IS NULL
				</otherwise>
			</choose>
		ORDER BY A.reservation_datetime DESC, A.assigned_first DESC, A.created_datetime DESC
	</select>


	<!-- selectOrderInfo -->
	<select id="selectOrderInfo" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectOrderInfoResult">
		SELECT
            A.id
            , A.created_datetime
			, A.status
			, A.store_id
            , A.rider_id
            , A.address
            , A.detail_address
            , A.latitude
            , A.longitude
			, A.cooking_time
            , A.menu_name
            , A.menu_price
			, A.delivery_price
			, A.total_price
            , A.paid
            , A.message
            , A.phone
            , A.reservation_datetime
            , A.assigned_datetime
            , A.picked_up_datetime
            , A.completed_datetime
            , A.combined_order_id
            , A.device_os
			, A.rider_id AS riderId
			, B.name AS riderName
		FROM TB_ORDER AS A
		LEFT JOIN TB_RIDER AS B
		ON A.rider_id = B.id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON A.store_id = C.store_id
		WHERE A.id = #{id}
			<choose>
				<when test="role != null and role == 'ROLE_STORE'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
					AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
					AND C.deleted IS NULL
				</when>
				<when test="role != null and role == 'ROLE_RIDER'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
					AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_RIDER_REL WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
					AND C.deleted IS NULL
				</when>
				<otherwise>
					AND A.id IS NULL
				</otherwise>
			</choose>
	</select>


	<!-- updateOrder -->
	<update id="updateOrder" parameterType="kr.co.cntt.core.model.order.Order">
		UPDATE TB_ORDER AS A
		LEFT JOIN TB_RIDER AS B
		ON A.rider_id = B.id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON A.store_id = C.store_id
		SET
			A.modified_datetime = now()
			<if test="riderId != null and riderId != '' and riderId != '-1'">
				, A.rider_id = #{riderId}
			</if>
			<if test="riderId == '-1'">
				, A.rider_id = NULL
			</if>
			<if test="address != null and address != ''">
				, A.address = #{address}
			</if>
			<if test="areaAddress != null and areaAddress != ''">
				, A.area_address = #{areaAddress}
			</if>
			<if test="districtAddress != null and districtAddress != ''">
				, A.district_address = #{districtAddress}
			</if>
			<if test="streetAddress != null and streetAddress != ''">
				, A.street_address = #{streetAddress}
			</if>
			<if test="estateAddress != null and estateAddress != ''">
				, A.estate_address = #{estateAddress}
			</if>
			<if test="buildingAddress != null and buildingAddress != ''">
				, A.building_address = #{buildingAddress}
			</if>
			<if test="detailAddress != null and detailAddress != ''">
				, A.detail_address = #{detailAddress}
			</if>
			<if test="latitude != null and latitude != ''">
				, A.latitude = #{latitude}
			</if>
			<if test="longitude != null and longitude != ''">
				, A.longitude = #{longitude}
			</if>
			<if test="status != null and status != ''">
				, A.status = #{status}
			</if>
			<if test="cookingTime != null and cookingTime != ''">
				, cooking_time = #{cookingTime}
			</if>
			<if test="menuName != null and menuName != ''">
				, A.menu_name = #{menuName}
			</if>
			<if test="menuPrice != null and menuPrice != ''">
				, A.menu_price = #{menuPrice}
			</if>
			<if test="deliveryPrice != null and deliveryPrice != ''">
				, A.delivery_price = #{deliveryPrice}
			</if>
			<if test="totalPrice != null and totalPrice != ''">
				, A.total_price = #{totalPrice}
			</if>
			<if test="paid != null and paid != ''">
				, A.paid = #{paid}
			</if>
			<if test="message != null and message != ''">
				, A.message = #{message}
			</if>
			<if test="phone != null and phone != ''">
				, A.phone = #{phone}
			</if>
			<if test="reservationDatetime != null and reservationDatetime != ''">
				, A.reservation_datetime = #{reservationDatetime}
			</if>
			<if test="assignedDatetime != null and assignedDatetime != '' and assignedDatetime != '-1'">
				, A.assigned_datetime = now()
			</if>
			<if test="assignedDatetime == '-1'">
				, A.assigned_datetime = NULL
			</if>
			<if test="pickedUpDatetime != null and pickedUpDatetime != '' and pickedUpDatetime != '-1'">
				, A.picked_up_datetime = #{pickedUpDatetime}
			</if>
			<if test="pickedUpDatetime == '-1'">
				, A.picked_up_datetime = NULL
			</if>
			<if test="completedDatetime != null and completedDatetime != ''">
				, A.completed_datetime = #{completedDatetime}
			</if>
			<if test="combinedOrderId != null and combinedOrderId != ''">
				, A.combined_order_id = #{combinedOrderId}
			</if>
			<if test="deviceOs != null and deviceOs != ''">
				, A.device_os = #{deviceOs}
			</if>
			<if test="role == 'ROLE_STORE' and assignedFirst == 'True'">
				, A.assigned_first = (SELECT * FROM (SELECT IFNULL(MAX(assigned_first), 0) + 1 FROM TB_ORDER) AS D)
			</if>
		WHERE A.id = #{id}
			<choose>
				<when test="role != null and role == 'ROLE_STORE'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
					AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
					AND C.deleted IS NULL
				</when>
				<when test="role != null and role == 'ROLE_RIDER'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
					AND C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_RIDER_REL WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
					AND C.deleted IS NULL
				</when>
				<otherwise>
					AND A.id IS NULL
				</otherwise>
			</choose>
	</update>


	<!-- selectOrderIsApprovalCompleted -->
	<select id="selectOrderIsApprovalCompleted" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_ORDER AS A INNER JOIN TB_PAYMENT AS B
		ON A.id = B.order_id
		WHERE A.id = #{id}
			AND B.status = 0
	</select>


	<!-- selectOrderIsCompletedIsCanceled -->
	<select id="selectOrderIsCompletedIsCanceled" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_ORDER
		WHERE id = #{id}
			AND (status = 3 OR status = 4)
	</select>


	<!-- insertOrderConfirm -->
    <insert id="insertOrderConfirm" parameterType="kr.co.cntt.core.model.order.Order">
        INSERT INTO TB_ORDER_CONFIRM_ASSIGNMENT (
          created_datetime
          , confirmed_datetime
          , admin_id
          , store_id
          , rider_id
          , order_id
        ) VALUES (
          now()
          , now()
          , (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
          , (
              SELECT store_id
              FROM TB_SUBGROUP_RIDER_REL
              WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
                  AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
                  AND deleted IS NULL
            )
          , (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
          , #{id}
        )
    </insert>


    <!-- insertOrderDeny -->
    <insert id="insertOrderDeny" parameterType="kr.co.cntt.core.model.order.Order">
        INSERT INTO TB_ORDER_DENY_ASSIGNMENT (
          created_datetime
          , denied_datetime
          , admin_id
          , store_id
          , rider_id
          , order_id
          , status
        ) VALUES (
          now()
          , now()
          , (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
          , (
              SELECT store_id
              FROM TB_SUBGROUP_RIDER_REL
              WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
                  AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
              	  AND deleted IS NULL
            )
          , (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
          , #{id}
          , #{orderCheckAssignment.status}
        )
    </insert>


    <!-- selectOrderConfirm -->
    <select id="selectOrderConfirm" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.order.OrderCheckAssignment">
        SELECT
          order_id
          , rider_id
          , confirmed_datetime
        FROM TB_ORDER_CONFIRM_ASSIGNMENT
        WHERE order_id = #{id}
    </select>


    <!-- selectOrderDeny -->
    <select id="selectOrderDeny" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.order.OrderCheckAssignment">
        SELECT
          order_id
          , rider_id
          , denied_datetime
        FROM TB_ORDER_DENY_ASSIGNMENT
        WHERE order_id = #{id}
    </select>


    <!-- selectOrderDenyCount -->
    <select id="selectOrderDenyCount" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="int">
        SELECT COUNT(A.status)
        FROM TB_ORDER_DENY_ASSIGNMENT AS A
        LEFT JOIN TB_RIDER AS B
        ON A.rider_id = B.id
        WHERE A.rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
        	AND A.status = 1
        	AND A.denied_datetime > B.last_access
        	AND A.denied_datetime > CURRENT_DATE()
    </select>

</mapper>
 