<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.OrderMapper">

    <!-- selectRidersResult -->
    <resultMap id="selectOrdersResult" type="kr.co.cntt.core.model.order.Order">
        <result property="id" column="id" />
        <result property="regOrderId" column="reg_order_id" />
        <result property="createdDatetime" column="created_datetime" />
		<result property="modifiedDatetime" column="modified_datetime" />
        <result property="storeId" column="store_id" />
        <result property="riderId" column="rider_id" />
        <result property="address" column="address" />
        <result property="detailAddress" column="detail_address" />
        <result property="status" column="status" />
        <result property="menuName" column="menu_name" />
		<result property="menuPrice" column="menu_price" />
		<result property="assignedFirst" column="assigned_first" />
		<result property="deliveryPrice" column="delivery_price" />
		<result property="totalPrice" column="total_price" />
        <result property="cookingTime" column="cooking_time" />
        <result property="paid" column="paid" />
        <result property="reservationDatetime" column="reservation_datetime" />
        <result property="reservationStatus" column="reservation_status" />
        <result property="assignedDatetime" column="assigned_datetime" />
        <result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="arrivedDatetime" column="arrived_datetime" />
		<result property="completedDatetime" column="completed_datetime" />
        <result property="returnDatetime" column="return_datetime" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="count" column="count" />
		<result property="phone" column="phone" />
		<result property="message" column="message" />

        <association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
            <result property="id" column="rider_id" />
            <result property="name" column="rider_name" />
			<result property="latitude" column="rider_latitude" />
			<result property="longitude" column="rider_longitude" />
			<result property="sharedStatus" column="sharedStatus" />
        </association>

		<association property="subGroupStoreRel" column="subGroupStoreRel" javaType="kr.co.cntt.core.model.group.SubGroupStoreRel">
            <result property="subGroupId" column="subgroup_id" />
        </association>

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="store_id" />
			<result property="adminId" column="admin_id" />
			<result property="storeName" column="store_name" />
			<result property="storeRealName" column="store_real_name" />
			<result property="latitude" column="store_latitude" />
			<result property="longitude" column="store_longitude" />
			<result property="radius" column="radius" />
			<result property="assignmentLimit" column="assignment_limit" />
			<result property="storeDistanceSort" column="store_distance_sort" />
			<result property="brandCode" column="brand_code" />
			<result property="code" column="store_code" />

			<result property="storeShared" column="storeShared" />
		</association>

		<association property="thirdParty" column="thirdParty" javaType="kr.co.cntt.core.model.thirdParty.ThirdParty">
			<result property="id" column="third_party_id" />
			<result property="name" column="third_party_name" />
		</association>

    </resultMap>


	<!-- selectRiderResult -->
	<resultMap id="selectOrderInfoResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="regOrderId" column="reg_order_id" />
		<result property="createdDatetime" column="created_datetime" />
		<result property="status" column="status" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detail_address" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="menuName" column="menu_name" />
		<result property="menuPrice" column="menu_price" />
		<result property="deliveryPrice" column="delivery_price" />
		<result property="totalPrice" column="total_price" />
		<result property="cookingTime" column="cooking_time" />
		<result property="paid" column="paid" />
		<result property="message" column="message" />
		<result property="phone" column="phone" />
		<result property="reservationDatetime" column="reservation_datetime" />
		<result property="reservationStatus" column="reservation_status" />
		<result property="assignedDatetime" column="assigned_datetime" />
		<result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="arrivedDatetime" column="arrived_datetime" />
		<result property="completedDatetime" column="completed_datetime" />
        <result property="returnDatetime" column="return_datetime" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="device_os" column="device_os" />
		<result property="distance" column="distance" />
		<result property="appType" column="app_type" />
		<result property="platform" column="os" />

		<association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
			<result property="id" column="rider_id" />
			<result property="name" column="rider_name" />
		</association>

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="id" column="store_id" />
			<result property="storeName" column="store_name" />
			<result property="storeRealName" column="store_real_name" />
			<result property="latitude" column="store_latitude" />
			<result property="longitude" column="store_longitude" />
			<result property="longitude" column="store_longitude" />
			<result property="address" column="store_address" />
			<result property="detailAddress" column="store_detail_address" />
			<result property="storeDistanceSort" column="store_distance_sort" />
			<result property="brandCode" column="brand_code" />
			<result property="phone" column="store_phone" />
		</association>


		<association property="thirdParty" column="thirdParty" javaType="kr.co.cntt.core.model.thirdParty.ThirdParty">
			<result property="id" column="third_party_id" />
			<result property="name" column="third_party_name" />
		</association>
	</resultMap>

	<resultMap id="selectReservationOrdersResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="adminId" column="admin_id" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
		</association>
	</resultMap>

	<!-- insertOrder -->
    <insert id="insertOrder" parameterType="kr.co.cntt.core.model.order.Order">
		INSERT INTO TB_ORDER (
			admin_id
			, store_id
			, address
			, area_address
			, district_address
			, street_address
			, estate_address
			, building_address
			, detail_address
			, latitude
			, longitude
			, cooking_time
			, menu_name
			, menu_price
			, delivery_price
			, total_price
			, paid
			, message
			, phone
			, reservation_datetime
			, device_os
			, status
			, reg_order_id
			, web_order_id
			, created_datetime
			, distance
			, reservation_status
		) VALUES(
			(SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
			, (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
			, #{address}
			, #{areaAddress}
			, #{districtAddress}
			, #{streetAddress}
			, #{estateAddress}
			, #{buildingAddress}
			, #{detailAddress}
			, #{latitude}
			, #{longitude}
			, #{cookingTime}
			, #{menuName}
			, #{menuPrice}
			, #{deliveryPrice}
			, #{totalPrice}
			, #{paid}
			, #{message}
			, #{phone}
			, #{reservationDatetime}
			, #{deviceOs}
			, #{status}
			, #{regOrderId}
			, #{webOrderId}
			, now()
			, #{distance}
			, #{reservationStatus}
	  	)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- selectOrders  주문리스트 created_datetime에서 reservation_datetime 으로 변경 적용-->
	<select id="selectOrders" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrdersResult">
		select	 A.id
				,A.reg_order_id
				,A.created_datetime
				,ifnull(A.modified_datetime, A.created_datetime)	as modified_datetime
				,A.store_id
				,A.rider_id
				,A.address
				,A.detail_address
				,A.latitude
				,A.longitude
				,A.status
				,A.menu_name
				,A.cooking_time
				,A.paid
				,A.reservation_datetime
				,A.reservation_status
				,A.assigned_datetime
				,A.arrived_datetime
				,A.picked_up_datetime
				,A.arrived_datetime
				,A.completed_datetime
				,A.return_datetime
				,A.menu_price
				,A.total_price
				,A.assigned_first
				,A.combined_order_id
				,A.phone
				,A.message
				,( select name from TB_RIDER where id = A.rider_id )							as rider_name
				,C.name																			as store_name
				,C.store_name																	as store_real_name
				,C.latitude																		as store_latitude
				,C.longitude																	as store_longitude


				-- 2020.05.14 배달 시간 확인을 위한 데이터 추가
				,( select latitude from TB_RIDER where id = A.rider_id and deleted is null)		as rider_latitude
				,( select longitude from TB_RIDER where id = A.rider_id and deleted is null)		as rider_longitude
				-- 2021-10-09 라이더 쉐어 플래그를 가져온다. (단 라이더의 상태값이 바뀔 수 있으므로, 주문 정보에 있는 것으로 추출하기)
				,A.shared_flag																	as sharedStatus

				,A.third_party_id
				,(select name from TB_THIRD_PARTY where id = A.third_party_id and deleted is null )	as third_party_name
				,C.code																			as store_code
		from	 TB_ORDER	A force index (idx_order_reservation_admin, idx_order_created_admin, reg_order_id_UNIQUE, web_order_id_UNIQUE, `PRIMARY`)
		left join TB_SUBGROUP_STORE_REL	B
			ON	 A.store_id = B.store_id
			AND	 B.deleted is null
		left join TB_STORE	C
			on	 A.store_id = C.id
			and	 C.deleted is null
		where	 reservation_datetime > current_date()
		and		 date_format(date_add(now(), interval 2 hour), '%Y-%m-%d %H:%i') > date_format(ifnull(reservation_datetime, now()), '%Y-%m-%d %H:%i')
		<if test="status != null and status != ''">
			AND A.status IN
			<foreach collection="statusArray" item="statusItem" index="index" separator="," open="(" close=")">
				#{statusItem}
			</foreach>
		</if>
		<if test="modifiedDatetime != null and modifiedDatetime != ''">
			AND ifnull(A.modified_datetime,A.created_datetime) > #{modifiedDatetime}
		</if>
		<if test="id != null and id != ''">
			AND A.id = #{id}
		</if>
		<choose>
			<when test="role != null and role == 'ROLE_STORE'">
				<!--Store에서 보여져야 될 내용 - 기존과 동일, 다른 관리자 소속의 매장 주문 미 노출-->
				and		 B.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}) AND deleted is null)
				and	(	(B.subgroup_id in ( select subgroup_id from TB_SUBGROUP_STORE_REL where admin_id = A.admin_id and store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}) and deleted is null))
					<!--		UAT 적용-->
					<!--		<if test="storeId != null and storeId == '13'">-->
					<!--			or	(B.store_id in (6, 14))-->
					<!--		</if>-->
					<!--		<if test="storeId != null and (storeId == '6' or storeId == '14')">-->
					<!--			or	(B.store_id in (13))-->
					<!--		</if>-->
					<!--		REAL 적용-->
					<if test="storeId != null and storeId == '386'">
						or	(B.store_id in (39, 67))
					</if>
					<if test="storeId != null and (storeId == '39' or storeId == '67')">
						or	(B.store_id in (386))
					</if>
					)
			</when>
			<!--서브그룹이 없을때 오류 적용 Nick-->
			<when test="role != null and role == 'ROLE_RIDER'">
				<!-- Rider에게 보여져야 될 내용 -->
				and		 A.rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token})
			</when>
			<otherwise>
				AND A.id IS NULL
			</otherwise>
		</choose>
		<choose>
			<when test="role != null and role == 'ROLE_RIDER'">
				ORDER BY A.reservation_datetime
			</when>
			<otherwise>
				ORDER BY CASE WHEN A.status in (0,5) THEN A.assigned_first END DESC, CASE WHEN A.status in (0,5) THEN A.reservation_datetime END DESC, A.status in (0,5) desc, A.status ASC,  A.reservation_datetime DESC, A.assigned_first DESC, A.created_datetime DESC
			</otherwise>
		</choose>
	</select>

	<!-- select Order History -->
	<select id="selectOrderHistory" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrdersResult">
		select	 A.id
				,A.reg_order_id
				,A.created_datetime
				,ifnull(A.modified_datetime, A.created_datetime)	as modified_datetime
				,A.store_id
				,A.rider_id
				,A.address
				,A.status
				,A.menu_name
				,A.reservation_datetime
				,A.assigned_datetime
				,A.arrived_datetime
				,A.picked_up_datetime
				,A.arrived_datetime
				,A.completed_datetime
				,A.return_datetime
				,A.menu_price
				,A.message
				,C.name																			as store_name
				,C.store_name																	as store_real_name
		from	 TB_ORDER	A
		left join TB_STORE	C
			on	 A.store_id = C.id
			and	 C.deleted is null
		where	 date_format(reservation_datetime, '%Y-%m-%d') between #{startDate} and #{endDate}
		and		 A.rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token})
		and      A.third_party_id is null
		<if test="status != null and status != ''">
			AND A.status IN
			<foreach collection="statusArray" item="statusItem" index="index" separator="," open="(" close=")">
				#{statusItem}
			</foreach>
		</if>
		ORDER BY A.reservation_datetime
	</select>


	<!-- selectOrderInfo -->
	<select id="selectOrderInfo" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectOrderInfoResult">
		SELECT
            A.id
			, A.reg_order_id
            , A.created_datetime
			, A.status
			, A.store_id
            , A.rider_id
            , A.address
            , A.detail_address
            , A.latitude
            , A.longitude
			, A.cooking_time
            , A.menu_name
            , A.menu_price
			, A.delivery_price
			, A.total_price
            , A.paid
            , A.message
            , A.phone
            , A.reservation_datetime
            , A.reservation_status
            , A.assigned_datetime
            , A.picked_up_datetime
			, A.arrived_datetime
            , A.completed_datetime
            , A.return_datetime
            , A.combined_order_id
            , A.device_os
			, A.distance
			, B.id AS rider_id
			, B.name AS rider_name
			, D.name AS store_name
			, D.store_name AS store_real_name
			, D.latitude AS store_latitude
			, D.longitude AS store_longitude
			, D.address AS store_address
			, D.detail_address AS store_detail_address

			, E.id AS third_party_id
			, E.name AS third_party_name

			, B.app_type
			, D.brand_code
			, ( select os from TB_RIDER_SESSION where rider_id = B.id limit 1 )			as os

			, D.store_phone
		FROM TB_ORDER AS A
		LEFT JOIN TB_RIDER AS B
		ON A.rider_id = B.id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON A.store_id = C.store_id
		LEFT JOIN TB_STORE AS D
		ON A.store_id = D.id

		LEFT JOIN TB_THIRD_PARTY AS E
		ON A.third_party_id = E.id

		WHERE A.reg_order_id = #{id}
			<choose>
				<when test="role != null and role == 'ROLE_STORE'">
					AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
<!--					AND IF((SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token} order by created_datetime desc limit 1) ORDER BY created_datetime DESC LIMIT 1) IS NOT NULL-->
<!--						, C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token} order by created_datetime desc limit 1) ORDER BY created_datetime DESC LIMIT 1)-->
<!--						, C.subgroup_id IS NULL AND D.id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))-->
					<!--AND C.deleted IS NULL-->
				</when>
				<!--서브그룹이 없을때 오류 적용 Nick-->
				<when test="role != null and role == 'ROLE_RIDER'">
					and   A.rider_id = ( select rider_id from TB_RIDER_SESSION where access_token = #{token})
				</when>
				<!--자동 배정 시 주문 내역을 다시 확인하기 위한 용도-->
				<when test="role != null and role == 'ROLE_SYSTEM'">
					and   A.rider_id is not null
				</when>
				<otherwise>
					AND A.id IS NULL
				</otherwise>
			</choose>
	</select>

	<!-- updateOrderThirdParty -->
	<update id="updateOrderThirdParty" parameterType="kr.co.cntt.core.model.order.Order">
		UPDATE TB_ORDER
		SET
		modified_datetime = now()

		<if test="thirdParty != null ">
			, third_party_id = #{thirdParty.id}
			, status = 3
		</if>
		<if test="combinedOrderId != null and combinedOrderId != '' and combinedOrderId != '-1'">
			, combined_order_id = #{combinedOrderId}
		</if>
		<if test="combinedOrderId == '-1'">
			, combined_order_id = NULL
		</if>

		<choose>
			<when test="role != null and role == 'ROLE_SYSTEM'">
				WHERE reg_order_id = #{id}
			</when>
			<when test="role != null and role == 'ROLE_STORE'">
				WHERE reg_order_id = #{id}
				AND store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
			</when>
			<otherwise>
				WHERE id IS NULL
			</otherwise>
		</choose>
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</update>



	<!-- updateOrder -->
	<update id="updateOrder" parameterType="kr.co.cntt.core.model.order.Order">
		UPDATE TB_ORDER
		SET
		modified_datetime = now()
		<if test="riderId != null and riderId != '' and riderId != '-1'">
			, rider_id = #{riderId}
		</if>
		<if test="riderId == '-1'">
			, rider_id = NULL
		</if>

		<if test="rider != null and rider.sharedStatus != null and rider.sharedStatus != '' and riderId != '-1'">
			,shared_flag = #{rider.sharedStatus}
		</if>
		<if test="riderId == '-1'">
			, shared_flag = NULL
		</if>

		<if test="address != null and address != ''">
			, address = #{address}
		</if>
		<if test="areaAddress != null and areaAddress != ''">
			, area_address = #{areaAddress}
		</if>
		<if test="districtAddress != null and districtAddress != ''">
			, district_address = #{districtAddress}
		</if>
		<if test="streetAddress != null and streetAddress != ''">
			, street_address = #{streetAddress}
		</if>
		<if test="estateAddress != null and estateAddress != ''">
			, estate_address = #{estateAddress}
		</if>
		<if test="buildingAddress != null and buildingAddress != ''">
			, building_address = #{buildingAddress}
		</if>
		<if test="detailAddress != null and detailAddress != ''">
			, detail_address = #{detailAddress}
		</if>
		<if test="latitude != null and latitude != ''">
			, latitude = #{latitude}
		</if>
		<if test="longitude != null and longitude != ''">
			, longitude = #{longitude}
		</if>
		<if test="status != null and status != ''">
			, status = #{status}
		</if>
<!--		<if test="cookingTime != null and cookingTime != ''">-->
<!--			, cooking_time = #{cookingTime}-->
<!--		</if>-->
		<if test="menuName != null and menuName != ''">
			, menu_name = #{menuName}
		</if>
		<if test="menuPrice != null and menuPrice != ''">
			, menu_price = #{menuPrice}
		</if>
		<if test="deliveryPrice != null and deliveryPrice != ''">
			, delivery_price = #{deliveryPrice}
		</if>
		<if test="totalPrice != null and totalPrice != ''">
			, total_price = #{totalPrice}
		</if>
		<if test="paid != null and paid != ''">
			, paid = #{paid}
		</if>
		<if test="message != null and message != ''">
			, message = #{message}
		</if>
		<if test="phone != null and phone != ''">
			, phone = #{phone}
		</if>
		<if test="reservationDatetime != null and reservationDatetime != ''">
			, reservation_datetime = #{reservationDatetime}
		</if>
		<if test="assignedDatetime != null and assignedDatetime != '' and assignedDatetime != '-1' and assignedDatetime != '-2'">
			, assigned_datetime = #{assignedDatetime}
		</if>
		<if test="assignedDatetime == '-2'">
			, assigned_datetime = ifnull(assigned_datetime, now())
			-- , assigned_datetime = ifnull(assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) >= 30 then 30 else ifnull(cooking_time, 30) end minute))
		</if>
		<if test="assignedDatetime == '-1'">
			, assigned_datetime = NULL
		</if>
		<if test="pickedUpDatetime != null and pickedUpDatetime != '' and pickedUpDatetime != '-1'">
			, picked_up_datetime = #{pickedUpDatetime}
		</if>
		<if test="pickedUpDatetime == '-1'">
			, picked_up_datetime = NULL
		</if>
		<if test="arrivedDatetime != null and arrivedDatetime != '' and arrivedDatetime != '-1'">
			, arrived_datetime = #{arrivedDatetime}
		</if>
		<if test="arrivedDatetime == '-1'">
			, arrived_datetime = NULL
		</if>
		<if test="completedDatetime != null and completedDatetime != ''">
			, completed_datetime = #{completedDatetime}
		</if>
		<if test="combinedOrderId != null and combinedOrderId != '' and combinedOrderId != '-1'">
			, combined_order_id = #{combinedOrderId}
		</if>
		<if test="combinedOrderId == '-1'">
			, combined_order_id = NULL
		</if>
		<if test="deviceOs != null and deviceOs != ''">
			, device_os = #{deviceOs}
		</if>
		<if test="role == 'ROLE_STORE' and assignedFirst == 'True'">
			, assigned_first = (SELECT * FROM (SELECT IFNULL(MAX(assigned_first), 0) + 1 FROM TB_ORDER) AS D)
		</if>
		<if test="assignXy != null and assignXy != '' and assignXy != 'none'">
			, assign_xy = #{assignXy}
		</if>
		<if test="assignXy != null and assignXy != '' and assignXy == 'none'">
			, assign_xy = NULL
		</if>
		<if test="pickupXy != null and pickupXy != ''">
			, pickup_xy = #{pickupXy}
		</if>
		<if test="completeXy != null and completeXy != ''">
			, complete_xy = #{completeXy}
		</if>
		<if test="returnDatetime != null and returnDatetime != ''">
			, return_datetime = now()
		</if>
		<if test="thirdParty != null and thirdParty != ''">
			, third_party_id = #{thirdParty.id}
		</if>
		, id = LAST_INSERT_ID(id)
		<choose>
			<when test="role != null and role == 'ROLE_SYSTEM'">
				WHERE reg_order_id = #{id}
			</when>
			<when test="role != null and role == 'ROLE_STORE'">
				WHERE reg_order_id = #{id}
<!--				AND store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})-->
				<!-- 2021-11-17 라이더 등의 정보 변경 시, 쉐어 매장 간의 수정 허용 -->
				<choose>
					<when test="store != null and store.brandCode == 1">
						and store_id in ( select store_id from TB_SUBGROUP_STORE_REL where subgroup_id in ( select subgroup_id from TB_SUBGROUP_STORE_REL where store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}) and deleted is null ) and deleted is null)
					</when>
					<otherwise>
						AND store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
					</otherwise>
				</choose>
			</when>
			<when test="role != null and role == 'ROLE_RIDER'">
				WHERE reg_order_id = #{id}
				<if test="status eq 1 or status eq 2">
					AND rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
				</if>
			</when>
			<otherwise>
				WHERE id IS NULL
			</otherwise>
		</choose>
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</update>


	<!-- selectOrderIsApprovalCompleted -->
	<select id="selectOrderIsApprovalCompleted" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_ORDER AS A INNER JOIN TB_PAYMENT AS B
		ON A.id = B.order_id
		WHERE A.id = (SELECT id FROM TB_ORDER WHERE reg_order_id=#{id})
			AND B.status = 0
	</select>


	<!-- selectOrderIsCompletedIsCanceled -->
	<select id="selectOrderIsCompletedIsCanceled" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_ORDER
		WHERE reg_order_id=#{id}
			AND status in (3,4)
	</select>

	<!-- selectOrderIsThirdPartyStatus -->
	<!--신규 0 배정 1 취소 후 신규 5 번일때 서드파티 배정가능하도록 적용 Nick-->
	<select id="selectOrderIsThirdPartyStatus" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
		COUNT(*)
		FROM TB_ORDER
		WHERE reg_order_id=#{id}
		AND status in (2,3,4)
	</select>



	<!-- RegOrderIDCheckt reg 오더 중복 체크  -->
	<select id="selectRegOrderIdCheck" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT
		COUNT(*)
		FROM TB_ORDER
		WHERE reg_order_id = #{regOrderId}
	</select>




	<!-- insertOrderConfirm -->
    <insert id="insertOrderConfirm" parameterType="kr.co.cntt.core.model.order.Order">
        INSERT INTO TB_ORDER_CONFIRM_ASSIGNMENT (
          created_datetime
          , confirmed_datetime
          , admin_id
          , store_id
          , rider_id
          , order_id
        ) VALUES (
          now()
          , now()
          , (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
          , (
              SELECT store_id
              FROM TB_SUBGROUP_RIDER_REL
              WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
                  AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
              ORDER BY created_datetime DESC LIMIT 1
            )
          , (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
          , #{id}
        )
    </insert>


    <!-- insertOrderDeny -->
    <insert id="insertOrderDeny" parameterType="kr.co.cntt.core.model.order.Order">
        INSERT INTO TB_ORDER_DENY_ASSIGNMENT (
          created_datetime
          , denied_datetime
          , admin_id
          , store_id
          , rider_id
          , order_id
          , status
          , reason
        ) VALUES (
          now()
          , now()
          , (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
          , (
              SELECT store_id
              FROM TB_SUBGROUP_RIDER_REL
              WHERE rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
                  AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
              ORDER BY created_datetime DESC LIMIT 1
            )
          , (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
          , #{id}
          , #{orderCheckAssignment.status}
          , #{orderCheckAssignment.reason}
        )
    </insert>


    <!-- selectOrderConfirm -->
    <select id="selectOrderConfirm" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.order.OrderCheckAssignment">
        SELECT
          order_id
          , rider_id
          , confirmed_datetime
        FROM TB_ORDER_CONFIRM_ASSIGNMENT
        WHERE order_id = #{id}
    </select>


    <!-- selectOrderDeny -->
    <select id="selectOrderDeny" parameterType="kr.co.cntt.core.model.order.Order" resultType="kr.co.cntt.core.model.order.OrderCheckAssignment">
        SELECT
          order_id
          , rider_id
          , denied_datetime
        FROM TB_ORDER_DENY_ASSIGNMENT
        WHERE order_id = #{id}
    </select>


    <!-- selectOrderDenyCount -->
    <select id="selectOrderDenyCount" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="int">
        SELECT COUNT(A.status)
        FROM TB_ORDER_DENY_ASSIGNMENT AS A
        LEFT JOIN TB_RIDER AS B
        ON A.rider_id = B.id
        WHERE A.rider_id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token})
        	AND A.status = 1
        	AND A.denied_datetime > B.last_access
        	AND A.denied_datetime > CURRENT_DATE()
    </select>

	<!-- selectFooterOrders -->
	<select id="selectFooterOrders" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrdersResult">
		SELECT	 A.status
				,count(*)as count
		FROM	 TB_ORDER	AS	A force index (idx_order_reservation_admin, idx_order_created_admin, reg_order_id_UNIQUE, web_order_id_UNIQUE, `PRIMARY`)
		LEFT JOIN TB_RIDER AS B
			ON	 A.rider_id = B.id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
			ON	 A.store_id = C.store_id
		LEFT JOIN TB_STORE AS D
			ON	 A.store_id = D.id
		WHERE	 A.reservation_datetime > current_date()
		and		 date_format(date_add(now(), interval 2 hour), '%Y-%m-%d %H:%i') > date_format(ifnull(A.reservation_datetime, now()), '%Y-%m-%d %H:%i')
		AND		 A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token} order by created_datetime desc limit 1) and deleted is null limit 1)
		AND	(	(C.subgroup_id = (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token} order by created_datetime desc limit 1) ORDER BY created_datetime DESC LIMIT 1))
			<!--		UAT 적용-->
<!--			<if test="storeId != null and storeId == '13'">-->
<!--				or	(C.store_id in (6, 14))-->
<!--			</if>-->
<!--			<if test="storeId != null and (storeId == '6' or storeId == '14')">-->
<!--				or	(C.store_id in (13))-->
<!--			</if>-->
			<!--		REAL 적용-->
			<if test="storeId != null and storeId == '386'">
				or	(C.store_id in (39, 67))
			</if>
			<if test="storeId != null and (storeId == '39' or storeId == '67')">
				or	(C.store_id in (386))
			</if>
			)
		AND		 C.deleted IS NULL
		group by A.status;
	</select>

	<!-- selectForAssignOrders -->
	<select id="selectForAssignOrders" parameterType="java.util.HashMap" resultMap="selectOrdersResult">
		select	 A.id
				,A.reg_order_id
				,A.created_datetime
				,A.reservation_datetime
				,A.latitude
				,A.longitude
				,A.store_id
				,B.latitude				as store_latitude
				,B.longitude			as store_longitude
				,B.radius
				,B.assignment_limit
				,B.store_distance_sort
				,B.admin_id
				,B.store_name
				,A.address
				,C.subgroup_id          as subgroup_id
				,( select count(*) from TB_SUBGROUP_STORE_REL where deleted is null and admin_id = C.admin_id and group_id = C.group_id and subgroup_id = C.subgroup_id )   as storeShared
				,ifnull(B.brand_code, 0)		as brand_code
		from	 TB_ORDER	A use index (idx_order_created_admin, idx_order_reservation_admin, `PRIMARY`)
		left join TB_STORE	B
			ON	 B.id = A.store_id
		left join TB_SUBGROUP_STORE_REL C
			on   B.id = C.store_id
			and  C.deleted is null
		where	 A.created_datetime > current_date()
		and		 A.status in (0, 5)
		and		 B.deleted is null
		and		 assignment_status = 1
		<choose>
			<when test="locale eq 'zh_TW'">
				and		 timestampdiff(second, now(), A.reservation_datetime) <![CDATA[<=]]> (case when cooking_time <![CDATA[<]]> 30 then cooking_time else 30 end) * 60
			</when>
			<otherwise>
				and		 timestampdiff(second, now(), A.reservation_datetime) <![CDATA[<=]]> (case when cooking_time <![CDATA[<]]> 50 then cooking_time else 50 end) * 60
			</otherwise>
		</choose>
		ORDER BY A.reservation_datetime DESC, A.assigned_first DESC, A.created_datetime ASC;
	</select>


	<select id="selectOrderLocation" parameterType="String" resultType="kr.co.cntt.core.model.order.Order">
		SELECT
		id
		, latitude
		, longitude
		FROM TB_ORDER
		WHERE id = #{id}
	</select>


	<!-- selectOrderFirstAssignmentReason -->
	<select id="selectOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.reason.Reason">
		SELECT id
		, reason
		, admin_id
		FROM TB_ORDER_FIRST_ASSIGNMENT_REASON
		WHERE deleted IS NULL
		<choose>
			<when test="role != null and role == 'ROLE_STORE'">
				AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
			</when>
			<when test="role != null and role == 'ROLE_RIDER'">
				AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (SELECT rider_id FROM TB_RIDER_SESSION WHERE access_token = #{token}))
			</when>
			<when test="role != null and role == 'ROLE_ADMIN'">
				AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			</when>
			<otherwise>
				AND id IS NULL
			</otherwise>
		</choose>
	</select>


	<select id="selectPushToken" parameterType="kr.co.cntt.core.model.store.Store" resultType="Map">
		select	 TBRS.push_token
		,TBRS.os			as platform
		,R.app_type			as appType
		from	 TB_RIDER				as R
		left join TB_RIDER_SESSION		as TBRS
		on	 R.id = TBRS.rider_id
		left join TB_SUBGROUP_RIDER_REL	as TSRR
		on	 TBRS.rider_id = TSRR.rider_id
		where	 TSRR.subgroup_id = #{groupId}
		and		 TBRS.push_token is not null
		and		 date_format(ifnull(TBRS.expiry_datetime, now()), '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d')
	</select>


	<select id="selectReservationOrders" resultMap="selectReservationOrdersResult">
		SELECT A.id
			, A.created_datetime
			, A.reservation_datetime
			, A.admin_id
			, A.store_id
			, A.rider_id
			, (SELECT subgroup_id FROM TB_SUBGROUP_STORE_REL WHERE store_id = A.store_id ORDER BY created_datetime DESC LIMIT 1) AS subgroup_id
		FROM TB_ORDER AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.store_id = B.store_id
		WHERE (A.status = 0 OR A.status =5)
			AND A.created_datetime > CURRENT_DATE()
			AND DATE_FORMAT(date_add(now(), interval 2 hour), '%Y-%m-%d %H:%i') = DATE_FORMAT(A.reservation_datetime, '%Y-%m-%d %H:%i')
-- 			AND date_add(now(), interval 2 hour) = A.reservation_datetime
		ORDER BY A.reservation_datetime DESC, A.assigned_first DESC, A.created_datetime ASC
	</select>

	<select id="selectCountOderAdmit" parameterType="kr.co.cntt.core.model.order.Order" resultType="int">
		SELECT (select assignment_limit FROM TB_STORE WHERE id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token}))
		-
		(SELECT COUNT(rider_id) FROM TB_ORDER WHERE rider_id = #{riderId} AND status in(1,2) AND created_datetime > CURRENT_DATE()) as oderAdmitCount;
	</select>

	<!-- 20.05.29 배정할 주문 목적지의 근처에 있는 라이더 유무 정보 가져오기 -->
	<select id="selectNearOrderRider" parameterType="Map" resultMap="selectOrdersResult">
		select	 A.id
				,A.admin_id
				,A.store_id
				,A.rider_id
				,A.status
				,(6371 * acos(cos(radians(B.latitude)) * cos(radians(A.latitude)) * cos(radians(A.longitude) - radians(B.longitude))
					+ sin(radians(B.latitude)) * sin(radians(A.latitude))) * 1000)		as distance
				,timestampdiff(minute, A.reservation_datetime, B.reservation_datetime)	as cooking_time
		from	(
					select	 id
							,admin_id
							,store_id
							,rider_id
							,reg_order_id
							,web_order_id
							,status
							,latitude
							,longitude
							,reservation_datetime
					from	 TB_ORDER
					where	 created_datetime > CURRENT_DATE()
					and		 status in (1)
					and		 rider_id not in (select id from TB_RIDER where 1=1 and working <![CDATA[<>]]> 1 and deleted is null )
				)	as A
		cross join
				(
					select	 id
							,admin_id
							,store_id
							,latitude
							,longitude
							,reservation_datetime
					from	 TB_ORDER
					where	 id = #{id}
				)	as B
			ON	 A.store_id = B.store_id
		having distance <![CDATA[<]]> #{distance}
	</select>
</mapper>
 