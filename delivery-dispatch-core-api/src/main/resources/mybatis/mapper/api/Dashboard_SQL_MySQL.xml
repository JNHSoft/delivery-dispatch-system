<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.DashboardMapper">
    <select id="selectAllDetail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="java.util.Map">
        <![CDATA[
        select	 ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end ), 0) * 100     as avgD30
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end ), 0) * 100     as avgD7
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 14 then 1 else 0 end ), 0) * 100    as avgD14
                ,ifnull(avg( case when timestampdiff(second, newAssignedDatetime, picked_up_datetime) < (16 * 60) + 21 then 1 else 0 end ), 0) * 100    as avgD16
                ,ifnull(avg( timestampdiff(second, newAssignedDatetime, arrived_datetime) ), 0)                                             as detailArrived
                ,ifnull(avg( timestampdiff(second, newAssignedDatetime, picked_up_datetime) ), 0)                                           as detailPickedUp
                ,ifnull(count(*), 0)
                 / round(sum(timestampdiff(second, picked_up_datetime, return_datetime) ) / 3600, 2)				                        as avgTPLH
                ,ifnull(avg(cooking_time), 0)																	                            as avgQT
                ,count(*)																							                        as sumTC
        from	(
                    select	 cooking_time
                            ,assigned_datetime
                            ,picked_up_datetime
                            ,arrived_datetime
                            ,completed_datetime
                            ,return_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <!-- 피크 타임 전체 -->
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
    </select>

    <select id="selectD30Detail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																									 as createdDatetime
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end ), 0) * 100  as mainValue
                ,'%'																													 as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
					        ,arrived_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectTPLHDetail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime															        as createdDatetime
                ,ifnull(count(*), 0)
                 / round(sum( timestampdiff(second, picked_up_datetime, return_datetime) ) / 3600, 2)     as mainValue
                ,''																						as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,return_datetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_TB_ORDER_reservation_datetime)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectQTDetail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																as createdDatetime
                ,ifnull(avg( cooking_time ), 0)														as mainValue
                ,''																					as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,cooking_time
        ]]>
                    from	 TB_ORDER					as a force index (idx_TB_ORDER_reservation_datetime)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectTCDetail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																as createdDatetime
                ,count(*)																			as mainValue
                ,''																					as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectOrderStackRateDetail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
    </select>

    <select id="selectD7Detail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																									as createdDatetime
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end ), 0) * 100 as mainValue
                ,'%'																													as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
        <![CDATA[
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                    and		 third_party_id is null
        ]]>
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectD14Detail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																										as createdDatetime
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 14 then 1 else 0 end ), 0) * 100	as mainValue
                ,'%'																														as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectD16Detail" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																										as createdDatetime
                ,ifnull(avg( case when timestampdiff(second, newAssignedDatetime, picked_up_datetime) < (16 * 60) + 21 then 1 else 0 end ), 0) * 100	as mainValue
                ,'%'																														as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
        from	 TB_ORDER					as a force index (idx_order_reservation_admin)
        left join TB_SUBGROUP_STORE_REL		as b
        on	 a.store_id = b.store_id
        and	 a.admin_id = b.admin_id
        where	 status = 3
        and		 b.deleted is null
        and		 assigned_datetime is not null
        and		 picked_up_datetime is not null
        and		 ifnull(arrived_datetime, completed_datetime) is not null
        and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
        and		 third_party_id is null
        <choose>
            <when test="role != null and role == 'ROLE_STORE'">
                and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
            </when>
            <when test="role != null and role == 'ROLE_ADMIN'">
                and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
            </when>
            <otherwise>
                and		 1 != 1
            </otherwise>
        </choose>
        <!--Search에 대한 필터를 진행하십시오.-->
        AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
        <choose>
            <when test="peakType == 1">
                AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
            </when>
            <when test="peakType == 2">
                AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
            </when>
            <when test="peakType == 3">
                AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                )
            </when>
        </choose>
        <!-- 그룹에 대한 필터 -->
        <if test="groupId != null and groupId != '' and groupId != 'reset'">
            AND		 b.group_id = #{groupId}
        </if>
        <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
            AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
        </if>
        <if test="storeId != null and storeId != '' and storeId != 'reset'">
            AND		 b.store_id = #{storeId}
        </if>
        )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectD30Rank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id	                                                                                                                as id
                ,( select store_name from TB_STORE where id = store_id )                                                                    as storeName
                ,sum( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end )                      as value
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end ), 0) * 100		as achievementRate
        from	(
                    select	 a.store_id                 as store_id
					        ,arrived_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 4 desc, 3 desc, 1
    </select>

    <select id="selectTPLHRank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																					as id
                ,( select store_name from TB_STORE where id = store_id )                                    as storeName
                ,ifnull(count(*), 0)
                 / round(sum( timestampdiff(second, picked_up_datetime, return_datetime) ) / 3600, 2)	        as value
        from	(
                    select	 a.store_id
                            ,picked_up_datetime
                            ,return_datetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 3 desc, 1
    </select>

    <select id="selectQTRank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																			as id
                ,( select store_name from TB_STORE where id = store_id )                            as storeName
                ,ifnull(avg( cooking_time ), 0)														as value
        from	(
                    select	 a.store_id
                            ,cooking_time
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 3 desc, 1
    </select>

    <select id="selectTCRank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																											            as id
                ,( select store_name from TB_STORE where id = store_id )                                                                        as storeName
                ,count(*)																				                                        as value
        from	(
                    select	 a.store_id
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 3 desc, 1
    </select>

    <select id="selectOrderStackRateRank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">

    </select>

    <select id="selectD7Rank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																											    as id
                ,( select store_name from TB_STORE where id = store_id )                                                                as storeName
                ,sum( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end )                  as value
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end ), 0) * 100 as achievementRate
        from	(
                    select	 a.store_id
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 4 desc, 3 desc, 1
    </select>

    <select id="selectD14Rank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																											         as id
                ,( select store_name from TB_STORE where id = store_id )                                                                     as storeName
                ,sum( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 14 then 1 else 0 end )                      as value
                ,ifnull(avg( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 14 then 1 else 0 end ), 0) * 100	 as achievementRate
        from	(
                    select	 a.store_id
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
                    from	 TB_ORDER					as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
                    and		 b.deleted is null
                    and		 assigned_datetime is not null
                    and		 picked_up_datetime is not null
                    and		 ifnull(arrived_datetime, completed_datetime) is not null
                    and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
                    and		 third_party_id is null
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and		 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND		 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND		 b.store_id = #{storeId}
                    </if>
                )	t
        group by store_id
        order by 4 desc, 3 desc, 1
    </select>

    <select id="selectD16Rank" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.RankInfo">
        <![CDATA[
        select	 store_id																											         as id
                ,( select store_name from TB_STORE where id = store_id )                                                                     as storeName
                ,sum( case when timestampdiff(second, newAssignedDatetime, picked_up_datetime) < (16 * 60) + 21 then 1 else 0 end )                      as value
                ,ifnull(avg( case when timestampdiff(second, newAssignedDatetime, picked_up_datetime) < (16 * 60) + 21 then 1 else 0 end ), 0) * 100	 as achievementRate
        from	(
                    select	 a.store_id
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
        ]]>
        from	 TB_ORDER					as a force index (idx_order_reservation_admin)
        left join TB_SUBGROUP_STORE_REL		as b
        on	 a.store_id = b.store_id
        and	 a.admin_id = b.admin_id
        where	 status = 3
        and		 b.deleted is null
        and		 assigned_datetime is not null
        and		 picked_up_datetime is not null
        and		 ifnull(arrived_datetime, completed_datetime) is not null
        and		 return_datetime is not null
        <![CDATA[
                    and		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    and		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
        ]]>
        and		 third_party_id is null
        <choose>
            <when test="role != null and role == 'ROLE_STORE'">
                and		 a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
            </when>
            <when test="role != null and role == 'ROLE_ADMIN'">
                and		 a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
            </when>
            <otherwise>
                and		 1 != 1
            </otherwise>
        </choose>
        <!--Search에 대한 필터를 진행하십시오.-->
        AND		 reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
        <choose>
            <when test="peakType == 1">
                AND		 date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
            </when>
            <when test="peakType == 2">
                AND		 date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
            </when>
            <when test="peakType == 3">
                AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                )
            </when>
        </choose>
        <!-- 그룹에 대한 필터 -->
        <if test="groupId != null and groupId != '' and groupId != 'reset'">
            AND		 b.group_id = #{groupId}
        </if>
        <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
            AND		 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
        </if>
        <if test="storeId != null and storeId != '' and storeId != 'reset'">
            AND		 b.store_id = #{storeId}
        </if>
        )	t
        group by store_id
        order by 4 desc, 3 desc, 1
    </select>

    <select id="selectTimeSectionList" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.TimeSectionInfo">
        select   admin_id                                                                                   as adminId
        <choose>
            <when test="storeId != null and storeId != 'reset'">
                ,store_id                                                                                   as storeId
                ,( select store_name from TB_STORE where admin_id = t.admin_id and id = t.store_id )        as storeName
            </when>
            <when test="subgroupId != null and subgroupId != 'reset'">
                ,subGroupName                                                                               as subGroupId
                ,subGroupName                                                                               as subGroupName
            </when>
            <when test="groupId != null and groupId != 'reset'">
                ,group_id                                                                                   as groupId
                ,( select name from TB_GROUP where admin_id = t.admin_id and id = t.group_id )              as groupName
            </when>
        </choose>
                ,count(*)                                                                                                                   as orderCount
                ,count(case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <![CDATA[<=]]> 30 then 1 else null end)       as D30
                ,count(case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 31 and 40 then 1 else null end)       as D40
                ,count(case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 41 and 50 then 1 else null end)       as D50
                ,count(case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 51 and 60 then 1 else null end)       as D60
                ,count(case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) > 60 then 1 else null end)                    as OverTime
        from    (
                    select   a.admin_id
                            ,b.group_id
                            ,SUBSTRING_INDEX(( select name from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and deleted is null ), '-', 1)      as subGroupName
                            ,a.store_id
                            ,if(timestampdiff(minute, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(a.cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime)      as newAssignedDatetime
                            ,arrived_datetime
                    from     TB_ORDER           as a force index (idx_order_reservation_admin)
                    left join TB_SUBGROUP_STORE_REL as b
                        on   a.admin_id = b.admin_id
                        and  a.store_id = b.store_id
                    where    1=1
                    and      a.reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                        <when test="peakType == 3">
                            AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')
                                OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')
                                )
                        </when>
                    </choose>
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and      a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and      a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and      1 != 1
                        </otherwise>
                    </choose>
                    -- 시간대별 통계에 대한 조건 추가
                    AND		 assigned_datetime is not null
                    AND		 picked_up_datetime is not null
                    AND		 ifnull(arrived_datetime, completed_datetime) is not null
                    AND		 return_datetime is not null
                    AND		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                    AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                    AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                    AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                    AND      third_party_id IS NULL
                    and      b.deleted is null
                    and      a.status = 3
                )       as t
        where   1=1
        <if test="groupId != null and groupId != 'reset'">
            and     group_id = #{groupId}
        </if>
        <if test="subgroupId != null and subgroupId != 'reset'">
            and     subGroupName = #{subgroupId}
        </if>
        <if test="storeId != null and storeId != 'reset'">
            and     store_id = #{storeId}
        </if>
        group by admin_id
        <choose>
            <when test="storeId != null and storeId != 'reset'">
                ,store_id
            </when>
            <when test="subgroupId != null and subgroupId != 'reset'">
                ,subGroupName
            </when>
            <when test="groupId != null and groupId != 'reset'">
                ,group_id
            </when>
        </choose>
    </select>
</mapper>
