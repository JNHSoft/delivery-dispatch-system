<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.DashboardMapper">
    <select id="selectAllDetail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="java.util.Map">
        <![CDATA[
        select	 avg( case when condition1 = 1 and timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end ) * 100 as avgD30
                ,avg( case when condition1 = 1 then timestampdiff(second, newAssignedDatetime, arrived_datetime) else 0 end ) as detailD30
                ,avg( case when condition1 = 1 and timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end ) * 100 as avgD7
                ,avg( case when condition1 = 1 then timestampdiff(second, newAssignedDatetime, picked_up_datetime) else 0 end ) as detailD7
                ,count( case when condition1 = 1 then 1 else null end )
                 / round(sum( case when condition1 = 1 then timestampdiff(MINUTE, picked_up_datetime, return_datetime) else 0 end ) / 60, 2)				as avgTPLH
                ,avg( case when condition1 = 1 then cooking_time else null end )																			as avgQT
                ,sum( case when condition1 = 1 then 1 else 0 end )																							as sumTC
        from	(
                    select	 a.id
                            ,a.admin_id
                            ,a.store_id
                            ,cooking_time
                            ,assigned_datetime
                            ,picked_up_datetime
                            ,arrived_datetime
                            ,completed_datetime
                            ,return_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                        on	 a.store_id = b.store_id
                        and	 a.admin_id = b.admin_id
                    where	 status = 3
<!--                    and		 third_party_id is null-->
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
<!--                                <otherwise>-->
<!--                                    AND (  (date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30')-->
<!--                                        OR (date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30')-->
<!--                                    )-->
<!--                                </otherwise>-->
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
    </select>

    <select id="selectD30Detail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																											as createdDatetime
                ,avg( case when condition1 = 1 and timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 else 0 end ) * 100 as mainValue
                ,'%'																															as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
					        ,arrived_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                    on	 a.store_id = b.store_id
                    and	 a.admin_id = b.admin_id
                    where	 status = 3
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectTPLHDetail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																											as createdDatetime
                ,count( case when condition1 = 1 then 1 else null end )
                 / round(sum( case when condition1 = 1 then timestampdiff(MINUTE, picked_up_datetime, return_datetime) else 0 end ) / 60, 2)	as mainValue
                ,''																															    as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,return_datetime
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                    on	 a.store_id = b.store_id
                    and	 a.admin_id = b.admin_id
                    where	 status = 3
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectQTDetail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																											as createdDatetime
                ,avg( case when condition1 = 1 then cooking_time else null end )																as mainValue
                ,''																															    as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,cooking_time
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                    on	 a.store_id = b.store_id
                    and	 a.admin_id = b.admin_id
                    where	 status = 3
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        gropu by reservation_datetime
        order by 1
    </select>

    <select id="selectTCDetail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																											as createdDatetime
                ,sum( case when condition1 = 1 then 1 else 0 end )																				as mainValue
                ,''																															    as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                    on	 a.store_id = b.store_id
                    and	 a.admin_id = b.admin_id
                    where	 status = 3
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>

    <select id="selectOrderStackRateDetail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
    </select>

    <select id="selectD7Detail" parameterType="kr.co.cntt.core.model.dashboard.SearchInfo" resultType="kr.co.cntt.core.model.dashboard.DashboardInfo">
        <![CDATA[
        select	 reservation_datetime																											as createdDatetime
                ,avg( case when condition1 = 1 and timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 else 0 end ) * 100	as mainValue
                ,'%'																															    as unit
        from	(
                    select	 date_format(reservation_datetime, '%Y-%m-%d')						as reservation_datetime
                            ,picked_up_datetime
                            ,if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime)		as newAssignedDatetime
                            ,case
                                when	 assigned_datetime is not null
                                    and  picked_up_datetime is not null
                                    and	 ifnull(arrived_datetime, completed_datetime) is not null
                                    and	 return_datetime is not null
                                    and	 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
                                    and	 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute)) < 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) < 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
                                    and  third_party_id is null
                                then 1
                                else 0
                            end					as condition1
        ]]>
                    from	 TB_ORDER					as a
                    left join TB_SUBGROUP_STORE_REL		as b
                    on	 a.store_id = b.store_id
                    and	 a.admin_id = b.admin_id
                    where	 status = 3
                    <choose>
                        <when test="role != null and role == 'ROLE_STORE'">
                            and a.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token = #{token})
                        </when>
                        <when test="role != null and role == 'ROLE_ADMIN'">
                            and a.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
                        </when>
                        <otherwise>
                            and 1 != 1
                        </otherwise>
                    </choose>
                    <!--Search에 대한 필터를 진행하십시오.-->
                    AND	  reservation_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
                    <choose>
                        <when test="peakType == 1">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '11:30' and '13:30'
                        </when>
                        <when test="peakType == 2">
                            AND   date_format(reservation_datetime, "%H:%i:%s") between '17:30' and '19:30'
                        </when>
                    </choose>
                    <!-- 그룹에 대한 필터 -->
                    <if test="groupId != null and groupId != '' and groupId != 'reset'">
                        AND	 b.group_id = #{groupId}
                    </if>
                    <if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
                        AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
                    </if>
                    <if test="storeId != null and storeId != '' and storeId != 'reset'">
                        AND	 b.store_id = #{storeId}
                    </if>
                )	t
        group by reservation_datetime
        order by 1
    </select>
</mapper>
