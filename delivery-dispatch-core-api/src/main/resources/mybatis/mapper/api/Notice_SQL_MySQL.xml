<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.NoticeMapper">

    <!-- insert Notice 공지사항 등록  -->
    <insert id="insertNotice" parameterType="kr.co.cntt.core.model.notice.Notice">
        INSERT INTO TB_NOTICE (
            created_datetime
            , admin_id
            , title
            , content
            , to_group_id
            , to_subgroup_id
            , to_store_id
            , ori_file_name
            , file_name
            , file_size
        ) VALUES(
              now()
            , (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token=#{token})
            , #{title}
            , #{content}

        <if test="toGroupId != null and toGroupId != ''">
            , #{toGroupId}
        </if>

        <if test="toGroupId == null or toGroupId == ''">
            , 0
        </if>

        <if test="toSubGroupId != null and toSubGroupId != ''">
            , #{toSubGroupId}
        </if>

        <if test="toSubGroupId == null or toSubGroupId == ''">
            , 0
        </if>

        <if test="toStoreId != null and toStoreId != ''">
            , #{toStoreId}
        </if>

        <if test="toStoreId == null or toStoreId == ''">
            , 0
        </if>

        <if test="oriFileName != null and oriFileName != ''">
          , #{oriFileName}
        </if>

        <if test="oriFileName == null or oriFileName == ''">
          , null
        </if>

        <if test="fileName != null and fileName != ''">
          , #{fileName}
        </if>

        <if test="fileName == null or fileName == ''">
          , null
        </if>

        <if test="fileSize != null and fileSize != ''">
          , #{fileSize}
        </if>

        <if test="fileSize == null or fileSize == ''">
          , null
        </if>

        )
    </insert>

    <!--AdminID 관리자가 공지사항 작성 -->
    <select id="selectAdminId" parameterType="kr.co.cntt.core.model.notice.Notice"  resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT
          admin_id
        FROM
          TB_ADMIN_SESSION
        WHERE
          access_token=#{token}
    </select>

    <!--&lt;!&ndash;StoreID 상점 공지사항 작성 &ndash;&gt;-->
    <!--<select id="selectStoreAdminId" parameterType="kr.co.cntt.core.model.notice.Notice"  resultType="kr.co.cntt.core.model.notice.Notice">-->
        <!--SELECT-->
          <!--st.admin_id-->
        <!--, se.store_id      AS writer_id-->
        <!--FROM-->
          <!--TB_STORE_SESSION AS se-->
        <!--INNER JOIN-->
          <!--TB_STORE         AS st-->
        <!--ON se.store_id = st.id-->

        <!--WHERE-->
        <!--access_token = #{token}-->

    <!--</select>-->

    <!--공지사항 수정-->
    <update id="updateNotice" parameterType="kr.co.cntt.core.model.notice.Notice">
      UPDATE TB_NOTICE
      SET
        modified_datetime = now()

      <if test="title != null and title != ''">
        , title = #{title}
      </if>

      <if test="title != null and title != ''">
        , content = #{content}
      </if>


      <if test="toGroupId != null and toGroupId != ''">
        , to_group_id = #{toGroupId}
      </if>

      <if test="toGroupId == null or toGroupId == ''">
        , to_group_id = 0
      </if>

      <if test="toSubGroupId != null and toSubGroupId != ''">
        , to_subgroup_id = #{toSubGroupId}
      </if>

      <if test="toSubGroupId == null or toSubGroupId == ''">
        , to_subgroup_id = 0
      </if>

      <if test="toStoreId != null and toStoreId != ''">
        , to_store_id = #{toStoreId}
      </if>

      <if test="toStoreId == null or toStoreId == ''">
        , to_store_id = 0
      </if>

      <if test="oriFileName != null and oriFileName != '' and oriFileName != 'none'">
        , ori_file_name = #{oriFileName}
      </if>

      <if test="oriFileName == 'none'">
        , ori_file_name = NULL
      </if>


      <if test="fileName != null and fileName != '' and fileName != 'none'">
        , file_name = #{fileName}
      </if>

      <if test="fileName == 'none'">
          , file_name = NULL
      </if>


      <if test="fileSize != null and fileSize != '' and fileSize != 'none'">
          , file_size = #{fileSize}
      </if>

      <if test="fileSize == 'none'">
          , file_size = NULL
      </if>
      WHERE 1=1
      AND id = #{id}
      AND admin_id = (select admin_id from TB_ADMIN_SESSION where access_token=#{token})


    </update>

    <!--공지사항 삭제-->
    <update id="deleteNotice" parameterType="kr.co.cntt.core.model.notice.Notice">
        UPDATE TB_NOTICE
        SET
          deleted = now()
        WHERE
          id = #{id}
        AND
          admin_id = (select admin_id from TB_ADMIN_SESSION where access_token=#{token})

    </update>



    <!--공지사항 상세 보기 store -->
    <select id="getStoreDetailNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT
            A.created_datetime
            , A.modified_datetime
            , A.id
            , A.admin_id
            , A.title
            , A.content
            , A.to_group_id
            , A.to_subgroup_id
            , A.to_store_id
            , A.ori_file_name
            , A.file_name
            , A.file_size
            , B.name AS group_name
            , C.name AS subgroup_name
            , D.name AS store_name
            , E.confirmed_datetime
        FROM TB_NOTICE AS A
        LEFT JOIN TB_GROUP AS B
            ON A.to_group_id = B.id
        LEFT JOIN TB_SUBGROUP AS C
            ON A.to_subgroup_id = C.id
        LEFT JOIN TB_STORE AS D
            ON A.to_store_id = D.id
        LEFT JOIN TB_NOTICE_CONFIRM AS E
            ON A.id = E.notice_id
        WHERE A.id = #{id}
            AND A.deleted IS NUll
            AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id =(select store_id from TB_STORE_SESSION where access_token=#{token}))
        limit 1
    </select>


    <!--공지사항 상세 보기 rider -->
    <select id="getRiderDetailNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT
        created_datetime
        , modified_datetime
        , id
        , admin_id
        , title
        , content
        , to_group_id
        , to_subgroup_id
        , to_store_id
        , ori_file_name
        , file_name
        , file_size

        FROM
        TB_NOTICE
        WHERE
        id = #{id}
        AND deleted IS NUll
        AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (select rider_id from TB_RIDER_SESSION where access_token=#{token}))
    </select>


    <!--공지사항 상세 보기 ADMIN -->
    <select id="getAdminDetailNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT A.created_datetime
            , A.modified_datetime
            , A.id
            , A.admin_id
            , A.title
            , A.content
            , A.to_group_id
            , A.to_subgroup_id
            , A.to_store_id
            , A.ori_file_name
            , A.file_name
            , A.file_size
            , B.name AS group_name
            , C.name AS subgroup_name
            , D.name AS store_name
            , IFNULL(COUNT(E.confirmed_datetime),0) AS confirmed_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE admin_id=A.admin_id) AS to_all_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND admin_id=A.admin_id) AS to_group_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND subgroup_id=C.id AND admin_id=A.admin_id) AS to_subgroup_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND subgroup_id=C.id AND store_id=D.id AND admin_id=A.admin_id) AS to_store_count
        FROM TB_NOTICE AS A
        LEFT JOIN TB_GROUP AS B
            ON A.to_group_id = B.id
        LEFT JOIN TB_SUBGROUP AS C
            ON A.to_subgroup_id = C.id
        LEFT JOIN TB_STORE AS D
            ON A.to_store_id = D.id
        LEFT JOIN TB_NOTICE_CONFIRM AS E
            ON A.id = E.notice_id
        WHERE A.deleted IS NUll
            AND A.id = #{id}
            AND A.admin_id = (select admin_id from TB_ADMIN_SESSION where access_token=#{token})
    </select>


    <!--라이더 공지사항 list-->
    <select id="getRiderNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT
            created_datetime
            , modified_datetime
            , id
            , admin_id
            , title
            , to_group_id
            , to_subgroup_id
            , to_store_id
            , ori_file_name
            , file_name
            , file_size

        FROM
          TB_NOTICE
        WHERE 1=1
        AND admin_id = (SELECT admin_id FROM TB_RIDER WHERE id = (select rider_id from TB_RIDER_SESSION where access_token=#{token}))
        AND deleted IS NUll
    </select>


    <!--store 공지사항 list-->
    <select id="getStoreNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT A.created_datetime
            , A.modified_datetime
            , A.id
            , A.admin_id
            , A.title
            , A.to_group_id
            , A.to_subgroup_id
            , A.to_store_id
            , A.ori_file_name
            , A.file_name
            , A.file_size
            , B.name AS group_name
            , C.name AS subgroup_name
            , D.name AS store_name
            , E.confirmed_datetime
        FROM TB_NOTICE AS A
        LEFT JOIN TB_GROUP AS B
            ON A.to_group_id = B.id
        LEFT JOIN TB_SUBGROUP AS C
            ON A.to_subgroup_id = C.id
        LEFT JOIN TB_STORE AS D
            ON A.to_store_id = D.id
        LEFT JOIN TB_NOTICE_CONFIRM AS E
            ON A.id = E.notice_id
        WHERE A.deleted IS NULL
            AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id =(select store_id from TB_STORE_SESSION where access_token=#{token}))
        ORDER BY A.id DESC
    </select>


    <!--admin 공지사항 list -->
    <select id="getAdminNoticeList" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT A.created_datetime
            , A.modified_datetime
            , A.id
            , A.admin_id
            , A.title
            , A.to_group_id
            , A.to_subgroup_id
            , A.to_store_id
            , A.ori_file_name
            , A.file_name
            , A.file_size
            , B.name AS group_name
            , C.name AS subgroup_name
            , D.name AS store_name
            , IFNULL(COUNT(E.confirmed_datetime),0) AS confirmed_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE admin_id=A.admin_id) AS to_all_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND admin_id=A.admin_id) AS to_group_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND subgroup_id=C.id AND admin_id=A.admin_id) AS to_subgroup_count
            , (SELECT COUNT(store_id) FROM TB_SUBGROUP_STORE_REL WHERE group_id=B.id AND subgroup_id=C.id AND store_id=D.id AND admin_id=A.admin_id) AS to_store_count
        FROM TB_NOTICE AS A
        LEFT JOIN TB_GROUP AS B
            ON A.to_group_id = B.id
        LEFT JOIN TB_SUBGROUP AS C
            ON A.to_subgroup_id = C.id
        LEFT JOIN TB_STORE AS D
            ON A.to_store_id = D.id
        LEFT JOIN TB_NOTICE_CONFIRM AS E
            ON A.id = E.notice_id
        WHERE A.deleted IS NULL
            AND A.admin_id = (select admin_id from TB_ADMIN_SESSION where access_token=#{token})
        GROUP BY A.id
    </select>

    <select id="selectAllToken" resultType="String">
        select TBRS.push_token
        from dde.TB_RIDER_SESSION AS TBRS
        where TBRS.push_token is not null and TBRS.expiry_datetime is null
    </select>


    <!-- selectNoticeConfirm -->
    <select id="selectNoticeConfirm" parameterType="kr.co.cntt.core.model.notice.Notice" resultType="kr.co.cntt.core.model.notice.Notice">
        SELECT
            A.created_datetime
            , A.modified_datetime
            , A.id
            , A.admin_id
            , A.store_id
            , A.notice_id
            , B.store_name AS store_name
        FROM TB_NOTICE_CONFIRM AS A
        LEFT JOIN TB_STORE AS B
            ON A.store_id = B.id
        WHERE A.deleted IS NULL
            AND A.notice_id = #{id}
            <choose>
                <when test="(role != null and role != '') and role == 'ROLE_STORE'">
                    AND A.admin_id = (SELECT admin_id FROM TB_STORE WHERE id =(SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token}))
                    AND A.store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token})
                </when>
                <when test="(role != null and role != '') and role == 'ROLE_ADMIN'">
                    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token=#{token})
                </when>
            </choose>
    </select>


    <!-- insertNoticeConfirm -->
    <insert id="insertNoticeConfirm" parameterType="kr.co.cntt.core.model.notice.Notice">
        INSERT INTO TB_NOTICE_CONFIRM (
            created_datetime
            , admin_id
            , store_id
            , notice_id
            , confirmed_datetime
        ) VALUES (
            now()
            , (SELECT admin_id FROM TB_STORE WHERE id =(SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token}))
            , (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token})
            , #{id}
            , now()
        )
    </insert>


    <!-- updateNoticeConfirm -->
    <update id="updateNoticeConfirm" parameterType="kr.co.cntt.core.model.notice.Notice">
        UPDATE TB_NOTICE_CONFIRM
        SET modified_datetime = now()
            , confirmed_datetime = now()
        WHERE deleted IS NULL
            AND notice_id = #{id}
            AND admin_id = (SELECT admin_id FROM TB_STORE WHERE id =(SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token}))
            AND store_id = (SELECT store_id FROM TB_STORE_SESSION WHERE access_token=#{token})
    </update>

</mapper>