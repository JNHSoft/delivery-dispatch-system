<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "//mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.AdminMapper">

	<!-- selectRidersResult -->
	<resultMap id="selectRidersResult" type="kr.co.cntt.core.model.rider.Rider">
		<result property="id" column="id" />
        <result property="name" column="name" />
		<result property="code" column="code" />
		<result property="phone" column="phone" />
		<result property="emergencyPhone" column="emergency_phone" />
        <result property="address" column="address" />
		<result property="gender" column="gender" />
		<result property="employmentType" column="employment_type" />
		<result property="teenager" column="teenager" />
		<result property="vehicleNumber" column="vehicle_number" />
		<result property="loginId" column="login_id" />

		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

		<association property="subGroupRiderRel" column="subGroupRiderRel" javaType="kr.co.cntt.core.model.group.SubGroupRiderRel">
			<result property="id" column="subGroupRiderRel_id" />
			<result property="adminId" column="subGroupRiderRel_admin_id" />
			<result property="groupId" column="subGroupRiderRel_group_id" />
			<result property="subGroupId" column="subGroupRiderRel_subgroup_id" />
			<result property="storeId" column="subGroupRiderRel_store_id" />
			<result property="riderId" column="subGroupRiderRel_rider_id" />
		</association>

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="storeName" column="store_name" />
		</association>



	</resultMap>


	<!-- selectStoresResult -->
	<resultMap id="selectStoresResult" type="kr.co.cntt.core.model.store.Store">
		<result property="id" column="id" />
		<result property="code" column="code" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="storeName" column="store_name" />
		<result property="chStoreName" column="ch_store_name" />
		<result property="storePhone" column="store_phone" />
		<result property="loginId" column="login_id" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detail_address" />
		<result property="chAddress" column="ch_address" />
		<result property="chDetailAddress" column="ch_detail_address" />
		<result property="assignmentStatus" column="assignment_status" />
		<result property="orderDiff" column="orderDiff" />

		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

		<association property="order" column="order" javaType="kr.co.cntt.core.model.order.Order">
			<result property="createdDatetime" column="order_createdDatetime" />
		</association>

	</resultMap>


	<!-- selectOrderResult -->
	<resultMap id="selectOrderResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="adminId" column="admin_id" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />
		<result property="status" column="status" />
		<result property="createdDatetime" column="created_datetime" />
		<result property="menuName" column="menu_name" />
		<result property="assignedDatetime" column="assigned_datetime" />
		<result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="arrivedDatetime" column="arrived_datetime" />
		<result property="reservationDatetime" column="reservation_datetime" />
		<result property="reservationStatus" column="reservation_status" />
		<result property="completedDatetime" column="completed_datetime" />
		<result property="returnDatetime" column="return_datetime"/>
		<result property="paid" column="paid" />

		<result property="cookingTime" column="cooking_time" />
		<result property="menuPrice" column="menu_price" />
		<result property="deliveryPrice" column="delivery_price" />
		<result property="totalPrice" column="total_price" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="message" column="message" />
		<result property="phone" column="phone" />
		<result property="address" column="address" />
		<result property="areaAddress" column="area_address" />
		<result property="districtAddress" column="district_address" />
		<result property="streetAddress" column="street_address" />
		<result property="estateAddress" column="estate_address" />
		<result property="buildingAddress" column="building_address" />
		<result property="detailAddress" column="detail_address" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="regOrderId" column="reg_order_id" />
		<result property="distance" column="distance" />

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="storeName" column="store_name" />
		</association>

		<association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
			<result property="id" column="id" />
			<result property="name" column="rider_name" />
			<result property="phone" column="rider_phone" />
			<result property="sharedStatus" column="rider_shared_status" />
			<result property="loginId" column="rider_login_id" />
		</association>

		<association property="payment" column="payment" javaType="kr.co.cntt.core.model.payment.Payment">
			<result property="type" column="type" />
			<result property="orderId" column="order_id" />
		</association>


		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
			<result property="groupingName" column="subgroup_grouping_name" />
		</association>

	</resultMap>

	<!-- loginAdminInfo -->
	<select id="loginAdminInfo" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="kr.co.cntt.core.model.admin.Admin">
<!--		SELECT-->
<!--			A.id, A.chat_user_id, A.login_id, A.login_pw,-->
<!--			A.name, A.state, A.assignment_status, A.assignment_limit,-->
<!--			B.access_token-->
<!--		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B-->
<!--		ON A.id = B.admin_id-->
<!--		WHERE A.login_id = #{loginId}-->
<!--			AND login_pw = #{loginPw}-->
<!--			AND deleted IS NULL-->
<!--		ORDER BY B.Created_datetime DESC-->
<!--		limit 1-->
		select	 A.id
				,A.chat_user_id
				,A.login_id
				,A.login_pw
				,A.name
				,A.state
				,A.assignment_status
				,A.assignment_limit
				,B.access_token
				,ifnull(A.brand_code, '')	as brand_code
				,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = A.brand_code )	as brand_name
				,concat('/resources/images/common/logo', A.brand_code, '.png')		as brand_img
		from	 TB_ADMIN	A
				,TB_ADMIN_SESSION	B
		WHERE	 A.id = B.admin_id
		and		 A.deleted is null
		and		 login_id = #{loginId}
		and		 login_pw = #{loginPw};
	</select>


	<!-- selectLoginAdmin -->
	<select id="selectLoginAdmin" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="Map">
		SELECT	 A.login_id			AS loginId
				,B.access_token		AS accessToken
				,A.brand_code		as brandCode
				,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and code = A.brand_code )		as brandName
		FROM	 TB_ADMIN			AS A
		LEFT JOIN TB_ADMIN_SESSION	AS B
			ON	 A.id = B.admin_id
		WHERE	 1=1
		AND		 A.deleted is null
		AND		 login_id = #{loginId}
		AND		 login_pw = #{loginPw}
		limit	 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectAdminTokenCheck" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectAdminTokenLoginCheck" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="kr.co.cntt.core.model.login.User">
		<![CDATA[
		SELECT
			A.login_id, A.login_pw
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		LIMIT 1
		]]>
	</select>


	<!-- insertAdminSession -->
	<insert id="insertAdminSession" parameterType="kr.co.cntt.core.model.admin.Admin">
		<![CDATA[
		INSERT INTO TB_ADMIN_SESSION(admin_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_ADMIN
		WHERE login_id = #{loginId} AND deleted IS NULL
		]]>
	</insert>


	<!-- selectAdminInfo -->
	<select id="selectAdminInfo" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.admin.Admin">
		SELECT
			created_datetime
			, modified_datetime
			, chat_user_id
			, id
			, name
			, login_id
			, state
			, assignment_status
			, assignment_limit
			, default_sound_status
			,ifnull(brand_code, '') as brand_code
			,( select cd_value from TB_CODE_MASTER where title = 'brand_code' and used_flag = 1 and code = A.brand_code )	as brand_name
			,concat('/resources/images/common/logo', brand_code, '.png')		as brand_img
		FROM TB_ADMIN	as A
		WHERE id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</select>


	<!-- updateAdminInfo -->
	<update id="updateAdminInfo" parameterType="kr.co.cntt.core.model.admin.Admin">
		UPDATE TB_ADMIN
		SET modified_datetime = now()
		<if test="loginPw != null and loginPw != ''">
			, login_pw = #{loginPw}
		</if>
		<if test="assignmentStatus != null and assignmentStatus != '' and assignmentStatus != 'none'">
			, assignment_status = #{assignmentStatus}
		</if>
		<if test="assignmentStatus == 'none'">
			, assignment_status = NULL
		</if>
		<if test="assignmentLimit != null and assignmentLimit != ''">
			, assignment_limit = #{assignmentLimit}
		</if>
		<if test="defaultSoundStatus != null">
			, default_sound_status = #{defaultSoundStatus}
		</if>
		WHERE deleted IS NULL
			AND id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>


	<!-- selectGroups  그룹 카운트 지워진꺼까지 카운트가되는 오류 수정-->
	<!-- 20.01.13 그룹 표시 오류 사항 수정 -->
	<select id="selectGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.Group">
		select	 A.created_datetime
				,A.modified_datetime
				,A.id
				,A.name
				,A.admin_id
				,( select count(id) from TB_SUBGROUP where deleted is null and admin_id = A.admin_id and group_id = A.id )				as subGroupCount
				,( select count(id) from TB_SUBGROUP_STORE_REL where deleted is null and admin_id = A.admin_id and group_id = A.id ) 	as subGroupStoreCount
		from	 TB_GROUP		as A
		where	 deleted is null
		and		 admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		order by A.name asc;
	</select>


	<!-- insertGroup -->
	<insert id="insertGroup" parameterType="kr.co.cntt.core.model.group.Group">
		INSERT INTO TB_GROUP (
			created_datetime
			, name
			, admin_id
		) VALUES (
			now()
			, #{name}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateGroup -->
	<update id="updateGroup" parameterType="kr.co.cntt.core.model.group.Group">
		UPDATE TB_GROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteGroup -->
	<update id="deleteGroup" parameterType="kr.co.cntt.core.model.group.Group">
		update	 TB_GROUP as A
		left join TB_SUBGROUP as B
			on	 A.id = B.group_id
			and	 A.admin_id = B.admin_id
			and	 isnull(B.deleted)
		left join TB_SUBGROUP_STORE_REL as C
			on	 B.id = C.group_id
			and	 B.id = C.subgroup_id
			and	 B.admin_id = C.admin_id
			and	 isnull(C.deleted)
		left join TB_SUBGROUP_RIDER_REL as D
			on	 C.id = D.group_id
			and	 C.id = D.subgroup_id
			and	 C.store_id = D.store_id
			and	 C.admin_id = D.admin_id
			and	 isnull(D.deleted)
		set		 A.deleted = now()
				,B.deleted = now()
				,C.deleted = now()
				,D.group_id = null
				,D.subgroup_id = null
		where	 A.id = #{id}
		and		 A.admin_id = (select admin_id from TB_ADMIN_SESSION where access_token = #{token})
	</update>


	<!-- selectSubGroups -->
	<select id="selectSubGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.SubGroup">
		select	 A.created_datetime
				,A.modified_datetime
				,A.id
				,A.name
				,A.group_id
				,A.admin_id
				,( select count(*) from TB_SUBGROUP_STORE_REL where isnull(deleted) and admin_id = A.admin_id and group_id = A.group_id and subgroup_id = A.id )	as subGroupStoreCount
		from	 TB_SUBGROUP	A
		where	 isnull(A.deleted)
		and		 A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		and		 A.group_id = #{id}
		order by A.name asc;
	</select>


	<!-- insertSubGroup -->
	<insert id="insertSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		INSERT INTO TB_SUBGROUP (
			created_datetime
			, name
			, group_id
			, admin_id
		) VALUES (
			now()
			, #{name}
			, #{groupId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateSubGroup -->
	<update id="updateSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE TB_SUBGROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND group_id = #{groupId}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteSubGroup -->
	<update id="deleteSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE	 TB_SUBGROUP AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
			ON	 A.id = B.subgroup_id
			AND	 A.group_id = B.group_id
			AND	 A.admin_id = B.admin_id
			AND	 isnull(B.deleted)
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
			ON	 A.id = C.subgroup_id
			AND	 A.group_id = C.group_id
			AND	 A.admin_id = C.admin_id
			AND	 B.store_id = C.store_id
			AND	 isnull(C.deleted)
		set		 A.deleted = now()
				,B.deleted = now()
				,C.group_id = null
				,C.subgroup_id = null
		WHERE	 1=1
		AND		 A.id = #{id}
		AND		 A.group_id = #{groupId}
		AND		 A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>


	<!-- selectNoneSubgroupStoreRels -->
	<select id="selectNoneSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT id
	      , store_name
	      , ch_store_name
        FROM TB_STORE
        WHERE id not in ((SELECT store_id FROM TB_SUBGROUP_STORE_REL WHERE deleted is null))
          AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
          AND deleted IS NULL
	</select>


	<!-- selectSubgroupStoreRels -->
	<select id="selectSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.admin_id
			, A.group_id
			, A.subgroup_id
			, A.store_id
			, B.store_name AS storeName
			, B.ch_store_name AS chStoreName
		FROM TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_STORE AS B
		ON A.store_id = B.id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			<if test="groupId != null and subGroupId != null">
				AND A.group_id = #{groupId}
				AND A.subgroup_id = #{subGroupId}
			</if>
			AND A.deleted IS NULL
			AND B.deleted IS NULL
		ORDER BY B.store_name ASC
	</select>


	<!-- insertSubGroupStoreRel -->
	<insert id="insertSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_SUBGROUP_STORE_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
		) VALUES (
			now()
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		<!--<if test="subGroupStoreRel.groupId != null and subGroupStoreRel.subGroupId != ''">-->
			, #{subGroupStoreRel.groupId}
			, #{subGroupStoreRel.subGroupId}
		<!--</if>
		<if test="subGroupStoreRel.groupId == null or subGroupStoreRel.subGroupId == ''">
			, null
			, null
		</if>-->
			, #{id}
		)
	</insert>


	<!-- updateSubGroupStoreRel -->
	<update id="updateSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_STORE_REL
		SET modified_datetime = now()
        <if test="subGroupStoreRel.groupId != null and subGroupStoreRel.groupId != '' and subGroupStoreRel.subGroupId != null and subGroupStoreRel.subGroupId != ''">
			, group_id = #{subGroupStoreRel.groupId}
			, subgroup_id = #{subGroupStoreRel.subGroupId}
        </if>
        <if test="subGroupStoreRel.groupId == null and subGroupStoreRel.groupId == '' and subGroupStoreRel.subGroupId == null and subGroupStoreRel.subGroupId == ''">
            , deleted = now()
        </if>

		WHERE store_id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- updateStoreSubGroup 상점 서브 그룹만 수정 -->
	<update id="updateStoreSubGroup" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_STORE_REL
		SET modified_datetime = now()
		, subgroup_id = #{subGroupStoreRel.subGroupId}
		WHERE store_id = #{id}
		AND group_id = #{subGroupStoreRel.groupId}
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND deleted IS NULL
	</update>


	<!-- updateRiderStore 기사 상점만 수정 -->
	<update id="updateRiderStore" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_SUBGROUP_RIDER_REL
		SET modified_datetime = now()
		<if test="subGroupRiderRel.storeId != null and subGroupRiderRel.storeId != ''">
			, store_id = #{subGroupRiderRel.storeId,jdbcType=VARCHAR}
			, group_id = #{subGroupRiderRel.groupId,jdbcType=VARCHAR}
			, subGroup_id = #{subGroupRiderRel.subGroupId,jdbcType=VARCHAR}
		</if>

		<if test="subGroupRiderRel.storeId == null or subGroupRiderRel.storeId == ''">
			, deleted = now()
		</if>

		WHERE rider_id = #{id}
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND deleted IS NULL
	</update>



	<!-- deleteSubGroupStoreRel -->
	<update id="deleteSubGroupStoreRel" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		UPDATE TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.store_id = B.store_id
			AND A.subgroup_id = B.subgroup_id
		SET A.deleted = now()
			, B.subgroup_id = NULL
		WHERE A.store_id = #{storeId}
			AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
	</update>


	<!-- insertSubGroupRiderRel -->
	<insert id="insertSubGroupRiderRel" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_SUBGROUP_RIDER_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
			, rider_id
		) VALUES (
			now()
			<if test="role != null and role == 'ROLE_ADD'">
				,#{adminId}
			</if>
			<if test="role == null or role != 'ROLE_ADD'">
				, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			</if>
			<if test="subGroupRiderRel.groupId != null and subGroupRiderRel.subGroupId != ''">
			, #{subGroupRiderRel.groupId,jdbcType=VARCHAR}
			, #{subGroupRiderRel.subGroupId,jdbcType=VARCHAR}
			</if>
			<if test="subGroupRiderRel.groupId == null or subGroupRiderRel.subGroupId == ''">
			, null
			, null
			</if>
			, #{subGroupRiderRel.storeId,jdbcType=VARCHAR}
			, #{id}
		)
	</insert>


	<!-- insertChatUser -->
	<insert id="insertChatUser" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER (
			created_datetime
			, type
		) VALUES (
			now()
			, #{type}
		)
		<selectKey keyProperty="chatUserId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatRoom -->
	<insert id="insertChatRoom" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHATROOM (
			created_datetime
		) VALUES (
			now()
		)
		<selectKey keyProperty="chatRoomId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatUserChatRoomRel -->
	<insert id="insertChatUserChatRoomRel" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER_CHATROOM_REL (
			chat_user_id
			, chatroom_id
		) VALUES (
			#{chatUserId}
			, #{chatRoomId}
		)
	</insert>


	<!-- selectRiders -->
	<select id="selectRiders" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRidersResult">
		SELECT
			A.id
			, A.name
			, A.code
			, A.phone
 			, TS.store_name
			, A.login_id
			, A.employment_type
			, A.vehicle_number
			, C.id AS subgroup_id
			, C.group_id AS subgroup_group_id
			, C.name AS subgroup_name
			, C.admin_id AS subgroup_admin_id
			, D.id AS group_id
			, D.name AS group_name
			, D.admin_id AS group_admin_id
			, B.store_id AS subGroupRiderRel_store_id
			, B.subgroup_id  AS subGroupRiderRel_subgroup_id
			, B.group_id AS subGroupRiderRel_group_id
		FROM TB_RIDER AS A

		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		AND B.deleted IS NULL

 		left join
        TB_STORE AS TS
        on B.store_id = TS.id
        AND TS.deleted is NULL

		LEFT JOIN TB_SUBGROUP AS C
		ON B.group_id = C.group_id
		AND B.subgroup_id = C.id
		AND C.deleted IS NULL

		LEFT JOIN  TB_GROUP AS D
		ON B.group_id = D.id
		AND D.deleted IS NULL

		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			ORDER BY A.name
	</select>

	<!-- selectRiderCountForStore -->
	<select id="selectRiderCountForStore" parameterType="kr.co.cntt.core.model.common.Common" resultType="int">
		select	 count(*)
		from	 TB_SUBGROUP_RIDER_REL
		where	 deleted is null
		and		 admin_id = ( select admin_id from TB_ADMIN_SESSION where access_token = #{token})
		and		 store_id = #{id}
	</select>


	<!-- insertRider -->
	<insert id="insertRider" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_RIDER (
			created_datetime
			, chat_user_id
			, admin_id
			, name
			, phone
			, login_id
			, login_pw
			, code
			, employment_type
			, vehicle_number
			, working_hours
			, rest_hours
			, app_type
		) VALUES (
			now()
			, #{chatUserId}
			<if test="role != null and role == 'ROLE_ADD'">
				, #{adminId}
			</if>
			<if test="role == null or role != 'ROLE_ADD'">
				, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			</if>

			, #{name}
			, #{phone}
			, #{loginId}
			, #{loginPw}
			<if test="code != null and code != ''">
				, #{code}
			</if>
			<if test="code == null or code == ''">
				, NULL
			</if>
			<if test="employmentType != null and employmentType != ''">
				, #{employmentType}
			</if>
			<if test="employmentType == null or employmentType == ''">
				, NULL
			</if>
			<if test="vehicleNumber != null and vehicleNumber != ''">
				, #{vehicleNumber}
			</if>
			<if test="vehicleNumber == null or vehicleNumber == ''">
				, NULL
			</if>
			, #{workingHours}
			<if test="restHours != null and restHours != ''">
				, #{restHours}
			</if>
			<if test="restHours == null or restHours == ''">
				, NULL
			</if>
			<if test="appType != null and appType != ''">
				, #{appType}
			</if>
			<if test="appType == null or appType == ''">
				, NULL
			</if>
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- deleteRider -->
	<update id="deleteRider" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		SET A.deleted = now()
		    , B.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
	</update>

	<!-- deleteRiderToken -->
	<delete id="deleteRiderToken" parameterType="kr.co.cntt.core.model.common.Common">
		DELETE FROM TB_RIDER_SESSION

		WHERE rider_id = #{id}
	</delete>

	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectStoresResult">
		SELECT	 A.id
				,A.code
				,A.name
				,A.phone
				,A.store_name
				,A.ch_store_name
				,A.store_phone
				,A.login_id
				,A.address
				,A.detail_address
				,A.ch_address
				,A.ch_detail_address
				,A.assignment_status
				,C.id AS subgroup_id
				,C.group_id AS subgroup_group_id
				,C.name AS subgroup_name
				,C.admin_id AS subgroup_admin_id
				,D.id AS group_id
				,D.name AS group_name
				,D.admin_id AS group_admin_id
				,E.store_id
				-- ,time_to_sec(timediff(now(), ifnull(E.created_datetime, concat(current_date(), ' 09:00:00'))))		as orderDiff
				,ifnull(E.created_datetime, concat(current_date(), ' 09:00:00'))			as order_createdDatetime
		FROM	 TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
			ON	 A.id = B.store_id
			AND	 B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
			ON	 B.group_id = C.group_id
			AND	 B.subgroup_id = C.id
			AND	 C.deleted IS NULL
		LEFT JOIN TB_GROUP AS D
			ON	 B.group_id = D.id
			AND	 D.deleted IS NULL
		LEFT JOIN (
					select	 store_id
					,max(created_datetime)		as created_datetime
					from	 TB_ORDER
					where	 created_datetime > current_date()
					group by store_id
				)	as E
		on	 A.id = E.store_id
		WHERE	 A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND		 A.deleted IS NULL
		ORDER BY A.name
	</select>

	<!-- insertStore -->
	<insert id="insertStore" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_STORE (
		created_datetime
		, chat_user_id
		, admin_id
		, login_id
		, login_pw
		, store_name
		, store_phone
		, address
		, latitude
		, longitude
		, expiration_date
		, code
		, ch_store_name
		, detail_address
		, ch_address
		, ch_detail_address
		, radius
		, store_distance_sort
		, assignment_status
		, assignment_limit
		, brand_code
		) VALUES (
		now()
		, #{chatUserId}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		, #{loginId}
		, #{loginPw}
		, #{storeName}
		, #{storePhone}
		, #{address}
		, #{latitude}
		, #{longitude}
		<if test="expirationDate != null and expirationDate != ''">
			, #{expirationDate}
		</if>
		<if test="expirationDate == null or expirationDate == ''">
			, '3000-01-01'
		</if>
		<if test="code != null and code != ''">
			, #{code}
		</if>
		<if test="code == null or code == ''">
			, NULL
		</if>
		<if test="chStoreName != null and chStoreName != ''">
			, #{chStoreName}
		</if>
		<if test="chStoreName == null or chStoreName == ''">
			, NULL
		</if>
		<if test="detailAddress != null and detailAddress != ''">
			, #{detailAddress}
		</if>
		<if test="detailAddress == null or detailAddress == ''">
			, NULL
		</if>
		<if test="chAddress != null and chAddress != ''">
			, #{chAddress}
		</if>
		<if test="chAddress == null or chAddress == ''">
			, NULL
		</if>
		<if test="chDetailAddress != null and chDetailAddress != ''">
			, #{chDetailAddress}
		</if>
		<if test="chDetailAddress == null or chDetailAddress == ''">
			, NULL
		</if>
		<if test="radius != null and radius != ''">
			, #{radius}
		</if>
		<if test="radius == null or radius == ''">
			, 1
		</if>
		<if test="storeDistanceSort != null and storeDistanceSort != ''">
			, #{storeDistanceSort}
		</if>
		<if test="storeDistanceSort == null or storeDistanceSort == ''">
			, NULL
		</if>
		<if test="assignmentStatus != null and assignmentStatus != ''">
			, #{assignmentStatus}
		</if>
		<if test="assignmentStatus == null or assignmentStatus == ''">
			, 0
		</if>
		<if test="assignmentLimit != null and assignmentLimit != ''">
			, #{assignmentLimit}
		</if>
		<if test="assignmentLimit == null or assignmentLimit == ''">
			, NULL
		</if>
			, #{brandCode}
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>



	<!-- deleteStore -->
	<update id="deleteStore" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET A.deleted = now()
		    , B.deleted = now()
		    , C.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
		    AND C.deleted IS NULL
	</update>


	<!-- updateAdminAssignmentStatus -->
	<update id="updateAdminAssignmentStatus" parameterType="kr.co.cntt.core.model.admin.Admin">
		UPDATE TB_ADMIN
		SET assignment_status = #{assignmentStatus}
			modified_datetime = now()
		WHERE id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>


	<!-- insertThirdParty -->
	<insert id="insertThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		INSERT INTO TB_THIRD_PARTY (
			created_datetime
			, name
			, admin_id
		) VALUES(
			now()
			, #{name}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateThirdParty -->
	<update id="updateThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		UPDATE TB_THIRD_PARTY
		SET modified_datetime = now()
			,name = #{name}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- deleteThirdParty -->
	<update id="deleteThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		UPDATE TB_THIRD_PARTY
			SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- insertAlarm -->
	<insert id="insertAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm">
		INSERT INTO TB_ALARM (
		created_datetime
		, alarm_type
		, admin_id
		, ori_file_name
		, file_name
		, file_size
		) VALUES (
		now()
		, #{alarmType}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		, #{oriFileName}
		, #{fileName}
		, #{fileSize}
		)
	</insert>


	<!-- deleteAlarm -->
	<update id="deleteAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm">
		UPDATE TB_ALARM
			SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- 통계 조회 List -->
	<select id="selectAdminStatistics" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
		SELECT	 TG.name AS group_name
				,TG.id AS group_id
				,TG.admin_id AS group_admin_id
				,TSG.id AS subgroup_id
				,TSG.name AS subgroup_name
				,SUBSTRING_INDEX(TSG.name, '-', 1) as subgroup_grouping_name
				,TSG.admin_id AS subgroup_admin_id
				,TSG.group_id AS subgroup_group_id
				,SSR.store_id AS subGroupStoreRel_store_id
				,IFNULL(TBS.store_name, concat('[DEL] ', (select ifnull(store_name, '') from TB_STORE where id = TBO.store_id and admin_id = TBO.admin_id)))		as store_name
				,TBO.admin_id
				,TBO.store_id
				,TBO.rider_id
				,TBO.status
				,TBO.id
				,TBO.created_datetime
				,TBO.picked_up_datetime
				,TBO.menu_name
				,TBO.cooking_time
				,TBP.type
				,TBO.assigned_datetime
				,TBO.picked_up_datetime
				,TBO.arrived_datetime
				,TBO.reservation_datetime
				,TBO.reservation_status
				,TBR.name AS rider_name
				,TBO.address
				,TBO.paid
				,TBO.reg_order_id
				,case when ifnull(TBO.shared_flag, 0) = 1 then 'Y' else 'N' end	as rider_shared_status
		FROM	 TB_ORDER AS TBO
		LEFT JOIN  TB_RIDER AS TBR
			on	 TBR.id = TBO.rider_id
			AND	 TBR.deleted is NULL
		LEFT JOIN TB_STORE AS TBS
			on	 TBS.id = TBO.store_id
			AND	 TBS.deleted is NULL
		LEFT JOIN TB_PAYMENT AS TBP
			on	 TBP.order_id = TBO.id
			AND	 TBP.deleted is NULL
		LEFT JOIN TB_SUBGROUP_STORE_REL AS SSR
			on	 TBO.store_id = SSR.store_id
			AND	 SSR.deleted is NULL
		LEFT JOIN TB_SUBGROUP AS TSG
			on	 SSR.subgroup_id = TSG.id
			AND	 TSG.deleted is NULL
		LEFT JOIN TB_GROUP AS TG
			on	 SSR.group_id = TG.id
			AND	 TG.deleted is NULL
		WHERE	 TBO.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND		 TBO.status in (3,4)
		AND		 date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
		AND		 TBO.created_datetime > #{currentDatetime}
		ORDER BY TBO.created_datetime ASC
	</select>

	<!-- 통계 조회 List  EXcel-->
	<select id="selectAdminStatisticsExcel" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultMap="selectOrderResult">
		SELECT	 TG.name AS group_name
				,TG.id AS group_id
				,TG.admin_id AS group_admin_id
				,TSG.id AS subgroup_id
				,TSG.name AS subgroup_name
				,TSG.admin_id AS subgroup_admin_id
				,TSG.group_id AS subgroup_group_id
				,SSR.store_id AS subGroupStoreRel_store_id
				,IFNULL(TBS.store_name, concat('[DEL] ', (select ifnull(store_name, '') from TB_STORE where id = TBO.store_id and admin_id = TBO.admin_id)))		as store_name
				,TBO.admin_id
				,TBO.store_id
				,TBO.rider_id
				,TBO.status
				,TBO.id
				,TBO.created_datetime
				,TBO.reservation_datetime
				,TBO.reservation_status
				,TBO.assigned_datetime
				,TBO.picked_up_datetime
				,TBO.arrived_datetime
				,TBO.completed_datetime
				,TBO.return_datetime
				,TBO.menu_name
				,TBO.cooking_time
				,TBO.menu_price
				,TBO.delivery_price
				,TBO.total_price
				,TBP.type
				,TBO.combined_order_id
				,TBR.name AS rider_name
				,TBR.phone AS rider_phone
				,TBO.message
				,TBO.phone
				,TBO.address
				,TBO.detail_address
				,TBO.paid
				,TBO.reg_order_id
				,TBO.latitude
				,TBO.longitude
				,TBO.distance
				,case when ifnull(TBO.shared_flag, 0) = 1 then 'Y' else 'N' end	as rider_shared_status
				,TBR.login_id				as rider_login_id
		FROM	 TB_ORDER AS TBO
		LEFT JOIN TB_RIDER AS TBR
			on	 TBR.id = TBO.rider_id
			AND	 TBR.deleted is NULL
		LEFT JOIN TB_STORE AS TBS
			on	 TBS.id = TBO.store_id
			AND	 TBS.deleted is NULL
		LEFT JOIN TB_PAYMENT AS TBP
			on	 TBP.order_id = TBO.id
			AND	 TBP.deleted is NULL
		LEFT JOIN TB_SUBGROUP_STORE_REL AS SSR
			on	 TBO.store_id = SSR.store_id
			AND	 SSR.deleted is NULL
		LEFT JOIN TB_SUBGROUP AS TSG
			on	 SSR.subgroup_id = TSG.id
			AND	 TSG.deleted is NULL
		LEFT JOIN TB_GROUP AS TG
			on	 SSR.group_id = TG.id
			AND	 TG.deleted is NULL
		WHERE	 1=1
		AND		 TBO.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND		 TBO.created_datetime between #{sDate} and date_add(#{eDate}, interval 1 day)
		<if test="groupId != null and groupId != '' and groupId != 'reset'">
			AND		 TG.id = #{groupId}
		</if>
		<if test="subgroupId != null and subgroupId != '' and subgroupId != 'reset'">
			AND		 SUBSTRING_INDEX(TSG.name, '-', 1) = #{subgroupId}
		</if>
		<if test="storeId != null and storeId != '' and storeId != 'reset'">
			AND		 TBO.store_id = #{storeId}
		</if>
		<choose>
			<when test="orderStatus != null and orderStatus == 'complete'">
				AND		 TBO.status in (3)
			</when>
			<when test="orderStatus != null and orderStatus == 'cancel'">
				AND		 TBO.status in (4)
			</when>
			<otherwise>
				AND		 TBO.status in (3,4)
			</otherwise>
		</choose>
		ORDER BY TBO.created_datetime ASC
	</select>

	<!-- 통계 조회 info -->
	<select id="selectAdminStatisticsInfo" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
		SELECT
		TG.name AS group_name
		, TG.id AS group_id
		, TG.admin_id AS group_admin_id
		, TSG.id AS subgroup_id
		, TSG.name AS subgroup_name
		, TSG.admin_id AS subgroup_admin_id
		, TSG.group_id AS subgroup_group_id
		, SSR.store_id AS subGroupStoreRel_store_id
		, TBO.admin_id
		, TBO.store_id
		, TBO.rider_id
		, TBO.status
		, TBO.id
		, TBO.created_datetime
		, TBO.assigned_datetime
		, TBO.picked_up_datetime
		, TBO.reservation_datetime
		, TBO.reservation_status
		, TBO.completed_datetime
		, TBO.menu_name
		, TBO.cooking_time
		, TBO.menu_price
		, TBO.delivery_price
		, TBO.total_price
		, TBP.type
		, TBO.combined_order_id
		, TBR.name AS rider_name
		, TBR.phone AS rider_phone
		, TBO.message
		, TBO.phone
		, TBO.address
		, TBO.area_address
		, TBO.district_address
		, TBO.street_address
		, TBO.estate_address
		, TBO.building_address
		, TBO.detail_address
		, TBO.latitude
		, TBO.longitude
		, TBO.paid
		, TBO.reg_order_id
		, TBO.distance

		FROM TB_ORDER AS TBO

		LEFT JOIN
		TB_RIDER AS TBR
		on TBR.id = TBO.rider_id
		AND TBR.deleted is NULL

		LEFT JOIN
		TB_STORE AS TBS
		on TBS.id = TBO.store_id
		AND TBS.deleted is NULL

		LEFT JOIN
		TB_PAYMENT AS TBP
		on TBP.order_id = TBO.id
		AND TBP.deleted is NULL

		LEFT JOIN
		TB_SUBGROUP_STORE_REL AS SSR
		on TBO.store_id = SSR.store_id
		AND SSR.deleted is NULL

		LEFT JOIN
		TB_SUBGROUP AS TSG
		on SSR.group_id = TSG.id
		AND TSG.deleted is NULL

		LEFT JOIN
		TB_GROUP AS TG
		on SSR.group_id = TG.id
		AND TG.deleted is NULL
		where

		TBO.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND TBO.status in (3, 4)
		AND TBO.reg_order_id = #{regOrderId}
	</select>



	<!-- selectStoreList -->
	<select id="selectStoreList" parameterType="kr.co.cntt.core.model.store.Store" resultMap="selectStoresResult">
		SELECT
		A.id
		, A.code
		, A.name
		, A.phone
		, A.store_name
		, A.ch_store_name
		, A.store_phone
		, A.login_id
		, A.address
		, A.detail_address
		, A.assignment_status
		, A.ch_address
		, A.ch_detail_address
		, C.id AS subgroup_id
		, C.group_id AS subgroup_group_id
		, C.name AS subgroup_name
		, C.admin_id AS subgroup_admin_id
		, D.id AS group_id
		, D.name AS group_name
		, D.admin_id AS group_admin_id
		FROM TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		AND B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
		ON B.group_id = C.group_id
		AND B.subgroup_id = C.id
		AND C.deleted IS NULL
		LEFT JOIN  TB_GROUP AS D
		ON B.group_id = D.id
		AND D.deleted IS NULL
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND A.deleted IS NULL
		ORDER BY A.name
	</select>

	<!--우선 배정 추가 -->
	<!-- insertOrderFirstAssignmentReason -->
	<insert id="insertOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		INSERT INTO TB_ORDER_FIRST_ASSIGNMENT_REASON (
		created_datetime
		, reason
		, admin_id
		) VALUES(
		now()
		, #{reason}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>

	<!--우선 배정 수정 -->
	<update id="updateOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_ORDER_FIRST_ASSIGNMENT_REASON
		SET modified_datetime = now()
		,reason = #{reason}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>

	<!-- 우선 배정 삭제 -->
	<update id="deleteOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_ORDER_FIRST_ASSIGNMENT_REASON
		SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>
	<!--배정 거절 사유 추가 -->
	<!-- insertRejectReason -->
	<insert id="insertRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		INSERT INTO TB_REJECT_REASON (
		created_datetime
		, reason
		, admin_id
		) VALUES(
		now()
		, #{reason}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>

	<!--배정 거절 사유 수정 -->
	<update id="updateRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_REJECT_REASON
		SET modified_datetime = now()
		,reason = #{reason}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>

	<!-- 배정 거절 사유 삭제 -->
	<update id="deleteRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_REJECT_REASON
		SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>


	<!--상점 아이디 중복 체크  -->
	<select id="selectStoreLoginIdCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="int">
	SELECT
		COUNT(*) as user_count
	FROM TB_STORE
	WHERE
		login_id = #{loginId}
		AND deleted IS NULL
	</select>

	<!--기사 아이디 중복 체크-->
	<select id="selectRiderLoginIdCheck" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="int">
		SELECT
		COUNT(*) as user_count
		FROM TB_RIDER
		WHERE
			login_id = #{loginId}
			AND deleted IS NULL
	</select>


	<!-- updateAdminSession -->
	<update id="updateAdminSession" parameterType="String">
		UPDATE TB_ADMIN AS A
		LEFT JOIN TB_ADMIN_SESSION AS B
		ON A.id = B.admin_id
		SET A.last_access = now()
		--			, B.expiry_datetime = now()
		WHERE B.access_token = #{token}
	</update>

	<!-- updateSubGroupRiderRelByStoreId -->
	<update id="updateSubGroupRiderRelByStoreId" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_RIDER_REL
		SET
		<if test="subGroupStoreRel.groupId != null and subGroupStoreRel.subGroupId != ''">
			group_id = #{subGroupStoreRel.groupId,jdbcType=VARCHAR}
  			, subgroup_id = #{subGroupStoreRel.subGroupId,jdbcType=VARCHAR}
		</if>
		<if test="subGroupStoreRel.groupId == null or subGroupStoreRel.subGroupId == ''">
			group_id = null
			, subgroup_id = null
		</if>
		WHERE store_id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>

	<!-- updateRiderSubGroup 라이더 서브 그룹 수정(상점 서브그룹만 수정 시) -->
	<update id="updateRiderSubGroup" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_RIDER_REL
		SET modified_datetime = now()
		, subgroup_id = #{subGroupStoreRel.subGroupId}
		WHERE store_id = #{id}
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND deleted IS NULL
	</update>



	<!--
	///// 2020.04.24 Store 통계페이지의 관리자 형태로 변경
	-->

	<select id="selectStoreStatisticsByOrderForAdmin" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultMap="selectOrderResult">
		SELECT	 ORD.admin_id
				,ORD.store_id
				,( SELECT store_name FROM TB_STORE WHERE id = ORD.store_id )	as	store_name
				,ORD.rider_id
				,ORD.status
				,ORD.id
				,ORD.created_datetime
				,ORD.cooking_time
				,ORD.assigned_datetime
				,ORD.picked_up_datetime
				,ifnull(ORD.arrived_datetime, ORD.completed_datetime)			as  arrived_datetime
				,ORD.completed_datetime
				,ORD.return_datetime
				,ORD.reservation_datetime
				,ORD.reservation_status
				,ORD.reg_order_id
				,ORD.distance
				-- 검색조건을 위한 컬럼
				,sbStore.group_id
				,( SELECT name FROM TB_GROUP WHERE admin_id = ORD.admin_id AND id = sbStore.group_id AND deleted is null )	AS group_name
				,sbStore.subgroup_id
				,( SELECT name FROM TB_SUBGROUP WHERE admin_id = ORD.admin_id AND group_id = sbStore.group_id AND id = sbStore.subgroup_id AND deleted is null )	AS subgroup_name
				,( SELECT name FROM TB_RIDER WHERE id = ORD.rider_id )		AS rider_name
		FROM	 TB_ORDER					as ORD force index (idx_order_created_admin)
		LEFT JOIN TB_SUBGROUP_STORE_REL		as sbStore
			ON	 ORD.admin_id = sbStore.admin_id
			AND	 ORD.store_id = sbStore.store_id
			AND	 sbStore.deleted is null
		WHERE	 ORD.status in (3)
		<if test="brandCode == null or brandCode != 1">
		AND		 ORD.third_party_id IS NULL
		</if>
		AND		 ORD.created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
		AND		 ORD.admin_id = ( select admin_id from TB_ADMIN_SESSION where access_token = #{token} )
		<if test="groupId != null and groupId != 'reset'">
			AND	 sbStore.group_id = #{groupId}
		</if>
		<if test="subgroupId != null and subgroupId != 'reset'">
<!--			AND	 SUBSTRING_INDEX(subgroup_name, '-', 1) = #{subgroupId}-->
			AND	 sbStore.subgroup_id in ( select id from TB_SUBGROUP where admin_id = sbStore.admin_id and group_id = sbStore.group_id and id = sbStore.subgroup_id and deleted is null and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
		</if>
		<if test="storeId != null and storeId != 'reset'">
			AND	 sbStore.store_id = #{storeId}
		</if>
	</select>

	<!--
	///// 2020.04.28 Store 일자별 통계페이지 관리자 버전
	-->
	<select id="selectStoreStatisticsByDateForAdmin" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.statistic.AdminByDate">
		<![CDATA[
		select   ( select store_name from TB_STORE where id = t.store_id )                                                                  as store_name
				,group_id
				,subgroup_id
				,( select name from TB_GROUP where id = t.group_id )                                                                     			as group_name
				,( select name from TB_SUBGROUP where group_id = t.group_id and id = t.subgroup_id )                                             	as subgroup_name

				,sum( case when condition1 = 1 then time_to_sec(timediff(picked_up_datetime, newAssignedDatetime)) end )                           	as order_pickup
				,sum( case when condition1 = 1 then time_to_sec(timediff(arrived_datetime, picked_up_datetime)) end )                           	as pickup_complete
				,sum( case when condition1 = 1 then time_to_sec(timediff(arrived_datetime, newAssignedDatetime)) end )                           	as order_complete
				,sum( case when condition1 = 1 then time_to_sec(timediff(completed_datetime, arrived_datetime)) end )                           	as stay_time
				,sum( case when condition1 = 1 then time_to_sec(timediff(return_datetime, completed_datetime)) end )                              	as complete_return
				,sum( case when condition1 = 1 then time_to_sec(timediff(return_datetime, picked_up_datetime)) end )                              	as pickup_return
				,sum( case when condition1 = 1 then time_to_sec(timediff(return_datetime, newAssignedDatetime)) end )                           	as order_return
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 and condition1 = 1 then 1 end )                as min_30below
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 31 and 41 and condition1 = 1 then 1 end )    as min_30to40
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 41 and 51 and condition1 = 1 then 1 end )    as min_40to50
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 51 and 61 and condition1 = 1 then 1 end )    as min_50to60
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 61 and 91 and condition1 = 1 then 1 end )    as min_60to90
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) > 90 and condition1 = 1 then 1 end )                 as min_90under
				,count( case when condition1 = 1 or third_party_id is not null then null else 1 end )                                             	as errtc
				,count( case when third_party_id is not null then 1 end )                                                            				as thirdtc
				,count( case when condition1 = 1 then 1 end )                                                                     					as tc
				,sum( case when condition1 = 1 then total_price else 0 end )                                                               			as total_sales
				,(round(sum( case when condition1 = 1 then timestampdiff(second, picked_up_datetime, return_datetime) else 0 end ) / 3600, 2))      as hours
				,sum( case when condition1 = 1 then time_to_sec(timediff(return_datetime, picked_up_datetime)) else 0 end )                         as total_pickup_return
				,round(sum( case when condition1 = 1 then distance else 0 end ), 2)                                                        			as avg_distance
		from   (
					select   a.store_id
							,b.group_id
							,b.subgroup_id
							,a.reservation_datetime
							,a.picked_up_datetime
							,a.arrived_datetime
							,a.completed_datetime
							,a.return_datetime
							,a.total_price
							,a.distance
							,a.third_party_id
							,if(timestampdiff(second, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute)) < 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime)      as newAssignedDatetime
							,case
								when     a.assigned_datetime is not null
									and  a.picked_up_datetime is not null
									and  ifnull(a.arrived_datetime, a.completed_datetime) is not null
									and  a.return_datetime is not null
									and  timestampdiff(SECOND, ifnull(a.arrived_datetime, a.completed_datetime), a.return_datetime) >= 60
									and  timestampdiff(SECOND, if(timestampdiff(minute, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute)) < 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime), ifnull(a.arrived_datetime, a.completed_datetime)) >= 0
									and  timestampdiff(SECOND, if(timestampdiff(minute, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute)) < 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime), a.picked_up_datetime) >= 0
									and  timestampdiff(SECOND, if(timestampdiff(minute, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute)) < 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime), a.return_datetime) >= 0
									and  a.third_party_id is null
								then 1
								else 0
							end               as condition1
		]]>
					from    TB_ORDER                AS a force index (idx_order_created_admin, idx_order_reservation_admin)
					left join TB_SUBGROUP_STORE_REL    AS b
						on    a.store_id = b.store_id
						and    a.admin_id = b.admin_id
						and    b.deleted is null
					where    a.status in (3)
					and       a.admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
					and       a.created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
					<!-- 검색 조건 추가 -->
					<if test="groupId != null and groupId != 'reset'">
						and	 b.group_id = #{groupId}
					</if>
					<if test="subgroupId != null and subgroupId != 'reset'">
						and	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
					</if>
					<if test="storeId != null and storeId != 'reset'">
						and	 a.store_id = #{storeId}
					</if>
				)   t
		group by store_id, group_id, subgroup_id
		order by store_id, group_id, subgroup_id
	</select>

	<!-- 21.12.07 KFC 오류 TC 항목도 집계에 포함, 동시에 제3자배송도 모두 집계되도록 변경됨 -->
	<select id="selectStoreStatisticsByDateForAdminAtTWKFC" parameterType="kr.co.cntt.core.model.common.SearchInfo" resultType="kr.co.cntt.core.model.statistic.AdminByDate">
		<![CDATA[
		select	 ( select store_name from TB_STORE where id = t.store_id )																			as store_name
				,group_id
				,subgroup_id
				,( select name from TB_GROUP where id = t.group_id )																				as group_name
				,( select name from TB_SUBGROUP where group_id = t.group_id and id = t.subgroup_id )												as subgroup_name

				,count( case when timestampdiff(MINUTE, newAssignedDatetime, picked_up_datetime) < 7 then 1 end )									as d7_success
				,sum(time_to_sec(timediff(picked_up_datetime, newAssignedDatetime)))																as order_pickup
				,sum(time_to_sec(timediff(arrived_datetime, picked_up_datetime)))																	as pickup_complete
				,sum(time_to_sec(timediff(arrived_datetime, newAssignedDatetime)))							   	 									as order_complete
				,sum(time_to_sec(timediff(return_datetime, arrived_datetime)))								    									as complete_return
				,sum(time_to_sec(timediff(return_datetime, picked_up_datetime)))																	as pickup_return
				,sum(time_to_sec(timediff(return_datetime, newAssignedDatetime)))																	as order_return
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) <= 30 then 1 end )                					as min_30below
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 31 and 41 then 1 end )    					as min_30to40
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 41 and 51 then 1 end )    					as min_40to50
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 51 and 61 then 1 end )						as min_50to60
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) between 61 and 91 then 1 end )						as min_60to90
				,count( case when timestampdiff(MINUTE, newAssignedDatetime, arrived_datetime) > 90 then 1 end )									as min_90under
				-- ,count( case when condition1 = 1 or third_party_id is not null then null else 1 end )												as errtc
                -- 2021-12-07 배정 모드에 대한 집계 추가
                ,count( case when assigned_type = 1 then 1 else null end )                                                                          as assigned_auto
                ,count( case when assigned_type = 2 then 1 else null end )                                                                          as assigned_manual
				,count( case when third_party_id is not null then 1 end )																	        as thirdtc
				,count(*)																				        									as tc
				,sum(total_price)																													as total_sales
				,(round(sum(timestampdiff(second, picked_up_datetime, return_datetime)) / 3600, 2))													as hours
				,sum(time_to_sec(timediff(return_datetime, picked_up_datetime)))																	as total_pickup_return
				,round(sum(distance), 2)															            									as avg_distance
		from	(
					select	 a.store_id
							,a.admin_id
							,b.group_id
							,b.subgroup_id
							,a.reservation_datetime
							,a.picked_up_datetime
							,a.arrived_datetime
							,a.completed_datetime
							,a.return_datetime
							,a.total_price
							,a.distance
							,a.third_party_id
							,a.assigned_type
							,if(timestampdiff(second, a.assigned_datetime, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute)) < 0, date_sub(a.reservation_datetime, interval case when ifnull(a.cooking_time, 30) > 30 or ifnull(a.cooking_time, 30) < 1 then 30 else ifnull(a.cooking_time, 30) end minute), a.assigned_datetime)		as newAssignedDatetime
		]]>
					from	 TB_ORDER 					AS a    force index (idx_order_reservation_admin, idx_order_created_admin)
					left join TB_SUBGROUP_STORE_REL 	AS b
					on	 a.store_id = b.store_id
					and	 a.admin_id = b.admin_id
					and	 b.deleted is null
					where	 a.status in (3)
					and		 a.admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
					<choose>
						<when test="chkTime != null and chkTime == true">
							AND	  a.reservation_datetime >= #{currentDatetime}
							AND	  a.reservation_datetime <![CDATA[<]]> #{eDate}
						</when>
						<when test="chkPeakTime != null and chkPeakTime == true">
							AND	  a.reservation_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
							<choose>
								<when test="peakType != null and peakType == 1">
									AND   date_format(a.reservation_datetime, '%H:%i:%s') between '11:30' and '13:30'
								</when>
								<when test="peakType != null and peakType == 2">
									AND   date_format(a.reservation_datetime, '%H:%i:%s') between '17:30' and '19:30'
								</when>
								<otherwise>
									AND (  (date_format(a.reservation_datetime, '%H:%i:%s') between '11:30' and '13:30')
									OR (date_format(a.reservation_datetime, '%H:%i:%s') between '17:30' and '19:30')
									)
								</otherwise>
							</choose>
						</when>
						<otherwise>
							AND	  a.created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
						</otherwise>
					</choose>
					<!--검색 조건 추가-->
					<if test="groupId != null and groupId != 'reset'">
						AND	 b.group_id = #{groupId}
					</if>
					<if test="subgroupId != null and subgroupId != 'reset'">
						AND	 b.subgroup_id in ( select id from TB_SUBGROUP where admin_id = b.admin_id and group_id = b.group_id and id = b.subgroup_id and SUBSTRING_INDEX(name, '-', 1) = #{subgroupId} )
					</if>
					<if test="storeId != null and storeId != 'reset'">
						AND	 a.store_id = #{storeId}
					</if>
		)	t
		group by store_id, group_id, subgroup_id, admin_id
		order by store_id, group_id, subgroup_id
	</select>

	<select id="selectStatisticsByInterval" parameterType="kr.co.cntt.core.model.order.Order" resultType="Integer">
		SELECT   ifnull(TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime), 0) AS interval_minute
		FROM     TB_ORDER
		WHERE    admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
		AND      status in (3)
		AND      created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
		-- 시간대별 통계에 대한 조건 추가
		AND		 assigned_datetime is not null
		AND		 picked_up_datetime is not null
		AND		 ifnull(arrived_datetime, completed_datetime) is not null
		AND		 return_datetime is not null
		AND		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
		AND      third_party_id IS NULL
	</select>

	<!-- 21.12.07 KFC 오류 TC 항목도 집계에 포함, 동시에 제3자배송도 모두 집계되도록 변경됨 -->
	<select id="selectStatisticsByIntervalAtTWKFC" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
		SELECT   ifnull(TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime), 0) AS interval_minute
				,ifnull(TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime), 0) AS d7_minute
		FROM     TB_ORDER
		WHERE    admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
		AND      status in (3)
		<choose>
			<when test="chkTime != null and chkTime == true">
				AND	  reservation_datetime >= #{currentDatetime}
				AND	  reservation_datetime <![CDATA[<]]> #{endDate}
			</when>
			<when test="chkPeakTime != null and chkPeakTime == true">
				AND	  reservation_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
				<choose>
					<when test="peakType != null and peakType == 1">
						AND   date_format(reservation_datetime, '%H:%i:%s') between '11:30' and '13:30'
					</when>
					<when test="peakType != null and peakType == 2">
						AND   date_format(reservation_datetime, '%H:%i:%s') between '17:30' and '19:30'
					</when>
					<otherwise>
						AND (  (date_format(reservation_datetime, '%H:%i:%s') between '11:30' and '13:30')
							OR (date_format(reservation_datetime, '%H:%i:%s') between '17:30' and '19:30')
							)
					</otherwise>
				</choose>
			</when>
			<otherwise>
				AND	  created_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
			</otherwise>
		</choose>
		-- 시간대별 통계에 대한 조건 추가
<!--		AND		 assigned_datetime is not null-->
<!--		AND		 picked_up_datetime is not null-->
<!--		AND		 ifnull(arrived_datetime, completed_datetime) is not null-->
<!--		AND		 return_datetime is not null-->
<!--		AND		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60-->
<!--		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0-->
<!--		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0-->
<!--		AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0-->
<!--		AND      third_party_id IS NULL-->
	</select>

	<!-- 통계 조회 List3 - 배달완료율 30분 미만 목록-->
	<select id="selectStatisticsMin30BelowByDate" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
		SELECT	 A.DATE as day_to_day
				,B.min_30below
		FROM(	SELECT	 CURDATE() - INTERVAL (a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) ) DAY AS DATE
			FROM(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
				)	 AS a
			CROSS JOIN
				(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
				)	 AS b
			CROSS JOIN
				(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
				)	AS c
			CROSS JOIN
				(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
				)	AS d
			)	 A
		LEFT JOIN
			(	SELECT	 DATE_FORMAT(O.CREATED_DATETIME,'%y-%m-%d') AS day_to_day
                        ,COUNT(CASE WHEN TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime) <![CDATA[<=]]> 30 THEN 1 END) / COUNT(O.ID) * 100 AS min_30below
				FROM	 TB_ORDER AS O
				WHERE	 O.admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
				AND		 O.STATUS IN (3)
				AND		 O.CREATED_DATETIME between #{currentDatetime} and DATE_ADD(#{currentDatetime}, INTERVAL (#{days} + 1) - 1 DAY)
				AND		 THIRD_PARTY_ID IS NULL
				-- 시간대별 통계에 대한 조건 추가
				AND		 assigned_datetime is not null
				AND		 picked_up_datetime is not null
				AND		 ifnull(arrived_datetime, completed_datetime) is not null
				AND		 return_datetime is not null
				AND		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60
				AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0
				AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0
				AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0
				GROUP BY day_to_day
			)	B
			ON	 A.DATE = B.day_to_day
		WHERE	 A.DATE BETWEEN #{currentDatetime} AND #{endDate}
		ORDER BY A.DATE
	</select>

	<select id="selectStatisticsMin30BelowByDateAtTWKFC" parameterType="kr.co.cntt.core.model.order.Order" resultType="Map">
		SELECT	 A.DATE as day_to_day
				,B.min_30below
				,B.min_07below
		FROM(	SELECT	 CURDATE() - INTERVAL (a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) ) DAY AS DATE
				FROM(	SELECT	 0 AS a
						UNION ALL
						SELECT	 1
						UNION ALL
						SELECT	 2
						UNION ALL
						SELECT	 3
						UNION ALL
						SELECT	 4
						UNION ALL
						SELECT	 5
						UNION ALL
						SELECT	 6
						UNION ALL
						SELECT	 7
						UNION ALL
						SELECT	 8
						UNION ALL
						SELECT	 9
					)	 AS a
				CROSS JOIN
					(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
					)	 AS b
					CROSS JOIN
					(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
					)	AS c
					CROSS JOIN
					(	SELECT	 0 AS a
					UNION ALL
					SELECT	 1
					UNION ALL
					SELECT	 2
					UNION ALL
					SELECT	 3
					UNION ALL
					SELECT	 4
					UNION ALL
					SELECT	 5
					UNION ALL
					SELECT	 6
					UNION ALL
					SELECT	 7
					UNION ALL
					SELECT	 8
					UNION ALL
					SELECT	 9
					)	AS d
				)	 A
		LEFT JOIN
				(	SELECT	 DATE_FORMAT(O.CREATED_DATETIME,'%y-%m-%d') AS day_to_day
							,COUNT(CASE WHEN TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), arrived_datetime) <![CDATA[<=]]> 30 THEN 1 END) / COUNT(O.ID) * 100 AS min_30below
							,SUM(CASE WHEN TIMESTAMPDIFF(MINUTE, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) <![CDATA[<]]> 7 THEN 1 ELSE 0 END) / COUNT(O.ID) * 100 as min_07below
					FROM	 TB_ORDER AS O
					WHERE	 O.admin_id = ( SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token} )
					AND		 O.STATUS IN (3)
					<choose>
						<when test="chkTime != null and chkTime == true">
							AND	  O.reservation_datetime >= #{currentDatetime}
							AND	  O.reservation_datetime <![CDATA[<]]> #{endDate}
						</when>
						<when test="chkPeakTime != null and chkPeakTime == true">
							AND	  O.reservation_datetime between #{currentDatetime} and date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)
							<choose>
								<when test="peakType != null and peakType == 1">
									AND   date_format(O.reservation_datetime, '%H:%i:%s') between '11:30' and '13:30'
								</when>
								<when test="peakType != null and peakType == 2">
									AND   date_format(O.reservation_datetime, '%H:%i:%s') between '17:30' and '19:30'
								</when>
								<otherwise>
									AND (  (date_format(O.reservation_datetime, '%H:%i:%s') between '11:30' and '13:30')
										OR (date_format(O.reservation_datetime, '%H:%i:%s') between '17:30' and '19:30')
										)
								</otherwise>
							</choose>
						</when>
						<otherwise>
							AND	  O.created_datetime between #{currentDatetime} and DATE_ADD(#{currentDatetime}, INTERVAL (#{days} + 1) - 1 DAY)
						</otherwise>
					</choose>
					AND		 THIRD_PARTY_ID IS NULL
					-- 시간대별 통계에 대한 조건 추가
<!--					AND		 assigned_datetime is not null-->
<!--					AND		 picked_up_datetime is not null-->
<!--					AND		 ifnull(arrived_datetime, completed_datetime) is not null-->
<!--					AND		 return_datetime is not null-->
<!--					AND		 timestampdiff(SECOND, ifnull(arrived_datetime, completed_datetime), return_datetime) >= 60-->
<!--					AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), ifnull(arrived_datetime, completed_datetime)) >= 0-->
<!--					AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), picked_up_datetime) >= 0-->
<!--					AND		 timestampdiff(SECOND, if(timestampdiff(minute, assigned_datetime, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute)) <![CDATA[<]]> 0, date_sub(reservation_datetime, interval case when ifnull(cooking_time, 30) > 30 or ifnull(cooking_time, 30) <![CDATA[<]]> 1 then 30 else ifnull(cooking_time, 30) end minute), assigned_datetime), return_datetime) >= 0-->
					GROUP BY day_to_day
				)	B
			ON	 A.DATE = B.day_to_day
		WHERE 1=1
		AND	  A.DATE between #{currentDatetime} and #{endDate}
		ORDER BY A.DATE
	</select>

	<select id="selectOverTimeByStore" parameterType="kr.co.cntt.core.model.store.Store" resultType="Map">
		select	 count(case when time_to_sec(timediff(now(), ifnull(O.created_datetime, concat(current_date(), ' 09:00:00')))) >= 3600 then 1 end)		as over60
				,count(case
						when time_to_sec(timediff(now(), ifnull(O.created_datetime, concat(current_date(), ' 09:00:00')))) >= 1800
						and	 time_to_sec(timediff(now(), ifnull(O.created_datetime, concat(current_date(), ' 09:00:00')))) <![CDATA[<]]> 3600
						then 1
				 end)		as over30
		from	 TB_STORE		as S
		left join (
					select	 store_id
							,max(created_datetime)		as created_datetime
					from	 TB_ORDER
					where	 created_datetime > current_date()
					group by store_id
				)				as O
			on	 S.id = O.store_id
		where	 S.deleted is null
		<if test="role == null || role != 'ROLE_ADMIN_AUTO'">
			and		 S.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		</if>
	</select>

	<!-- 21.01.21 서브 그룹의 이름 그룹화 -->
	<select id="selectSubGroupGrouping" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.SubGroup">
		select	 SUBSTRING_INDEX(A.name, '-', 1)		as name
				,A.group_id
				,A.admin_id
				,count(B.id)							as subGroupStoreCount
		from	 TB_SUBGROUP			A
		left join TB_SUBGROUP_STORE_REL	B
			on	 A.admin_id = B.admin_id
			and	 A.group_id = B.group_id
			and	 A.id = B.subgroup_id
		where	 A.deleted is null
		and		 B.deleted is null
		and		 A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		and		 A.group_id = #{id}
		group by SUBSTRING_INDEX(A.name, '-', 1), A.group_id, A.admin_id
		order by 1;
	</select>

	<select id="selectSubgrouGroupingStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		select	 A.created_datetime
				,A.modified_datetime
				,A.id
				,A.admin_id
				,A.group_id
				,A.subgroup_id
				,SUBSTRING_INDEX(C.name, '-', 1)		as name
				,A.store_id
				,B.store_name as storeName
				,B.ch_store_name as chStoreName
		from	 TB_SUBGROUP_STORE_REL		as A
		left join TB_STORE					as B
			on	 A.store_id = B.id
		left join TB_SUBGROUP				as C
			on	 A.admin_id = C.admin_id
			and	 A.group_id = C.group_id
			and	 A.subgroup_id = C.id
		where	 A.deleted is null
		and		 B.deleted is null
		and		 A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		<if test="groupId != null and groupingName != null">
			and		 A.group_id = #{groupId}
			and		 SUBSTRING_INDEX(C.name, '-', 1) = #{groupingName}
		</if>
		order by B.store_name;
	</select>

	<select id="selectReceivedMailAccount" parameterType="String" resultType="String">
		select	 addr_mail
		from	 TB_MAIL_LIST
		where	 acc_status = 1
		and		 admin_id = #{adminID};
	</select>

<!--	<select id="selectRegNewStoreList" resultType="java.util.Map">-->
<!--		select   a.id-->
<!--				,a.address-->
<!--				,a.login_id-->
<!--				,a.login_pw-->
<!--		from     TB_STORE           as a-->
<!--		left join TB_STORE_SESSION  as b-->
<!--		on a.id = b.store_id-->
<!--		where    a.deleted is null-->
<!--		and      b.access_token is null-->
<!--		and      a.created_datetime > current_date()-->
<!--	</select>-->
</mapper>
