<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.AdminMapper">

	<!-- selectRidersResult -->
	<resultMap id="selectRidersResult" type="kr.co.cntt.core.model.rider.Rider">
		<result property="id" column="id" />
        <result property="name" column="name" />
		<result property="code" column="code" />
		<result property="phone" column="phone" />
		<result property="emergencyPhone" column="emergency_phone" />
        <result property="address" column="address" />
		<result property="gender" column="gender" />
		<result property="employmentType" column="employment_type" />
		<result property="teenager" column="teenager" />
		<result property="vehicleNumber" column="vehicle_number" />
		<result property="loginId" column="login_id" />

		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

		<association property="subGroupRiderRel" column="subGroupRiderRel" javaType="kr.co.cntt.core.model.group.SubGroupRiderRel">
			<result property="id" column="subGroupRiderRel_id" />
			<result property="adminId" column="subGroupRiderRel_admin_id" />
			<result property="groupId" column="subGroupRiderRel_group_id" />
			<result property="subGroupId" column="subGroupRiderRel_subgroup_id" />
			<result property="storeId" column="subGroupRiderRel_store_id" />
			<result property="riderId" column="subGroupRiderRel_rider_id" />
		</association>

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="storeName" column="store_name" />
		</association>



	</resultMap>


	<!-- selectStoresResult -->
	<resultMap id="selectStoresResult" type="kr.co.cntt.core.model.store.Store">
		<result property="id" column="id" />
		<result property="code" column="code" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="storeName" column="store_name" />
		<result property="chStoreName" column="ch_store_name" />
		<result property="storePhone" column="store_phone" />
		<result property="loginId" column="login_id" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detail_address" />
		<result property="chAddress" column="ch_address" />
		<result property="chDetailAddress" column="ch_detail_address" />
		<result property="assignmentStatus" column="assignment_status" />

		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

	</resultMap>


	<!-- selectOrderResult -->
	<resultMap id="selectOrderResult" type="kr.co.cntt.core.model.order.Order">
		<result property="id" column="id" />
		<result property="adminId" column="admin_id" />
		<result property="storeId" column="store_id" />
		<result property="riderId" column="rider_id" />
		<result property="status" column="status" />
		<result property="createdDatetime" column="created_datetime" />
		<result property="menuName" column="menu_name" />
		<result property="assignedDatetime" column="assigned_datetime" />
		<result property="pickedUpDatetime" column="picked_up_datetime" />
		<result property="reservationDatetime" column="reservation_datetime" />
		<result property="completedDatetime" column="completed_datetime" />
		<result property="paid" column="paid" />


		<result property="cookingTime" column="cooking_time" />
		<result property="menuPrice" column="menu_price" />
		<result property="deliveryPrice" column="delivery_price" />
		<result property="totalPrice" column="total_price" />
		<result property="combinedOrderId" column="combined_order_id" />
		<result property="message" column="message" />
		<result property="phone" column="phone" />
		<result property="address" column="address" />
		<result property="areaAddress" column="area_address" />
		<result property="districtAddress" column="district_address" />
		<result property="streetAddress" column="street_address" />
		<result property="estateAddress" column="estate_address" />
		<result property="buildingAddress" column="building_address" />
		<result property="detailAddress" column="detail_address" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />

		<association property="store" column="store" javaType="kr.co.cntt.core.model.store.Store">
			<result property="storeName" column="store_name" />
		</association>

		<association property="rider" column="rider" javaType="kr.co.cntt.core.model.rider.Rider">
			<result property="id" column="id" />
			<result property="name" column="name" />
			<result property="phone" column="rider_phone" />
		</association>




		<association property="payment" column="payment" javaType="kr.co.cntt.core.model.payment.Payment">
			<result property="type" column="type" />
			<result property="orderId" column="order_id" />
		</association>


		<association property="group" column="group" javaType="kr.co.cntt.core.model.group.Group">
			<result property="id" column="group_id" />
			<result property="name" column="group_name" />
			<result property="adminId" column="group_admin_id" />
		</association>

		<association property="subGroup" column="subGroup" javaType="kr.co.cntt.core.model.group.SubGroup">
			<result property="id" column="subgroup_id" />
			<result property="groupId" column="subgroup_group_id" />
			<result property="name" column="subgroup_name" />
			<result property="adminId" column="subgroup_admin_id" />
		</association>

	</resultMap>



	<!-- loginAdminInfo -->
	<select id="loginAdminInfo" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="kr.co.cntt.core.model.admin.Admin">
		SELECT
			A.id, A.chat_user_id, A.login_id, A.login_pw,
			A.name, A.state, A.assignment_status, A.assignment_limit,
			B.access_token
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE A.login_id = #{loginId}
			AND login_pw = #{loginPw}
			AND deleted IS NULL
		ORDER BY B.Created_datetime DESC
		limit 1
	</select>


	<!-- selectLoginAdmin -->
	<select id="selectLoginAdmin" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="String">
		SELECT login_id, id FROM TB_ADMIN
		WHERE 1=1
			AND login_id = #{loginId}
		<!--AND login_pw = #{loginPw}-->
		limit 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectAdminTokenCheck" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectAdminTokenLoginCheck" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="kr.co.cntt.core.model.login.User">
		<![CDATA[
		SELECT
			A.login_id, A.login_pw
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		LIMIT 1
		]]>
	</select>


	<!-- insertAdminSession -->
	<insert id="insertAdminSession" parameterType="kr.co.cntt.core.model.admin.Admin">
		<![CDATA[
		INSERT INTO TB_ADMIN_SESSION(admin_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_ADMIN
		WHERE login_id = #{loginId}
		]]>
	</insert>


	<!-- selectAdminInfo -->
	<select id="selectAdminInfo" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.admin.Admin">
		SELECT
			created_datetime
			, modified_datetime
			, chat_user_id
			, id
			, name
			, login_id
			, state
			, assignment_status
			, assignment_limit
		FROM TB_ADMIN
		WHERE id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</select>


	<!-- updateAdminInfo -->
	<update id="updateAdminInfo" parameterType="kr.co.cntt.core.model.admin.Admin">
		UPDATE TB_ADMIN
		SET modified_datetime = now()
		<if test="loginPw != null and loginPw != ''">
			, login_pw = #{loginPw}
		</if>
		<if test="assignmentStatus != null and assignmentStatus != '' and assignmentStatus != 'none'">
			, assignment_status = #{assignmentStatus}
		</if>
		<if test="assignmentStatus == 'none'">
			, assignment_status = NULL
		</if>
		<if test="assignmentLimit != null and assignmentLimit != ''">
			, assignment_limit = #{assignmentLimit}
		</if>
		WHERE deleted IS NULL
			AND id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>


	<!-- selectGroups -->
	<select id="selectGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.Group">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.name
			, A.admin_id
-- 			, COUNT(B.id) AS subGroupCount
			, (SELECT COUNT(id) from TB_SUBGROUP WHERE group_id=A.id) AS subGroupCount
			, COUNT(C.id) AS subGroupStoreCount
-- 			, (SELECT COUNT(id) from TB_SUBGROUP_STORE_REL WHERE subgroup_id=B.id) AS subGroupStoreCount
		FROM TB_GROUP AS A
		LEFT JOIN TB_SUBGROUP AS B
		ON A.id = B.group_id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON B.id = C.subgroup_id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
		GROUP BY A.id
		ORDER BY A.name ASC
	</select>


	<!-- insertGroup -->
	<insert id="insertGroup" parameterType="kr.co.cntt.core.model.group.Group">
		INSERT INTO TB_GROUP (
			created_datetime
			, name
			, admin_id
		) VALUES (
			now()
			, #{name}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateGroup -->
	<update id="updateGroup" parameterType="kr.co.cntt.core.model.group.Group">
		UPDATE TB_GROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteGroup -->
	<update id="deleteGroup" parameterType="kr.co.cntt.core.model.group.Group">
		UPDATE TB_GROUP AS A
		LEFT JOIN TB_SUBGROUP AS B
		ON A.id = B.group_id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON B.id = C.group_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS D
		ON B.id = D.group_id
		SET A.deleted = now()
			,B.deleted = now()
			,C.deleted = now()
			,D.deleted = now()
		WHERE A.id = #{id}
			AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
			AND D.deleted IS NULL
	</update>


	<!-- selectSubGroups -->
	<select id="selectSubGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.SubGroup">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.name
			, A.group_id
			, A.admin_id
			, COUNT(B.id) AS subGroupStoreCount
		FROM TB_SUBGROUP AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.subgroup_id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.group_id = #{id}
			AND A.deleted IS NULL
			AND B.deleted IS NULL
		GROUP BY A.id
		ORDER BY A.name ASC
	</select>


	<!-- insertSubGroup -->
	<insert id="insertSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		INSERT INTO TB_SUBGROUP (
			created_datetime
			, name
			, group_id
			, admin_id
		) VALUES (
			now()
			, #{name}
			, #{groupId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateSubGroup -->
	<update id="updateSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE TB_SUBGROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND group_id = #{groupId}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteSubGroup -->
	<update id="deleteSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE TB_SUBGROUP AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.subgroup_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.subgroup_id
		SET A.deleted = now()
			,B.deleted = now()
			,C.deleted = now()
		WHERE A.id = #{id}
		AND A.group_id = #{groupId}
		AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND A.deleted IS NULL
		AND B.deleted IS NULL
		AND C.deleted IS NULL
	</update>


	<!-- selectNoneSubgroupStoreRels -->
	<select id="selectNoneSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT id
	      , store_name
	      , ch_store_name
        FROM TB_STORE
        WHERE id not in ((SELECT store_id FROM TB_SUBGROUP_STORE_REL WHERE deleted is null))
          AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
          AND deleted IS NULL
	</select>


	<!-- selectSubgroupStoreRels -->
	<select id="selectSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.admin_id
			, A.group_id
			, A.subgroup_id
			, A.store_id
			, B.store_name AS storeName
			, B.ch_store_name AS chStoreName
		FROM TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_STORE AS B
		ON A.store_id = B.id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			<if test="groupId != null and subGroupId != null">
				AND A.group_id = #{groupId}
				AND A.subgroup_id = #{subGroupId}
			</if>
			AND A.deleted IS NULL
			AND B.deleted IS NULL
		ORDER BY B.store_name ASC
	</select>


	<!-- insertSubGroupStoreRel -->
	<insert id="insertSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_SUBGROUP_STORE_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
		) VALUES (
			now()
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{subGroupStoreRel.groupId}
			, #{subGroupStoreRel.subGroupId}
			, #{id}
		)
	</insert>


	<!-- updateSubGroupStoreRel -->
	<update id="updateSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_STORE_REL
		SET modified_datetime = now()
        <if test="subGroupStoreRel.groupId != null and subGroupStoreRel.groupId != '' and subGroupStoreRel.subGroupId != null and subGroupStoreRel.subGroupId != ''">
			, group_id = #{subGroupStoreRel.groupId}
			, subgroup_id = #{subGroupStoreRel.subGroupId}
        </if>
        <if test="subGroupStoreRel.groupId == null and subGroupStoreRel.groupId == '' and subGroupStoreRel.subGroupId == null and subGroupStoreRel.subGroupId == ''">
            , deleted = now()
        </if>

		WHERE store_id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- updateStoreSubGroup 상점 서브 그룹만 수정 -->
	<update id="updateStoreSubGroup" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_STORE_REL
		SET modified_datetime = now()
		, subgroup_id = #{subGroupStoreRel.subGroupId}
		WHERE store_id = #{id}
		AND group_id = #{subGroupStoreRel.groupId}
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND deleted IS NULL
	</update>


	<!-- updateRiderStore 기사 상점만 수정 -->
	<update id="updateRiderStore" parameterType="kr.co.cntt.core.model.rider.Rider">
		UPDATE TB_SUBGROUP_RIDER_REL
		SET modified_datetime = now()
		<if test="subGroupRiderRel.storeId != null and subGroupRiderRel.storeId != ''">
			, store_id = #{subGroupRiderRel.storeId}
			, group_id = #{subGroupRiderRel.groupId}
			, subGroup_id = #{subGroupRiderRel.subGroupId}
		</if>

		<if test="subGroupRiderRel.storeId == null and subGroupRiderRel.storeId == ''">
			, deleted = now()
		</if>

		WHERE rider_id = #{id}
		AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND deleted IS NULL
	</update>



	<!-- deleteSubGroupStoreRel -->
	<update id="deleteSubGroupStoreRel" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		UPDATE TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.store_id = B.store_id
			AND A.subgroup_id = B.subgroup_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.store_id = C.store_id
			AND A.subgroup_id = C.subgroup_id
		SET A.deleted = now()
			, B.deleted = now()
			, C.deleted = now()
		WHERE A.store_id = #{storeId}
			AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
	</update>


	<!-- insertSubGroupRiderRel -->
	<insert id="insertSubGroupRiderRel" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_SUBGROUP_RIDER_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
			, rider_id
		) VALUES (
			now()
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{subGroupRiderRel.groupId}
			, #{subGroupRiderRel.subGroupId}
			, #{subGroupRiderRel.storeId}
			, #{id}
		)
	</insert>


	<!-- insertChatUser -->
	<insert id="insertChatUser" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER (
			created_datetime
			, type
		) VALUES (
			now()
			, #{type}
		)
		<selectKey keyProperty="chatUserId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatRoom -->
	<insert id="insertChatRoom" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHATROOM (
			created_datetime
		) VALUES (
			now()
		)
		<selectKey keyProperty="chatRoomId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatUserChatRoomRel -->
	<insert id="insertChatUserChatRoomRel" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER_CHATROOM_REL (
			chat_user_id
			, chatroom_id
		) VALUES (
			#{chatUserId}
			, #{chatRoomId}
		)
	</insert>


	<!-- selectRiders -->
	<select id="selectRiders" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectRidersResult">
		SELECT
			A.id
			, A.name
			, A.code
			, A.phone
 			, TS.store_name
			, A.address
			, A.login_id
			, A.gender
			, A.emergency_phone
			, A.employment_type
			, A.teenager
			, A.vehicle_number
			, C.id AS subgroup_id
			, C.group_id AS subgroup_group_id
			, C.name AS subgroup_name
			, C.admin_id AS subgroup_admin_id
			, D.id AS group_id
			, D.name AS group_name
			, D.admin_id AS group_admin_id
			, B.store_id AS subGroupRiderRel_store_id
			, B.subgroup_id  AS subGroupRiderRel_subgroup_id
			, B.group_id AS subGroupRiderRel_group_id



		FROM TB_RIDER AS A

		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		AND B.deleted IS NULL

 		left join
        TB_STORE AS TS
        on B.store_id = TS.id
        AND TS.deleted is NULL

		LEFT JOIN TB_SUBGROUP AS C
		ON B.group_id = C.group_id
		AND B.subgroup_id = C.id
		AND C.deleted IS NULL

		LEFT JOIN  TB_GROUP AS D
		ON B.group_id = D.id
		AND D.deleted IS NULL

		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			ORDER BY A.name
	</select>


	<!-- insertRider -->
	<insert id="insertRider" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_RIDER (
			created_datetime
			, chat_user_id
			, admin_id
			, name
			, phone
			, login_id
			, login_pw
			, code
			, gender
			, employment_type
			, address
			, vehicle_number
			, emergency_phone
			, working_hours
			, rest_hours
			, teenager
		) VALUES (
			now()
			, #{chatUserId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{name}
			, #{phone}
			, #{loginId}
			, #{loginPw}
			<if test="code != null and code != ''">
				, #{code}
			</if>
			<if test="code == null or code == ''">
				, NULL
			</if>
			, #{gender}
			<if test="employmentType != null and employmentType != ''">
				, #{employmentType}
			</if>
			<if test="employmentType == null or employmentType == ''">
				, NULL
			</if>

			<if test="address != null and address != ''">
				, #{address}
			</if>
			<if test="address == null or address == ''">
				, NULL
			</if>
			<if test="vehicleNumber != null and vehicleNumber != ''">
				, #{vehicleNumber}
			</if>
			<if test="vehicleNumber == null or vehicleNumber == ''">
				, NULL
			</if>
			<if test="emergencyPhone != null and emergencyPhone != ''">
				, #{emergencyPhone}
			</if>
			<if test="emergencyPhone == null or emergencyPhone == ''">
				, NULL
			</if>
			, #{workingHours}
			<if test="restHours != null and restHours != ''">
				, #{restHours}
			</if>
			<if test="restHours == null or restHours == ''">
				, NULL
			</if>
			, #{teenager}
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- deleteRider -->
	<update id="deleteRider" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		SET A.deleted = now()
		    , B.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
	</update>


	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.common.Common" resultMap="selectStoresResult">
		SELECT
			A.id
			, A.code
			, A.name
			, A.phone
			, A.store_name
			, A.ch_store_name
			, A.store_phone
			, A.login_id
			, A.address
			, A.detail_address
			, A.ch_address
			, A.ch_detail_address
			, A.assignment_status
			, C.id AS subgroup_id
			, C.group_id AS subgroup_group_id
			, C.name AS subgroup_name
			, C.admin_id AS subgroup_admin_id
			, D.id AS group_id
			, D.name AS group_name
			, D.admin_id AS group_admin_id
		FROM TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
			AND B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
		ON B.group_id = C.group_id
			AND B.subgroup_id = C.id
			AND C.deleted IS NULL
		LEFT JOIN  TB_GROUP AS D
		ON B.group_id = D.id
			AND D.deleted IS NULL
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			ORDER BY A.name
	</select>


	<!-- insertStore -->
	<insert id="insertStore" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_STORE (
		created_datetime
		, chat_user_id
		, chatroom_id
		, admin_id
		, login_id
		, login_pw
		, store_name
		, store_phone
		, address
		, latitude
		, longitude
		, expiration_date
		, code
		, name
		, phone
		, ch_store_name
		, detail_address
		, ch_address
		, ch_detail_address
		, radius
		, store_distance_sort
		, assignment_status
		, assignment_limit
		) VALUES (
		now()
		, #{chatUserId}
		, #{chatRoomId}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		, #{loginId}
		, #{loginPw}
		, #{storeName}
		, #{storePhone}
		, #{address}
		, #{latitude}
		, #{longitude}
		<if test="expirationDate != null and expirationDate != ''">
			, #{expirationDate}
		</if>
		<if test="expirationDate == null or expirationDate == ''">
			, '3000-01-01'
		</if>
		<if test="code != null and code != ''">
			, #{code}
		</if>
		<if test="code == null or code == ''">
			, NULL
		</if>
		<if test="name != null and name != ''">
			, #{name}
		</if>
		<if test="name == null or name == ''">
			, NULL
		</if>
		<if test="phone != null and phone != ''">
			, #{phone}
		</if>
		<if test="phone == null or phone == ''">
			, NULL
		</if>
		<if test="chStoreName != null and chStoreName != ''">
			, #{chStoreName}
		</if>
		<if test="chStoreName == null or chStoreName == ''">
			, NULL
		</if>
		<if test="detailAddress != null and detailAddress != ''">
			, #{detailAddress}
		</if>
		<if test="detailAddress == null or detailAddress == ''">
			, NULL
		</if>
		<if test="chAddress != null and chAddress != ''">
			, #{chAddress}
		</if>
		<if test="chAddress == null or chAddress == ''">
			, NULL
		</if>
		<if test="chDetailAddress != null and chDetailAddress != ''">
			, #{chDetailAddress}
		</if>
		<if test="chDetailAddress == null or chDetailAddress == ''">
			, NULL
		</if>
		<if test="radius != null and radius != ''">
			, #{radius}
		</if>
		<if test="radius == null or radius == ''">
			, 1
		</if>
		<if test="storeDistanceSort != null and storeDistanceSort != ''">
			, #{storeDistanceSort}
		</if>
		<if test="storeDistanceSort == null or storeDistanceSort == ''">
			, NULL
		</if>
		<if test="assignmentStatus != null and assignmentStatus != ''">
			, #{assignmentStatus}
		</if>
		<if test="assignmentStatus == null or assignmentStatus == ''">
			, 0
		</if>
		<if test="assignmentLimit != null and assignmentLimit != ''">
			, #{assignmentLimit}
		</if>
		<if test="assignmentLimit == null or assignmentLimit == ''">
			, NULL
		</if>
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>



	<!-- deleteStore -->
	<update id="deleteStore" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET A.deleted = now()
		    , B.deleted = now()
		    , C.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
		    AND C.deleted IS NULL
	</update>


	<!-- updateAdminAssignmentStatus -->
	<update id="updateAdminAssignmentStatus" parameterType="kr.co.cntt.core.model.admin.Admin">
		UPDATE TB_ADMIN
		SET assignment_status = #{assignmentStatus}
			modified_datetime = now()
		WHERE id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</update>


	<!-- insertThirdParty -->
	<insert id="insertThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		INSERT INTO TB_THIRD_PARTY (
			created_datetime
			, name
			, admin_id
		) VALUES(
			now()
			, #{name}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateThirdParty -->
	<update id="updateThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		UPDATE TB_THIRD_PARTY
		SET modified_datetime = now()
			,name = #{name}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- deleteThirdParty -->
	<update id="deleteThirdParty" parameterType="kr.co.cntt.core.model.thirdParty.ThirdParty">
		UPDATE TB_THIRD_PARTY
			SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- insertAlarm -->
	<insert id="insertAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm">
		INSERT INTO TB_ALARM (
		created_datetime
		, alarm_type
		, admin_id
		, ori_file_name
		, file_name
		, file_size
		) VALUES (
		now()
		, #{alarmType}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		, #{oriFileName}
		, #{fileName}
		, #{fileSize}
		)
	</insert>


	<!-- deleteAlarm -->
	<update id="deleteAlarm" parameterType="kr.co.cntt.core.model.alarm.Alarm">
		UPDATE TB_ALARM
			SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND id = #{id}
			AND deleted IS NULL
	</update>


	<!-- 통계 조회 List -->
	<select id="selectAdminStatistics" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
		SELECT
		TG.name AS group_name
	, TG.id AS group_id
	, TG.admin_id AS group_admin_id
	, TSG.id AS subgroup_id
	, TSG.name AS subgroup_name
	, TSG.admin_id AS subgroup_admin_id
	, TSG.group_id AS subgroup_group_id
	, SSR.store_id AS subGroupStoreRel_store_id
	, TBS.store_name
	, TBO.admin_id
	, TBO.store_id
	, TBO.rider_id
	, TBO.status
	, TBO.id
	, TBO.created_datetime
	, TBO.picked_up_datetime
	, TBO.menu_name
	, TBO.cooking_time
	, TBP.type
	, TBO.assigned_datetime
	, TBO.picked_up_datetime
	, TBO.reservation_datetime
	, TBR.name
	, TBO.address
	, TBO.paid


	FROM TB_ORDER AS TBO

	LEFT JOIN
	TB_RIDER AS TBR
	on TBR.id = TBO.rider_id
	AND TBR.deleted is NULL

	LEFT JOIN
	TB_STORE AS TBS
	on TBS.id = TBO.store_id
	AND TBS.deleted is NULL

	LEFT JOIN
	TB_PAYMENT AS TBP
	on TBP.order_id = TBO.id
	AND TBP.deleted is NULL

	LEFT JOIN
	TB_SUBGROUP_STORE_REL AS SSR
	on TBO.store_id = SSR.store_id
	AND SSR.deleted is NULL

	LEFT JOIN
	TB_SUBGROUP AS TSG
	on SSR.group_id = TSG.id
	AND TSG.deleted is NULL

	LEFT JOIN
	TB_GROUP AS TG
	on SSR.group_id = TG.id
	AND TG.deleted is NULL

	WHERE

	TBO.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	AND TBO.status = 3 AND 4
 	AND date_add(#{currentDatetime}, interval (#{days} + 1) - 1 day)  > TBO.created_datetime
    AND TBO.created_datetime > #{currentDatetime}

	ORDER BY TBO.created_datetime ASC
	<!--<if test="startDate != null and startDate != ''">-->
		<!--AND start_date = #{startDate}-->
	<!--</if>-->
	<!--<if test="endDate != null and endDate != ''">-->
		<!--AND end_date = #{endDate}-->
	<!--</if>-->
	</select>


	<!-- 통계 조회 info -->
	<select id="selectAdminStatisticsInfo" parameterType="kr.co.cntt.core.model.order.Order" resultMap="selectOrderResult">
		SELECT
		TG.name AS group_name
		, TG.id AS group_id
		, TG.admin_id AS group_admin_id
		, TSG.id AS subgroup_id
		, TSG.name AS subgroup_name
		, TSG.admin_id AS subgroup_admin_id
		, TSG.group_id AS subgroup_group_id
		, SSR.store_id AS subGroupStoreRel_store_id
		, TBO.admin_id
		, TBO.store_id
		, TBO.rider_id
		, TBO.status
		, TBO.id
		, TBO.created_datetime
		, TBO.assigned_datetime
		, TBO.picked_up_datetime
		, TBO.reservation_datetime
		, TBO.completed_datetime
		, TBO.menu_name
		, TBO.cooking_time
		, TBO.menu_price
		, TBO.delivery_price
		, TBO.total_price
		, TBP.type
		, TBO.combined_order_id
		, TBR.name
		, TBR.phone AS rider_phone
		, TBO.message
		, TBO.phone
		, TBO.address
		, TBO.area_address
		, TBO.district_address
		, TBO.street_address
		, TBO.estate_address
		, TBO.building_address
		, TBO.detail_address
		, TBO.latitude
		, TBO.longitude


		FROM TB_ORDER AS TBO

		LEFT JOIN
		TB_RIDER AS TBR
		on TBR.id = TBO.rider_id
		AND TBR.deleted is NULL

		LEFT JOIN
		TB_STORE AS TBS
		on TBS.id = TBO.store_id
		AND TBS.deleted is NULL

		LEFT JOIN
		TB_PAYMENT AS TBP
		on TBP.order_id = TBO.id
		AND TBP.deleted is NULL

		LEFT JOIN
		TB_SUBGROUP_STORE_REL AS SSR
		on TBO.store_id = SSR.store_id
		AND SSR.deleted is NULL

		LEFT JOIN
		TB_SUBGROUP AS TSG
		on SSR.group_id = TSG.id
		AND TSG.deleted is NULL

		LEFT JOIN
		TB_GROUP AS TG
		on SSR.group_id = TG.id
		AND TG.deleted is NULL
		where

		TBO.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND TBO.status = 3 AND 4
		AND TBO.id = #{id}
	</select>



	<!-- selectStoreList -->
	<select id="selectStoreList" parameterType="kr.co.cntt.core.model.store.Store" resultMap="selectStoresResult">
		SELECT
		A.id
		, A.code
		, A.name
		, A.phone
		, A.store_name
		, A.ch_store_name
		, A.store_phone
		, A.login_id
		, A.address
		, A.detail_address
		, A.assignment_status
		, A.ch_address
		, A.ch_detail_address
		, C.id AS subgroup_id
		, C.group_id AS subgroup_group_id
		, C.name AS subgroup_name
		, C.admin_id AS subgroup_admin_id
		, D.id AS group_id
		, D.name AS group_name
		, D.admin_id AS group_admin_id
		FROM TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		AND B.deleted IS NULL
		LEFT JOIN TB_SUBGROUP AS C
		ON B.group_id = C.group_id
		AND B.subgroup_id = C.id
		AND C.deleted IS NULL
		LEFT JOIN  TB_GROUP AS D
		ON B.group_id = D.id
		AND D.deleted IS NULL
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND A.deleted IS NULL
		ORDER BY A.name
	</select>

	<!--우선 배정 추가 -->
	<!-- insertOrderFirstAssignmentReason -->
	<insert id="insertOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		INSERT INTO TB_ORDER_FIRST_ASSIGNMENT_REASON (
		created_datetime
		, reason
		, admin_id
		) VALUES(
		now()
		, #{reason}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>

	<!--우선 배정 수정 -->
	<update id="updateOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_ORDER_FIRST_ASSIGNMENT_REASON
		SET modified_datetime = now()
		,reason = #{reason}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>

	<!-- 우선 배정 삭제 -->
	<update id="deleteOrderFirstAssignmentReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_ORDER_FIRST_ASSIGNMENT_REASON
		SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>
	<!--배정 거절 사유 추가 -->
	<!-- insertRejectReason -->
	<insert id="insertRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		INSERT INTO TB_REJECT_REASON (
		created_datetime
		, reason
		, admin_id
		) VALUES(
		now()
		, #{reason}
		, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>

	<!--배정 거절 사유 수정 -->
	<update id="updateRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_REJECT_REASON
		SET modified_datetime = now()
		,reason = #{reason}
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>

	<!-- 배정 거절 사유 삭제 -->
	<update id="deleteRejectReason" parameterType="kr.co.cntt.core.model.reason.Reason">
		UPDATE TB_REJECT_REASON
		SET deleted = now()
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND id = #{id}
		AND deleted IS NULL
	</update>


	<!--상점 아이디 중복 체크  -->
	<select id="selectStoreLoginIdCheck" parameterType="kr.co.cntt.core.model.store.Store" resultType="int">
	SELECT
		count(*) as user_count
	FROM TB_STORE
	WHERE
		login_id = #{loginId}
	</select>


	<select id="selectRiderLoginIdCheck" parameterType="kr.co.cntt.core.model.rider.Rider" resultType="int">
		SELECT
		count(*) as user_count
		FROM TB_RIDER
		WHERE
		login_id = #{loginId}
	</select>





</mapper>
