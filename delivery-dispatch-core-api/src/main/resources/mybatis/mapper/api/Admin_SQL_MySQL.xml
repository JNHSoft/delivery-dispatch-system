<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.cntt.core.mapper.AdminMapper">

	<select id="selectLoginAdmin" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="String">
		SELECT login_id, id FROM TB_ADMIN
		WHERE 1=1
			AND login_id = #{loginId}
		<!--AND login_pw = #{loginPw}-->
		limit 1
	</select>


	<!--
		- login ID  및 Aceess 토근 값체크
		- expiry_datetime 이 NULL 이거나 금일 datetime 보다 큰 값
	-->
	<select id="selectAdminTokenCheck" parameterType="kr.co.cntt.core.model.admin.Admin" resultType="int">
		<![CDATA[
		SELECT
			COUNT(*)
		FROM TB_ADMIN A JOIN TB_ADMIN_SESSION B
		ON A.id = B.admin_id
		WHERE 1=1
			AND A.login_id = #{loginId}
			AND B.access_token = #{accessToken}
			AND (expiry_datetime IS NULL OR expiry_datetime > now())
		]]>
	</select>


	<!-- insertAdminSession -->
	<insert id="insertAdminSession" parameterType="kr.co.cntt.core.model.admin.Admin">
		<![CDATA[
		INSERT INTO TB_ADMIN_SESSION(admin_id, access_token, created_datetime)
		SELECT
			id
			, #{accessToken}
			, now()
		FROM TB_ADMIN
		WHERE login_id = #{loginId}
		]]>
	</insert>


	<!-- selectAdminInfo -->
	<select id="selectAdminInfo" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.admin.Admin">
		SELECT
			created_datetime
			, modified_datetime
			, chat_user_id
			, id
			, name
			, login_id
			, state
		FROM TB_ADMIN
		WHERE id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</select>


	<!-- selectGroups -->
	<select id="selectGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.Group">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.name
			, A.admin_id
-- 			, COUNT(B.id) AS subGroupCount
			, (SELECT COUNT(id) from TB_SUBGROUP WHERE group_id=A.id) AS subGroupCount
			, COUNT(C.id) AS subGroupStoreCount
-- 			, (SELECT COUNT(id) from TB_SUBGROUP_STORE_REL WHERE subgroup_id=B.id) AS subGroupStoreCount
		FROM TB_GROUP AS A
		LEFT JOIN TB_SUBGROUP AS B
		ON A.id = B.group_id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON B.id = C.subgroup_id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
		GROUP BY A.id
		ORDER BY A.name ASC
	</select>


	<!-- insertGroup -->
	<insert id="insertGroup" parameterType="kr.co.cntt.core.model.group.Group">
		INSERT INTO TB_GROUP (
			created_datetime
			, name
			, admin_id
		) VALUES (
			now()
			, #{name}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>

	<!-- updateGroup -->
	<update id="updateGroup" parameterType="kr.co.cntt.core.model.group.Group">
		UPDATE TB_GROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteGroup -->
	<update id="deleteGroup" parameterType="kr.co.cntt.core.model.group.Group">
		UPDATE TB_GROUP AS A
		LEFT JOIN TB_SUBGROUP AS B
		ON A.id = B.group_id
		LEFT JOIN TB_SUBGROUP_STORE_REL AS C
		ON B.id = C.group_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS D
		ON B.id = D.group_id
		SET A.deleted = now()
			,B.deleted = now()
			,C.deleted = now()
			,D.deleted = now()
		WHERE A.id = #{id}
			AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
			AND D.deleted IS NULL
	</update>


	<!-- selectSubGroups -->
	<select id="selectSubGroups" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.group.SubGroup">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.name
			, A.group_id
			, A.admin_id
			, COUNT(B.id) AS subGroupStoreCount
		FROM TB_SUBGROUP AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.subgroup_id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.group_id = #{id}
			AND A.deleted IS NULL
			AND B.deleted IS NULL
		GROUP BY A.id
		ORDER BY A.name ASC
	</select>


	<!-- insertSubGroup -->
	<insert id="insertSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		INSERT INTO TB_SUBGROUP (
			created_datetime
			, name
			, group_id
			, admin_id
		) VALUES (
			now()
			, #{name}
			, #{groupId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		)
	</insert>


	<!-- updateSubGroup -->
	<update id="updateSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE TB_SUBGROUP
		SET modified_datetime = now()
			, name = #{name}
		WHERE id = #{id}
			AND group_id = #{groupId}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteSubGroup -->
	<update id="deleteSubGroup" parameterType="kr.co.cntt.core.model.group.SubGroup">
		UPDATE TB_SUBGROUP AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.subgroup_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.subgroup_id
		SET A.deleted = now()
			,B.deleted = now()
			,C.deleted = now()
		WHERE A.id = #{id}
		AND A.group_id = #{groupId}
		AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		AND A.deleted IS NULL
		AND B.deleted IS NULL
		AND C.deleted IS NULL
	</update>


	<!-- selectNoneSubgroupStoreRels -->
	<select id="selectNoneSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT id
	      , store_name
	      , ch_store_name
        FROM TB_STORE
        WHERE id not in ((SELECT store_id FROM TB_SUBGROUP_STORE_REL))
          AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
          AND deleted IS NULL
	</select>


	<!-- selectSubgroupStoreRels -->
	<select id="selectSubgroupStoreRels" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel" resultType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		SELECT
			A.created_datetime
			, A.modified_datetime
			, A.id
			, A.admin_id
			, A.group_id
			, A.subgroup_id
			, A.store_id
			, B.store_name AS storeName
			, B.ch_store_name AS chStoreName
		FROM TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_STORE AS B
		ON A.store_id = B.id
		WHERE A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			<if test="groupId != null and subGroupId != null">
				AND A.group_id = #{groupId}
				AND A.subgroup_id = #{subGroupId}
			</if>
			AND A.deleted IS NULL
			AND B.deleted IS NULL
		ORDER BY B.store_name ASC
	</select>


	<!-- insertSubGroupStoreRel -->
	<insert id="insertSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_SUBGROUP_STORE_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
		) VALUES (
			now()
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{group.id}
			, #{subGroup.id}
			, #{id}
		)
	</insert>


	<!-- updateSubGroupStoreRel -->
	<update id="updateSubGroupStoreRel" parameterType="kr.co.cntt.core.model.store.Store">
		UPDATE TB_SUBGROUP_STORE_REL
		SET modified_datetime = now()
			, group_id = #{group.id}
			, subgroup_id = #{subGroup.id}
		WHERE store_id = #{id}
			AND admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND deleted IS NULL
	</update>


	<!-- deleteSubGroupStoreRel -->
	<update id="deleteSubGroupStoreRel" parameterType="kr.co.cntt.core.model.group.SubGroupStoreRel">
		UPDATE TB_SUBGROUP_STORE_REL AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.store_id = B.store_id
			AND A.subgroup_id = B.subgroup_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.store_id = C.store_id
			AND A.subgroup_id = C.subgroup_id
		SET A.deleted = now()
			, B.deleted = now()
			, C.deleted = now()
		WHERE A.id = #{id}
			AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			AND A.deleted IS NULL
			AND B.deleted IS NULL
			AND C.deleted IS NULL
	</update>


	<!-- insertSubGroupRiderRel -->
	<insert id="insertSubGroupRiderRel" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_SUBGROUP_RIDER_REL (
			created_datetime
			, admin_id
			, group_id
			, subgroup_id
			, store_id
			, rider_id
		) VALUES (
			now()
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{subGroupStoreRel.groupId}
			, #{subGroupStoreRel.subGroupId}
			, #{subGroupStoreRel.storeId}
			, #{id}
		)
	</insert>


	<!-- insertChatUser -->
	<insert id="insertChatUser" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER (
			created_datetime
			, type
		) VALUES (
			now()
			, #{type}
		)
		<selectKey keyProperty="chatUserId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatRoom -->
	<insert id="insertChatRoom" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHATROOM (
			created_datetime
		) VALUES (
			now()
		)
		<selectKey keyProperty="chatRoomId" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- insertChatUserChatRoomRel -->
	<insert id="insertChatUserChatRoomRel" parameterType="kr.co.cntt.core.model.login.User">
		INSERT INTO TB_CHAT_USER_CHATROOM_REL (
			chat_user_id
			, chatroom_id
		) VALUES (
			#{chatUserId}
			, #{chatRoomId}
		)
	</insert>


	<!-- selectRiders -->
	<select id="selectRiders" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.rider.Rider">
		SELECT
			id
			, name
			, phone
			, login_id
			, position
			, gender
			, employment_type
			, working
			, status
		FROM TB_RIDER
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</select>


	<!-- insertRider -->
	<insert id="insertRider" parameterType="kr.co.cntt.core.model.rider.Rider">
		INSERT INTO TB_RIDER (
			created_datetime
			, chat_user_id
			, admin_id
			, name
			, phone
			, login_id
			, login_pw
			, code
			, gender
			, employment_type
			, address
			, vehicle_number
			, emergency_phone
			, working_hours
			, rest_hours
			, teenager
		) VALUES (
			now()
			, #{chatUserId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{name}
			, #{phone}
			, #{loginId}
			, #{loginPw}
			<if test="code != null and code != ''">
				, #{code}
			</if>
			<if test="code == null or code == ''">
				, NULL
			</if>
			, #{gender}
			, #{employmentType}
			<if test="address != null and address != ''">
				, #{address}
			</if>
			<if test="address == null or address == ''">
				, NULL
			</if>
			<if test="vehicleNumber != null and vehicleNumber != ''">
				, #{vehicleNumber}
			</if>
			<if test="vehicleNumber == null or vehicleNumber == ''">
				, NULL
			</if>
			<if test="emergencyPhone != null and emergencyPhone != ''">
				, #{emergencyPhone}
			</if>
			<if test="emergencyPhone == null or emergencyPhone == ''">
				, NULL
			</if>
			, #{workingHours}
			<if test="restHours != null and restHours != ''">
				, #{restHours}
			</if>
			<if test="restHours == null or restHours == ''">
				, NULL
			</if>
			, #{teenager}
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- deleteRider -->
	<update id="deleteRider" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_RIDER AS A
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS B
		ON A.id = B.rider_id
		SET A.deleted = now()
		    , B.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
	</update>


	<!-- selectStores -->
	<select id="selectStores" parameterType="kr.co.cntt.core.model.common.Common" resultType="kr.co.cntt.core.model.store.Store">
		SELECT
			id
			, code
			, name
			, phone
			, store_name
			, ch_store_name
			, store_phone
			, login_id
			, latitude
			, longitude
			, store_status
			, assignment_status
			, assignment_limit
		FROM TB_STORE
		WHERE admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
	</select>


	<!-- insertStore -->
	<insert id="insertStore" parameterType="kr.co.cntt.core.model.store.Store">
		INSERT INTO TB_STORE (
			created_datetime
			, chat_user_id
			, admin_id
			, login_id
			, login_pw
			, store_name
			, store_phone
			, address
			, latitude
			, longitude
			, expiration_date
			, code
			, name
			, phone
			, ch_store_name
			, detail_address
			, ch_address
			, ch_detail_address
			, radius
			, store_distance_sort
			, assignment_status
			, assignment_limit
		) VALUES (
			now()
			, #{chatUserId}
			, (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
			, #{loginId}
			, #{loginPw}
			, #{storeName}
			, #{storePhone}
			, #{address}
			, #{latitude}
			, #{longitude}
			<if test="expirationDate != null and expirationDate != ''">
				, #{expirationDate}
			</if>
			<if test="expirationDate == null or expirationDate == ''">
				, '3000-01-01'
			</if>
			<if test="code != null and code != ''">
				, #{code}
			</if>
			<if test="code == null or code == ''">
				, NULL
			</if>
			<if test="name != null and name != ''">
				, #{name}
			</if>
			<if test="name == null or name == ''">
				, NULL
			</if>
			<if test="phone != null and phone != ''">
				, #{phone}
			</if>
			<if test="phone == null or phone == ''">
				, NULL
			</if>
			<if test="chStoreName != null and chStoreName != ''">
				, #{chStoreName}
			</if>
			<if test="chStoreName == null or chStoreName == ''">
				, NULL
			</if>
			<if test="detailAddress != null and detailAddress != ''">
				, #{detailAddress}
			</if>
			<if test="detailAddress == null or detailAddress == ''">
				, NULL
			</if>
			<if test="chAddress != null and chAddress != ''">
				, #{chAddress}
			</if>
			<if test="chAddress == null or chAddress == ''">
				, NULL
			</if>
			<if test="chDetailAddress != null and chDetailAddress != ''">
				, #{chDetailAddress}
			</if>
			<if test="chDetailAddress == null or chDetailAddress == ''">
				, NULL
			</if>
			<if test="radius != null and radius != ''">
				, #{radius}
			</if>
			<if test="radius == null or radius == ''">
				, 1
			</if>
			<if test="storeDistanceSort != null and storeDistanceSort != ''">
				, #{storeDistanceSort}
			</if>
			<if test="storeDistanceSort == null or storeDistanceSort == ''">
				, NULL
			</if>
			<if test="assignmentStatus != null and assignmentStatus != ''">
				, #{assignmentStatus}
			</if>
			<if test="assignmentStatus == null or assignmentStatus == ''">
				, 0
			</if>
			<if test="assignmentLimit != null and assignmentLimit != ''">
				, #{assignmentLimit}
			</if>
			<if test="assignmentLimit == null or assignmentLimit == ''">
				, NULL
			</if>
		)
		<selectKey keyProperty="id" resultType="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<!-- deleteStore -->
	<update id="deleteStore" parameterType="kr.co.cntt.core.model.common.Common">
		UPDATE TB_STORE AS A
		LEFT JOIN TB_SUBGROUP_STORE_REL AS B
		ON A.id = B.store_id
		LEFT JOIN TB_SUBGROUP_RIDER_REL AS C
		ON A.id = C.store_id
		SET A.deleted = now()
		    , B.deleted = now()
		    , C.deleted = now()
		WHERE A.id = #{id}
		    AND A.admin_id = (SELECT admin_id FROM TB_ADMIN_SESSION WHERE access_token = #{token})
		    AND A.deleted IS NULL
		    AND B.deleted IS NULL
		    AND C.deleted IS NULL
	</update>

</mapper>
 